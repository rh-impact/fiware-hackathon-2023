---

- DOMAIN_NAME: Smart Cities
  REPO_URL: https://github.com/smart-data-models/SmartCities.git
  SUBMODULES:
    - SUBMODULE_SHORT_NAME: Building
      MODELS:
    - SUBMODULE_SHORT_NAME: OSLO
      MODELS:
        - MODEL_NAME: BicycleParkingStation
        - MODEL_DESCRIPTION: Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                datamodel soon. Current version:https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
              description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
              mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
              startDate: null}
            - {adopter: velopark.be, comments: 'Catalogue:https://data.velopark.be/data/catalog',
              description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
              mail: null, organization: Nazka, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              BicycleParkingStation of the Subject dataModel.OSLO

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: BicycleParkingStation  \n=============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/BicycleParkingStation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `InfrastructureElement.geometry`: The geometry corresponding to the infrastructure element.  \r- `ParkingFacility.^capacity`: Capacity of a civic structure.   \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be BicycleParkingStation  \r  \n\rRequired properties  \n- `InfrastructureElement.geometry`  \r- `ParkingFacility.^capacity`  \r- `id`  \r- `location`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBicycleParkingStation:    \n  description: 'Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification'    \n  properties:    \n    InfrastructureElement.geometry:    \n      description: 'The geometry corresponding to the infrastructure element.'    \n      properties:    \n        Geometry.wkt:    \n          description: \"Property. Model:'http://www.opengis.net/ont/geosparql#asWKT'. Geometry expressed in wkt format.\"    \n          properties: {}    \n          type: string    \n        type:    \n          description: \"Property. Model: 'http://www.w3.org/ns/locn#Geometry'\"    \n          enum:    \n            - Geometry    \n          type: string    \n      required:    \n        - type    \n        - Geometry.wkt    \n      type: object    \n      x-ngsi:    \n        model: \"http://www.w3.org/ns/locn#geometry\"    \n        type: Property    \n    ParkingFacility.^capacity:    \n      description: 'Capacity of a civic structure. '    \n      properties:    \n        Capacity.total:    \n          description: \"Property. Model: 'http://schema.mobivoc.org/#totalCapacity'. Indicates the capacity of a resource.\"    \n          type: number    \n        type:    \n          enum:    \n            - Capacity    \n          type: string    \n      required:    \n        - type    \n        - Capacity.total    \n      type: object    \n      x-ngsi:    \n        model: \"http://schema.mobivoc.org/#capacity\"    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &bicycleparkingstation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *bicycleparkingstation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be BicycleParkingStation'    \n      enum:    \n        - BicycleParkingStation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - ParkingFacility.^capacity    \n    - InfrastructureElement.geometry    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/BicycleParkingStation/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/incubated/dataModel.OSLO.PassengerTransportHubs/raw/master/BicycleParkingStationPTH-AP/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### BicycleParkingStation NGSI-v2 key-values Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  }  \n}  \n```  \n\r#### BicycleParkingStation NGSI-v2 normalized Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Number\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  }  \n}  \n```  \n\r#### BicycleParkingStation NGSI-LD key-values Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### BicycleParkingStation NGSI-LD normalized Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Property\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: BicycleParkingStationForecast
        - MODEL_DESCRIPTION: Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                datamodel soon. Current version:https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
              description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
              mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
              startDate: null}
            - {adopter: velopark.be, comments: 'Catalogue:https://data.velopark.be/data/catalog',
              description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
              mail: null, organization: Nazka, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              BicycleParkingStation of the Subject dataModel.OSLO

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: BicycleParkingStationForecast  \n=====================================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/BicycleParkingStationForecast/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification**  \n\rversion: 0.1.0  \n\n\r## List of properties  \n\n\r- `InfrastructureElement.geometry`: The geometry corresponding to the infrastructure element.  \r- `ParkingFacility.capacity`: Capacity of a civic structure.   \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be BicycleParkingStation  \r- `validFrom`: Validity period start date and time.  \r- `validTo`: Validity period end date and time.  \r- `validity`: Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBicycleParkingStationForecast:    \n  description: 'Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification'    \n  properties:    \n    InfrastructureElement.geometry:    \n      description: 'The geometry corresponding to the infrastructure element.'    \n      properties:    \n        Geometry.wkt:    \n          description: \"Property. Model:'http://www.opengis.net/ont/geosparql#asWKT'. Geometry expressed in wkt format.\"    \n          properties: {}    \n          type: string    \n        type:    \n          description: \"Property. Model: 'http://www.w3.org/ns/locn#Geometry'\"    \n          enum:    \n            - Geometry    \n          type: string    \n      required:    \n        - type    \n        - Geometry.wkt    \n      type: object    \n      x-ngsi:    \n        model: \"http://www.w3.org/ns/locn#geometry\"    \n        type: Property    \n    ParkingFacility.capacity:    \n      description: 'Capacity of a civic structure. '    \n      properties:    \n        Capacity.total:    \n          description: \"Property. Model: 'http://schema.mobivoc.org/#totalCapacity'. Indicates the capacity of a resource.\"    \n          type: number    \n        type:    \n          enum:    \n            - Capacity    \n          type: string    \n      required:    \n        - type    \n        - Capacity.total    \n      type: object    \n      x-ngsi:    \n        model: \"http://schema.mobivoc.org/#capacity\"    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &bicycleparkingstationforecast_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *bicycleparkingstationforecast_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be BicycleParkingStation'    \n      enum:    \n        - BicycleParkingStationForecast    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    validFrom:    \n      description: 'Validity period start date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validTo:    \n      description: 'Validity period end date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validity:    \n      description: 'Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/BicycleParkingStationForecast/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/dataModel.OSLO/raw/master/BicycleParkingStationForecast/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.1.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### BicycleParkingStationForecast NGSI-v2 key-values Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  }  \n}  \n```  \n\r#### BicycleParkingStationForecast NGSI-v2 normalized Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Number\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  }  \n}  \n```  \n\r#### BicycleParkingStationForecast NGSI-LD key-values Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### BicycleParkingStationForecast NGSI-LD normalized Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Property\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: ResourceReport
        - MODEL_DESCRIPTION: Resource Report Schema meeting Passenger Transport Hubs AP Schema specification. A summary of resources connected to mobility services based on defined filters by the person requesting the report.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                datamodel soon. Current version: https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
              description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
              mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
              startDate: null}
            - {adopter: velopark.be, comments: 'Catalogue: https://data.velopark.be/data/catalog',
              description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
              mail: null, organization: Nazka, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              ResourceReport of the Subject dataModel.OSLO

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: ResourceReport  \n======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/ResourceReport/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Resource Report Schema meeting Passenger Transport Hubs AP Schema specification. A summary of resources connected to mobility services based on defined filters by the person requesting the report.**  \n\rversion: 0.0.3  \n\n\r## List of properties  \n\n\r- `ResourceReport.actuator`: Engine of the means of transport.  \r- `ResourceReport.location`: Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.  \r- `ResourceReport.meansOfTransport`: The type of means of transport of the Resource.  \r- `ResourceReport.number`: The number of resources.  \r- `ResourceReport.reportTime`: Point in time for which the report is valid.  \r- `ResourceReport.service`: The MobilityService used within the ResourceReport.  \r- `ResourceReport.status`: State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.  \r- `ResourceReport.type`: Nature of the Resource.  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be ResourceReport.  \r  \n\rRequired properties  \n- `ResourceReport.number`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nResourceReport:    \n  description: 'Resource Report Schema meeting Passenger Transport Hubs AP Schema specification. A summary of resources connected to mobility services based on defined filters by the person requesting the report.'    \n  properties:    \n    ResourceReport.actuator:    \n      description: 'Engine of the means of transport.'    \n      properties:    \n        ActuatorType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'combustionEngine, electric, electricWithSupport, human'\"    \n          enum:    \n            - combustionEngine    \n            - electric    \n            - electricWithSupport    \n            - human    \n          type: string    \n        type:    \n          enum:    \n            - ActuatorType    \n          type: string    \n      required:    \n        - type    \n        - ActuatorType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#actuator\"    \n        type: Property    \n    ResourceReport.location:    \n      description: 'Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#location\"    \n        type: Property    \n    ResourceReport.meansOfTransport:    \n      description: 'The type of means of transport of the Resource.'    \n      properties:    \n        MeansOfTransport.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'airplane, bicycle, boat, bus, car, escalator, lift, motorcycle, onFoot, pedelec, scooter, skateboard, step, subway, train, tram, treadmill, truck'\"    \n          enum:    \n            - airplane    \n            - bicycle    \n            - boat    \n            - bus    \n            - car    \n            - escalator    \n            - lift    \n            - motorcycle    \n            - onFoot    \n            - pedelec    \n            - scooter    \n            - skateboard    \n            - step    \n            - subway    \n            - train    \n            - tram    \n            - treadmill    \n            - truck    \n          type: string    \n        type:    \n          enum:    \n            - MeansOfTransport    \n          type: string    \n      required:    \n        - type    \n        - MeansOfTransport.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#Mobiliteitsdienst.vervoermiddel\"    \n        type: Property    \n    ResourceReport.number:    \n      description: 'The number of resources.'    \n      type: integer    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#number\"    \n        type: Property    \n    ResourceReport.reportTime:    \n      description: 'Point in time for which the report is valid.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: http://purl.org/dc/elements/1.1/date    \n        type: Property    \n    ResourceReport.service:    \n      description: 'The MobilityService used within the ResourceReport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#service\"    \n        type: Property    \n    ResourceReport.status:    \n      description: 'State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.'    \n      properties:    \n        ResourceStatus.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'available, deleted, inactive, inUse, relocated, reserved, unavailable'\"    \n          enum:    \n            - available    \n            - deleted    \n            - inactive    \n            - inUse    \n            - relocated    \n            - reserved    \n            - unavailable    \n          type: string    \n        type:    \n          enum:    \n            - ResourceStatus    \n          type: string    \n      required:    \n        - type    \n        - ResourceStatus.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#status\"    \n        type: Property    \n    ResourceReport.type:    \n      description: 'Nature of the Resource.'    \n      properties:    \n        ResourceType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'chargingStation, parkingSpace, room, seating, vehicle'\"    \n          enum:    \n            - chargingStation    \n            - parkingSpace    \n            - room    \n            - seating    \n            - vehicle    \n          type: string    \n        type:    \n          enum:    \n            - ResourceType    \n          type: string    \n      required:    \n        - type    \n        - ResourceType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: http://purl.org/dc/terms/type    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &resourcereport_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *resourcereport_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be ResourceReport.'    \n      enum:    \n        - ResourceReport    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - ResourceReport.number    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/ResourceReport/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/dataModel.OSLO/raw/master/ResourceReport/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.0.3    \n```  \n</details>    \n\r## Example payloads    \n\r#### ResourceReport NGSI-v2 key-values Example    \n\rHere is an example of a ResourceReport in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  }  \n}  \n```  \n\r#### ResourceReport NGSI-v2 normalized Example    \n\rHere is an example of a ResourceReport in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"ActuatorType\",  \n        \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"MeansOfTransport\",  \n        \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"ResourceStatus\",  \n        \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"ResourceType\",  \n        \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  }  \n}  \n```  \n\r#### ResourceReport NGSI-LD key-values Example    \n\rHere is an example of a ResourceReport in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### ResourceReport NGSI-LD normalized Example    \n\rHere is an example of a ResourceReport in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"ActuatorType\",  \n        \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"MeansOfTransport\",  \n        \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"ResourceStatus\",  \n        \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"ResourceType\",  \n        \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n\t\"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: ResourceReportForecast
        - MODEL_DESCRIPTION: Resource Report Forecast Schema meeting Passenger Transport Hubs AP Schema specification. A summary of the expectations of the resources connected to mobility services based on defined filters by the person requesting the report.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                datamodel soon. Current version: https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
              description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
              mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
              startDate: null}
            - {adopter: velopark.be, comments: 'Catalogue: https://data.velopark.be/data/catalog',
              description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
              mail: null, organization: Nazka, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              ResourceReportForecast of the Subject dataModel.OSLO

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: ResourceReportForecast  \n==============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/ResourceReportForecast/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Resource Report Forecast Schema meeting Passenger Transport Hubs AP Schema specification. A summary of the expectations of the resources connected to mobility services based on defined filters by the person requesting the report.**  \n\rversion: 0.0.2  \n\n\r## List of properties  \n\n\r- `ResourceReport.actuator`: Engine of the means of transport.  \r- `ResourceReport.location`: Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.  \r- `ResourceReport.meansOfTransport`: The type of means of transport of the Resource.  \r- `ResourceReport.number`: The number of resources.  \r- `ResourceReport.reportTime`: Point in time for which the report is valid.  \r- `ResourceReport.service`: The MobilityService used within the ResourceReport.  \r- `ResourceReport.status`: State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.  \r- `ResourceReport.type`: Nature of the Resource.  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be ResourceReportForecast  \r- `validFrom`: Validity period start date and time.  \r- `validTo`: Validity period end date and time.  \r- `validity`: Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.  \r  \n\rRequired properties  \n- `ResourceReport.number`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nResourceReportForecast:    \n  description: 'Resource Report Forecast Schema meeting Passenger Transport Hubs AP Schema specification. A summary of the expectations of the resources connected to mobility services based on defined filters by the person requesting the report.'    \n  properties:    \n    ResourceReport.actuator:    \n      description: 'Engine of the means of transport.'    \n      properties:    \n        ActuatorType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'combustionEngine, electric, electricWithSupport, human'\"    \n          enum:    \n            - combustionEngine    \n            - electric    \n            - electricWithSupport    \n            - human    \n          type: string    \n        type:    \n          enum:    \n            - ActuatorType    \n          type: string    \n      required:    \n        - type    \n        - ActuatorType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#actuator\"    \n        type: Property    \n    ResourceReport.location:    \n      description: 'Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#location\"    \n        type: Property    \n    ResourceReport.meansOfTransport:    \n      description: 'The type of means of transport of the Resource.'    \n      properties:    \n        MeansOfTransport.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'airplane, bicycle, boat, bus, car, escalator, lift, motorcycle, onFoot, pedelec, scooter, skateboard, step, subway, train, tram, treadmill, truck'\"    \n          enum:    \n            - airplane    \n            - bicycle    \n            - boat    \n            - bus    \n            - car    \n            - escalator    \n            - lift    \n            - motorcycle    \n            - onFoot    \n            - pedelec    \n            - scooter    \n            - skateboard    \n            - step    \n            - subway    \n            - train    \n            - tram    \n            - treadmill    \n            - truck    \n          type: string    \n        type:    \n          enum:    \n            - MeansOfTransport    \n          type: string    \n      required:    \n        - type    \n        - MeansOfTransport.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#Mobiliteitsdienst.vervoermiddel\"    \n        type: Property    \n    ResourceReport.number:    \n      description: 'The number of resources.'    \n      type: integer    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#number\"    \n        type: Property    \n    ResourceReport.reportTime:    \n      description: 'Point in time for which the report is valid.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: http://purl.org/dc/elements/1.1/date    \n        type: Property    \n    ResourceReport.service:    \n      description: 'The MobilityService used within the ResourceReport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#service\"    \n        type: Property    \n    ResourceReport.status:    \n      description: 'State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.'    \n      properties:    \n        ResourceStatus.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'available, deleted, inactive, inUse, relocated, reserved, unavailable'\"    \n          enum:    \n            - available    \n            - deleted    \n            - inactive    \n            - inUse    \n            - relocated    \n            - reserved    \n            - unavailable    \n          type: string    \n        type:    \n          enum:    \n            - ResourceStatus    \n          type: string    \n      required:    \n        - type    \n        - ResourceStatus.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#status\"    \n        type: Property    \n    ResourceReport.type:    \n      description: 'Nature of the Resource.'    \n      properties:    \n        ResourceType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'chargingStation, parkingSpace, room, seating, vehicle'\"    \n          enum:    \n            - chargingStation    \n            - parkingSpace    \n            - room    \n            - seating    \n            - vehicle    \n          type: string    \n        type:    \n          enum:    \n            - ResourceType    \n          type: string    \n      required:    \n        - type    \n        - ResourceType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: http://purl.org/dc/terms/type    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &resourcereportforecast_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *resourcereportforecast_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be ResourceReportForecast'    \n      enum:    \n        - ResourceReportForecast    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    validFrom:    \n      description: 'Validity period start date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validTo:    \n      description: 'Validity period end date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validity:    \n      description: 'Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - ResourceReport.number    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/ResourceReportForecast/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/dataModel.OSLO/raw/master/ResourceReport/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### ResourceReportForecast NGSI-v2 key-values Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReportForecast\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"validFrom\": \"2022-05-07T06:43:37Z\",  \n  \"validTo\": \"2022-05-07T07:43:37Z\"  \n}  \n```  \n\r#### ResourceReportForecast NGSI-v2 normalized Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReportForecast\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"ActuatorType\",  \n      \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"MeansOfTransport\",  \n      \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"ResourceStatus\",  \n      \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"ResourceType\",  \n      \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  },  \n  \"validFrom\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-05-07T06:43:37Z\"  \n  },  \n  \"validTo\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-05-07T07:43:37Z\"  \n  }  \n}  \n```  \n\r#### ResourceReportForecast NGSI-LD key-values Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReportForecast\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"validFrom\": \"2022-05-07T06:43:37Z\",  \n  \"validTo\": \"2022-05-07T07:43:37Z\",  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### ResourceReportForecast NGSI-LD normalized Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"ActuatorType\",  \n      \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"MeansOfTransport\",  \n      \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"ResourceStatus\",  \n      \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"ResourceType\",  \n      \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  },  \n  \"validFrom\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-05-07T06:43:37Z\"  \n    }  \n  },  \n  \"validTo\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-05-07T07:43:37Z\"  \n    }  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: Parking
      MODELS:
        - MODEL_NAME: OffStreetParking
        - MODEL_DESCRIPTION: Off street parking
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A parking facility Data Model., mail: null,
              organization: IUDX, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              OffStreetParking of the Subject dataModel.Parking.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: OffStreetParking  \n========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Parking/blob/master/OffStreetParking/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Off street parking**  \n\rversion: 0.1.2  \n\n\r## List of properties  \n\n\r- `acceptedPaymentMethod`: Enum:'ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'. Accepted payment method(s).  \r- `accessModified`: Timestamp when `vehicleEntranceCount` and `vehicleExitCount` was updated. Allowed values: ISO8601  \r- `address`: The mailing address  \r- `aggregateRating`: Aggregated rating for this parking site.  \r- `allowedVehicleType`:  Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. Free spot numbers of other allowed vehicle types might be reported under the attribute `extraSpotNumber` and through specific entities of type _ParkingGroup_. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html). Enum:'agriculturalVehicle, anyVehicle, bicycle, bus, car, caravan, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, trailer, van'  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `availableSpotNumber`: The number of spots available (_including_ all  vehicle types or reserved spaces, such as those for disabled people, long term parkers and so on). This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines. Allowed values: A positive integer number, including 0. It must lower or equal than `totalSpotNumber`.  \r- `averageSpotLength`: The average length of parking spots.  \r- `averageSpotWidth`: The average width of parking spots.  \r- `category`: Parking site's category(ies). The purpose of this field is to allow to tag, generally speaking, off street parking entities  \r- `chargeType`: Type(s) of charge performed by the parking site. Allowed values: Some of those defined by the DATEX II version 2.3 _ ChargeTypeEnum_ enumeration. Enum:'additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, other, seasonTicket, temporaryPrice'. Or any other application-specific  \r- `contactPoint`: Parking site contact point.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `extCategory`: External category to complement category.  \r- `extraSpotNumber`: The number of extra spots _available_, i.e. free. This value must aggregate free spots from all groups mentioned below: A/ Those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). B/ Those reserved for other vehicle types different than the principal allowed vehicle type. C/ Any other group of parking spots not subject to the general condition rules conveyed by this entity.  \r- `facilities`: Allowed values: The following defined by the _EquipmentTypeEnum_ enumeration of DATEX II version 2.3. Enum:'bikeParking, cashMachine, copyMachineOrService, defibrillator, dumpingStation, electricChargingStation, elevator, faxMachineOrService, fireHose, fireExtinguisher, fireHydrant, firstAidEquipment, freshWater, iceFreeScaffold, informationPoint, internetWireless, luggageLocker, payDesk, paymentMachine, playground, publicPhone, refuseBin, safeDeposit, shower, toilet, tollTerminal, vendingMachine, wasteDisposal' . Any other application-specific  \r- `firstAvailableFloor`: Number of the floor closest to the ground which currently has available parking spots. Allowed values: Stories are numbered between -n and n, being 0 ground floor.  \r- `fourWheelerSlots`: Four wheeler parking spot availability status in parking site corresponding to this observation.  \r- `highestFloor`: For parking sites with multiple floor levels, highest floor. An integer number. 0 is ground level. Upper floors are positive numbers. Lower floors are negative ones.  \r- `id`: Unique identifier of the entity  \r- `images`: A URL containing a photo of this parking site  \r- `layout`: Parking layout. Gives more details to the `category` attribute. Allowed values: As per the _ParkingLayoutEnum_ of DATEX II version 2.3. Enum:'automatedParkingGarage, carports, covered, field, garageBoxes, multiLevel, multiStorey, nested, openSpace, rooftop, sheds, singleLevel, surface, other'. See also [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Tag:amenity%3Dparking). Or any other value useful for the application and not covered above.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `lowestFloor`: For parking sites with multiple floor levels, lowest floor. Allowed values: An integer number.  \r- `maximumAllowedHeight`: Maximum allowed height for vehicles. If there are multiple zones, it will be the minimum height of all the zones.  \r- `maximumAllowedWidth`: Maximum allowed width for vehicles. If there are multiple zones, it will be the minimum width of all the zones.  \r- `maximumParkingDuration`: Maximum allowed stay at site, on a general basis, encoded as a ISO8601 duration or with any other string relevant for parking.  An empty value or when non present indicates an indefinite duration  \r- `measuresPeriod`: The measures period related to availableSpotNumber and priceRatePerMinute.  \r- `measuresPeriodUnit`: The measures period unit related to availableSpotNumber and PriceRatePerMinute.  \r- `municipalityInfo`: Municipality information corresponding to this observation.  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `occupancy`: Relative value of occupied spots out of the total spots.  \r- `occupancyDetectionType`: Occupancy detection method(s).  Allowed values: The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_. Enum:'balancing, manual, modelBased, none, singleSpaceDetection'. Or any other application-specific  \r- `occupancyModified`: Relative value of occupied spots out of the total spots. Allowed values: 0 - 1  \r- `occupiedSpotNumber`: Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber  \r- `openingHours`: Opening hours of the parking site.  \r- `outOfServiceSlotNumber`: The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `parkingMode`: Parking mode(s). Allowed values: Those defined by the DATEX II version 2.3 _ParkingModeEnum_ enumeration. Enum:'echelonParking, parallelParking, perpendicularParking'  \r- `parkingSiteId`: The unique ID of the parking site or parking lot corresponding to this observation.  \r- `priceCurrency`: Price currency of price rate per minute  \r- `priceRatePerMinute`: Price rate per minute.  \r- `provider`: Parking site service provider  \r- `refParkingAccess`: Parking site's access point(s).  \r- `refParkingGroup`: Parking site identified group(s). A group can correspond to a zone, a complete storey, a group of spots, etc.  \r- `refParkingSpot`: Individual parking spots belonging to this offStreet parking site.  \r- `requiredPermit`: This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a ','. For instance 'residentPermit,disabledPermit' stays that both, at the same time, a resident and a disabled permit are needed to park. If the list is empty no permit is needed. Allowed values: The following, defined by the _PermitTypeEnum_ enumeration of DATEX II version 2.3. Enum:'employeePermit, fairPermit, governmentPermit, noPermitNeeded, residentPermit, specificIdentifiedVehiclePermit, studentPermit, visitorPermit'. Or any other application-specific  \r- `reservationType`: he following specified by _ReservationTypeEnum_ of DATEX II version 2.3. Enum:'mandatory, notAvailable, optional, partly'  \r- `security`: Security aspects provided by this parking site. Allowed values: The following, some of them, defined by _ParkingSecurityEnum_ of DATEX II version 2.3. Enum:'areaSeparatedFromSurroundings, cctv, dog, externalSecurity, fences, floodLight, guard24hours, lighting, patrolled, securityStaff' . or any other application-specific  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `specialLocation`: If the parking site is at a special location (airport, department store, etc.) it conveys what is such special location.  Allowed values: Those defined by _ParkingSpecialLocationEnum_ of [DATEX II version 2.3](http://www.datex2.eu/content/parking-publications-extension-v10a). Enum:'airportTerminal, cableCarStation, campground, cinema, coachStation, conventionCentre, exhibitionCentre, ferryTerminal, hotel, market, publicTransportStation, religiousCentre, shoppingCentre, skilift, specificFacility, themePark, trainStation, vehicleOnRailTerminal, other'  \r- `status`: Status of the parking site. Allowed values: The following defined by the following enumerations defined by DATEX II version 2.3. Enum:'almostFull, closed, closedAbnormal, full, fullAtEntrance, open, openingTimesInForce, spacesAvailable'. Or any other application-specific  \r- `totalSpotNumber`: The total number of spots offered by this parking site.  This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Allowed values: Any positive integer number or 0. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.  \r- `twoWheelerSlots`: Two wheeler parking spot availability status in parking site corresponding to this observation.  \r- `type`: It has to be OffStreetParking  \r- `unclassifiedSlots`: Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.  \r- `usageScenario`: Usage scenario(s). Gives more details to the `category` attribute. Allowed values: Those defined by the enumeration _ParkingUsageScenarioEnum_ of DATEX II version 2.3. Enum:'automaticParkingGuidance, carSharing, dropOffWithValet, dropOffMechanical, dropOff, eventParking, kissAndRide, liftShare, loadingBay, overnightParking, parkAndCycle, parkAndRide, parkAndWalk, restArea, serviceArea, staffGuidesToSpace, truckParking, vehicleLift, other'. Or any other value useful for the application and not covered above.  \r- `vehicleEntranceCount`: Aggregated number of vehicle that enter the parking site in a period of time.  \r- `vehicleExitCount`: Aggregated number of vehicle that leave the parking site in a period of time.  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `type`  \r  \n\rA site, off street, intended to park vehicles, managed independently and with suitable and clearly marked access points (entrances and exits). If necessary, and for management purposes or to deal with multi-location parking sites, it can be divided into different zones modelled by the entity type [ParkingGroup](../ParkingGroup/README.md) . In DATEX 2 version 2.3 terminology it corresponds to a _UrbanParkingSite_ of type _offStreetParking_. A data dictionary for DATEX II terms can be found at [http://datexbrowser.tamtamresearch.com/](http://datexbrowser.tamtamresearch.com/).  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOffStreetParking:    \n  description: 'Off street parking'    \n  properties:    \n    acceptedPaymentMethod:    \n      description: 'Enum:''ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm''. Accepted payment method(s).'    \n      items:    \n        enum:    \n          - ByBankTransferInAdvance    \n          - ByInvoice    \n          - Cash    \n          - CheckInAdvance    \n          - COD    \n          - DirectDebit    \n          - GoogleCheckout    \n          - PayPal    \n          - PaySwarm    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/acceptedPaymentMethod    \n        type: Property    \n    accessModified:    \n      description: 'Timestamp when `vehicleEntranceCount` and `vehicleExitCount` was updated. Allowed values: ISO8601'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    aggregateRating:    \n      description: 'Aggregated rating for this parking site.'    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/aggregateRating    \n        type: Property    \n    allowedVehicleType:    \n      description: ' Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. Free spot numbers of other allowed vehicle types might be reported under the attribute `extraSpotNumber` and through specific entities of type _ParkingGroup_. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html). Enum:''agriculturalVehicle, anyVehicle, bicycle, bus, car, caravan, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, trailer, van'''    \n      items:    \n        enum:    \n          - agriculturalVehicle    \n          - anyVehicle    \n          - bicycle    \n          - bus    \n          - car    \n          - caravan    \n          - carWithCaravan    \n          - carWithTrailer    \n          - constructionOrMaintenanceVehicle    \n          - lorry    \n          - moped    \n          - motorcycle    \n          - motorcycleWithSideCar    \n          - motorscooter    \n          - tanker    \n          - trailer    \n          - van    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    availableSpotNumber:    \n      description: 'The number of spots available (_including_ all  vehicle types or reserved spaces, such as those for disabled people, long term parkers and so on). This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines. Allowed values: A positive integer number, including 0. It must lower or equal than `totalSpotNumber`.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    averageSpotLength:    \n      description: 'The average length of parking spots.'    \n      exclusiveMinimum: true    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/length    \n        type: Property    \n        units: meters    \n    averageSpotWidth:    \n      description: 'The average width of parking spots.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/width    \n        type: Property    \n        units: meters    \n    category:    \n      description: 'Parking site''s category(ies). The purpose of this field is to allow to tag, generally speaking, off street parking entities'    \n      items:    \n        enum:    \n          - barrierAccess    \n          - feeCharged    \n          - forCustomers    \n          - forDisabled    \n          - forElectricalCharging    \n          - forEmployees    \n          - forMembers    \n          - forResidents    \n          - forStudents    \n          - forVisitors    \n          - free    \n          - freeAccess    \n          - gateAccess    \n          - guarded    \n          - ground    \n          - longTerm    \n          - mediumTerm    \n          - onlyResidents    \n          - onlyWithPermit    \n          - parkingGarage    \n          - parkingLot    \n          - private    \n          - public    \n          - publicPrivate    \n          - shortTerm    \n          - staffed    \n          - underground    \n          - urbanDeterrentParking    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    chargeType:    \n      description: 'Type(s) of charge performed by the parking site. Allowed values: Some of those defined by the DATEX II version 2.3 _ ChargeTypeEnum_ enumeration. Enum:''additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, other, seasonTicket, temporaryPrice''. Or any other application-specific'    \n      items:    \n        enum:    \n          - additionalIntervalPrice    \n          - annualPayment    \n          - firstIntervalPrice    \n          - flat    \n          - free    \n          - minimum    \n          - maximum    \n          - monthlyPayment    \n          - other    \n          - seasonTicket    \n          - temporaryPrice    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    contactPoint:    \n      description: 'Parking site contact point.'    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/contactPoint    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    extCategory:    \n      description: 'External category to complement category.'    \n      items:    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    extraSpotNumber:    \n      description: 'The number of extra spots _available_, i.e. free. This value must aggregate free spots from all groups mentioned below: A/ Those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). B/ Those reserved for other vehicle types different than the principal allowed vehicle type. C/ Any other group of parking spots not subject to the general condition rules conveyed by this entity.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    facilities:    \n      description: 'Allowed values: The following defined by the _EquipmentTypeEnum_ enumeration of DATEX II version 2.3. Enum:''bikeParking, cashMachine, copyMachineOrService, defibrillator, dumpingStation, electricChargingStation, elevator, faxMachineOrService, fireHose, fireExtinguisher, fireHydrant, firstAidEquipment, freshWater, iceFreeScaffold, informationPoint, internetWireless, luggageLocker, payDesk, paymentMachine, playground, publicPhone, refuseBin, safeDeposit, shower, toilet, tollTerminal, vendingMachine, wasteDisposal'' . Any other application-specific'    \n      items:    \n        enum:    \n          - bikeParking    \n          - cashMachine    \n          - copyMachineOrService    \n          - defibrillator    \n          - dumpingStation    \n          - electricChargingStation    \n          - elevator    \n          - faxMachineOrService    \n          - fireHose    \n          - fireExtinguisher    \n          - fireHydrant    \n          - firstAidEquipment    \n          - freshWater    \n          - iceFreeScaffold    \n          - informationPoint    \n          - internetWireless    \n          - luggageLocker    \n          - payDesk    \n          - paymentMachine    \n          - playground    \n          - publicPhone    \n          - refuseBin    \n          - safeDeposit    \n          - shower    \n          - toilet    \n          - tollTerminal    \n          - vendingMachine    \n          - wasteDisposal    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: \"\"    \n        type: Property    \n    firstAvailableFloor:    \n      description: 'Number of the floor closest to the ground which currently has available parking spots. Allowed values: Stories are numbered between -n and n, being 0 ground floor.'    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    fourWheelerSlots:    \n      description: 'Four wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    highestFloor:    \n      description: 'For parking sites with multiple floor levels, highest floor. An integer number. 0 is ground level. Upper floors are positive numbers. Lower floors are negative ones.'    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    id:    \n      anyOf: &offstreetparking_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    images:    \n      description: 'A URL containing a photo of this parking site'    \n      items:    \n        format: uri    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/image    \n        type: Property    \n    layout:    \n      description: 'Parking layout. Gives more details to the `category` attribute. Allowed values: As per the _ParkingLayoutEnum_ of DATEX II version 2.3. Enum:''automatedParkingGarage, carports, covered, field, garageBoxes, multiLevel, multiStorey, nested, openSpace, rooftop, sheds, singleLevel, surface, other''. See also [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Tag:amenity%3Dparking). Or any other value useful for the application and not covered above.'    \n      items:    \n        enum:    \n          - automatedParkingGarage    \n          - carports    \n          - covered    \n          - field    \n          - garageBoxes    \n          - multiLevel    \n          - multiStorey    \n          - nested    \n          - openSpace    \n          - rooftop    \n          - sheds    \n          - singleLevel    \n          - surface    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    lowestFloor:    \n      description: 'For parking sites with multiple floor levels, lowest floor. Allowed values: An integer number.'    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    maximumAllowedHeight:    \n      description: 'Maximum allowed height for vehicles. If there are multiple zones, it will be the minimum height of all the zones.'    \n      exclusiveMinimum: true    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/heigth    \n        type: Property    \n        units: meters    \n    maximumAllowedWidth:    \n      description: 'Maximum allowed width for vehicles. If there are multiple zones, it will be the minimum width of all the zones.'    \n      exclusiveMinimum: true    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/width    \n        type: Property    \n        units: Meters    \n    maximumParkingDuration:    \n      description: 'Maximum allowed stay at site, on a general basis, encoded as a ISO8601 duration or with any other string relevant for parking.  An empty value or when non present indicates an indefinite duration'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    measuresPeriod:    \n      description: 'The measures period related to availableSpotNumber and priceRatePerMinute.'    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    measuresPeriodUnit:    \n      description: 'The measures period unit related to availableSpotNumber and PriceRatePerMinute.'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/unitText    \n        type: Property    \n    municipalityInfo:    \n      description: 'Municipality information corresponding to this observation.'    \n      properties:    \n        cityId:    \n          description: 'Property. Model:''https://schema.org/Text''. City ID corresponding to this observation.'    \n          type: string    \n        cityName:    \n          description: 'Property. Model:''https://schema.org/Text''. City name corresponding to this observation'    \n          type: string    \n        district:    \n          description: 'Property. Model:''https://schema.org/Text''. District name corresponding to this observation.'    \n          type: string    \n        stateName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the state corresponding to this observation.'    \n          type: string    \n        ulbName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the Urban Local Body corresponding to this observation.'    \n          type: string    \n        wardId:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward ID corresponding to this observation.'    \n          type: string    \n        wardName:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward name corresponding to this observation.'    \n          type: string    \n        wardNum:    \n          description: 'Property. Model:''https://schema.org/Number''. Ward number corresponding to this observation.'    \n          type: number    \n        zoneId:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone ID corresponding to this observation.'    \n          type: string    \n        zoneName:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone name corresponding to this observation.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    occupancy:    \n      description: 'Relative value of occupied spots out of the total spots.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    occupancyDetectionType:    \n      description: 'Occupancy detection method(s).  Allowed values: The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_. Enum:''balancing, manual, modelBased, none, singleSpaceDetection''. Or any other application-specific'    \n      items:    \n        enum:    \n          - balancing    \n          - manual    \n          - modelBased    \n          - none    \n          - singleSpaceDetection    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    occupancyModified:    \n      description: 'Relative value of occupied spots out of the total spots. Allowed values: 0 - 1'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    occupiedSpotNumber:    \n      description: 'Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    openingHours:    \n      description: 'Opening hours of the parking site.'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/openingHours    \n        type: Property    \n    outOfServiceSlotNumber:    \n      description: 'The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *offstreetparking_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    parkingMode:    \n      description: 'Parking mode(s). Allowed values: Those defined by the DATEX II version 2.3 _ParkingModeEnum_ enumeration. Enum:''echelonParking, parallelParking, perpendicularParking'''    \n      items:    \n        enum:    \n          - echelonParking    \n          - parallelParking    \n          - perpendicularParking    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    parkingSiteId:    \n      description: 'The unique ID of the parking site or parking lot corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    priceCurrency:    \n      description: 'Price currency of price rate per minute'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/priceCurrency    \n        type: Property    \n    priceRatePerMinute:    \n      description: 'Price rate per minute.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n    provider:    \n      description: 'Parking site service provider'    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/provider    \n        type: Property    \n    refParkingAccess:    \n      anyOf:    \n        - maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - format: uri    \n          type: string    \n      description: 'Parking site''s access point(s).'    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    refParkingGroup:    \n      anyOf:    \n        - maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - format: uri    \n          type: string    \n      description: 'Parking site identified group(s). A group can correspond to a zone, a complete storey, a group of spots, etc.'    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    refParkingSpot:    \n      anyOf:    \n        - maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - format: uri    \n          type: string    \n      description: 'Individual parking spots belonging to this offStreet parking site.'    \n      x-ngsi:    \n        type: Relationship    \n    requiredPermit:    \n      description: 'This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a '',''. For instance ''residentPermit,disabledPermit'' stays that both, at the same time, a resident and a disabled permit are needed to park. If the list is empty no permit is needed. Allowed values: The following, defined by the _PermitTypeEnum_ enumeration of DATEX II version 2.3. Enum:''employeePermit, fairPermit, governmentPermit, noPermitNeeded, residentPermit, specificIdentifiedVehiclePermit, studentPermit, visitorPermit''. Or any other application-specific'    \n      items:    \n        enum:    \n          - employeePermit    \n          - fairPermit    \n          - governmentPermit    \n          - noPermitNeeded    \n          - residentPermit    \n          - specificIdentifiedVehiclePermit    \n          - studentPermit    \n          - visitorPermit    \n        type: string    \n      minItems: 0    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    reservationType:    \n      description: 'he following specified by _ReservationTypeEnum_ of DATEX II version 2.3. Enum:''mandatory, notAvailable, optional, partly'''    \n      items:    \n        enum:    \n          - mandatory    \n          - notAvailable    \n          - optional    \n          - partly    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    security:    \n      description: 'Security aspects provided by this parking site. Allowed values: The following, some of them, defined by _ParkingSecurityEnum_ of DATEX II version 2.3. Enum:''areaSeparatedFromSurroundings, cctv, dog, externalSecurity, fences, floodLight, guard24hours, lighting, patrolled, securityStaff'' . or any other application-specific'    \n      items:    \n        enum:    \n          - areaSeparatedFromSurroundings    \n          - cctv    \n          - dog    \n          - externalSecurity    \n          - fences    \n          - floodLight    \n          - guard24hours    \n          - lighting    \n          - patrolled    \n          - securityStaff    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    specialLocation:    \n      description: 'If the parking site is at a special location (airport, department store, etc.) it conveys what is such special location.  Allowed values: Those defined by _ParkingSpecialLocationEnum_ of [DATEX II version 2.3](http://www.datex2.eu/content/parking-publications-extension-v10a). Enum:''airportTerminal, cableCarStation, campground, cinema, coachStation, conventionCentre, exhibitionCentre, ferryTerminal, hotel, market, publicTransportStation, religiousCentre, shoppingCentre, skilift, specificFacility, themePark, trainStation, vehicleOnRailTerminal, other'''    \n      items:    \n        enum:    \n          - airportTerminal    \n          - cableCarStation    \n          - campground    \n          - cinema    \n          - coachStation    \n          - conventionCentre    \n          - exhibitionCentre    \n          - ferryTerminal    \n          - hotel    \n          - market    \n          - publicTransportStation    \n          - religiousCentre    \n          - shoppingCentre    \n          - skilift    \n          - specificFacility    \n          - themePark    \n          - trainStation    \n          - vehicleOnRailTerminal    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    status:    \n      description: 'Status of the parking site. Allowed values: The following defined by the following enumerations defined by DATEX II version 2.3. Enum:''almostFull, closed, closedAbnormal, full, fullAtEntrance, open, openingTimesInForce, spacesAvailable''. Or any other application-specific'    \n      items:    \n        enum:    \n          - almostFull    \n          - closed    \n          - closedAbnormal    \n          - full    \n          - fullAtEntrance    \n          - open    \n          - openingTimesInForce    \n          - spacesAvailable    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    totalSpotNumber:    \n      description: 'The total number of spots offered by this parking site.  This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Allowed values: Any positive integer number or 0. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.'    \n      minimum: 1    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    twoWheelerSlots:    \n      description: 'Two wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'It has to be OffStreetParking'    \n      enum:    \n        - OffStreetParking    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    unclassifiedSlots:    \n      description: 'Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    usageScenario:    \n      description: 'Usage scenario(s). Gives more details to the `category` attribute. Allowed values: Those defined by the enumeration _ParkingUsageScenarioEnum_ of DATEX II version 2.3. Enum:''automaticParkingGuidance, carSharing, dropOffWithValet, dropOffMechanical, dropOff, eventParking, kissAndRide, liftShare, loadingBay, overnightParking, parkAndCycle, parkAndRide, parkAndWalk, restArea, serviceArea, staffGuidesToSpace, truckParking, vehicleLift, other''. Or any other value useful for the application and not covered above.'    \n      items:    \n        enum:    \n          - automaticParkingGuidance    \n          - carSharing    \n          - dropOffWithValet    \n          - dropOffMechanical    \n          - dropOff    \n          - eventParking    \n          - kissAndRide    \n          - liftShare    \n          - loadingBay    \n          - overnightParking    \n          - parkAndCycle    \n          - parkAndRide    \n          - parkAndWalk    \n          - restArea    \n          - serviceArea    \n          - staffGuidesToSpace    \n          - truckParking    \n          - vehicleLift    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    vehicleEntranceCount:    \n      description: 'Aggregated number of vehicle that enter the parking site in a period of time.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    vehicleExitCount:    \n      description: 'Aggregated number of vehicle that leave the parking site in a period of time.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Parking/blob/master/OffStreetParking/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Parking/OffStreetParking/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.1.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### OffStreetParking NGSI-v2 key-values Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"porto-ParkingLot-23889\",  \n  \"type\": \"OffStreetParking\",  \n  \"name\": \"Parque de estacionamento Trindade\",  \n  \"category\": [  \n    \"underground\",  \n    \"public\",  \n    \"feeCharged\",  \n    \"mediumTerm\",  \n    \"barrierAccess\"  \n  ],  \n  \"extCategory\": [  \n    \"A\"  \n  ],  \n  \"chargeType\": [  \n    \"temporaryPrice\"  \n  ],  \n  \"requiredPermit\": [],  \n  \"layout\": [  \n    \"multiLevel\"  \n  ],  \n  \"maximumParkingDuration\": \"PT8H\",  \n  \"location\": {  \n    \"coordinates\": [  \n      -8.60961198807,  \n      41.150691773  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"allowedVehicleType\": [  \n    \"car\"  \n  ],  \n  \"totalSpotNumber\": 414,  \n  \"availableSpotNumber\": 132,  \n  \"occupiedSpotNumber\": 282,  \n  \"occupancyModified\": \"2018-09-21T12:00:00Z\",  \n  \"occupancy\": 0.68,  \n  \"address\": {  \n    \"streetAddress\": \"Rua de Fernandes Tom\u00e1s\",  \n    \"addressLocality\": \"Porto\",  \n    \"addressCountry\": \"Portugal\"  \n  },  \n  \"description\": \"Municipal car park located near the Trindade metro station and the Town Hall\",  \n  \"dateModified\": \"2018-09-21T12:00:05Z\",  \n  \"vehicleEntranceCount\": 28,  \n  \"vehicleExitCount\": 12,  \n  \"accessModified\": \"2018-09-21T12:00:00Z\",  \n  \"outOfServiceSlotNumber\": 0,  \n  \"parkingSiteId\": \"P2\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"fourWheelerSlots\": {  \n    \"availableSpotNumber\": 25,  \n    \"totalSpotNumber\": 25,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"unclassifiedSlots\": {  \n    \"availableSpotNumber\": 0,  \n    \"totalSpotNumber\": 0,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"twoWheelerSlots\": {  \n    \"availableSpotNumber\": 20,  \n    \"totalSpotNumber\": 20,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  }  \n}  \n```  \n\r#### OffStreetParking NGSI-v2 normalized Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"porto-ParkingLot-23889\",  \n  \"type\": \"OffStreetParking\",  \n  \"category\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"underground\",  \n      \"public\",  \n      \"feeCharged\",  \n      \"mediumTerm\",  \n      \"barrierAccess\"  \n    ]  \n  },  \n  \"extCategory\": {  \n    \"type\": \"Text\",  \n    \"value\": \"A\"  \n  },  \n  \"layout\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"multiLevel\"  \n    ]  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Parque de estacionamento Trindade\"  \n  },  \n  \"requiredPermit\": {  \n    \"type\": \"array\",  \n    \"value\": []  \n  },  \n  \"allowedVehicleType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 132,  \n    \"metadata\": {  \n      \"timestamp\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2018-09-21T12:00:00Z\"  \n      }  \n    }  \n  },  \n  \"totalSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 414  \n  },  \n  \"occupiedSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 282  \n  },  \n  \"occupancyModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-09-21T12:00:00Z\"  \n  },  \n  \"occupancy\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.68  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -8.60961198807,  \n        41.150691773  \n      ]  \n    }  \n  },  \n  \"chargeType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"temporaryPrice\"  \n    ]  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressLocality\": \"Porto\",  \n      \"addressCountry\": \"Portugal\",  \n      \"streetAddress\": \"Rua de Fernandes Tom\\u00e1s\"  \n    }  \n  },  \n  \"maximumParkingDuration\": {  \n    \"type\": \"Text\",  \n    \"value\": \"PT8H\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-09-21T12:00:05Z\"  \n  },  \n  \"description\": {  \n    \"value\": \"Municipal car park located near the Trindade metro station and the Town Hall\"  \n  },  \n  \"vehicleEntranceCount\": {  \n    \"type\": \"Number\",  \n    \"value\": 28  \n  },  \n  \"vehicleExitCount\": {  \n    \"type\": \"Number\",  \n    \"value\": 12  \n  },  \n  \"accessModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-09-21T12:00:00Z\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"fourWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 25,  \n      \"totalSpotNumber\": 25,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"unclassifiedSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 0,  \n      \"totalSpotNumber\": 0,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"twoWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 20,  \n      \"totalSpotNumber\": 20,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityId\": \"23\",  \n      \"wardId\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneName\": \"South\",  \n      \"wardName\": \"Bangalore Urban\",  \n      \"zoneId\": \"2\",  \n      \"wardNum\": 4  \n    }  \n  }  \n}  \n```  \n\r#### OffStreetParking NGSI-LD key-values Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:OffStreetParking:porto-ParkingLot-23889\",  \n    \"type\": \"OffStreetParking\",  \n    \"accessModified\": \"2018-09-21T12:00:00Z\",  \n    \"address\": {  \n        \"addressCountry\": \"Portugal\",  \n        \"addressLocality\": \"Porto\",  \n        \"streetAddress\": \"Rua de Fernandes Tom\\u00e1s\",  \n        \"type\": \"PostalAddress\"  \n    },  \n    \"allowedVehicleType\": [  \n        \"car\"  \n    ],  \n    \"availableSpotNumber\": 132,  \n    \"category\": [  \n        \"underground\",  \n        \"public\",  \n        \"feeCharged\",  \n        \"mediumTerm\",  \n        \"barrierAccess\"  \n    ],  \n    \"chargeType\": [  \n        \"temporaryPrice\"  \n    ],  \n    \"description\": \"Municipal car park located near the Trindade metro station and the Town Hall\",  \n    \"fourWheelerSlots\": {  \n        \"availableSpotNumber\": 25,  \n        \"totalSpotNumber\": 25,  \n        \"occupiedSpotNumber\": 0  \n    },  \n    \"layout\": [  \n        \"multiLevel\"  \n    ],  \n    \"location\": {  \n        \"coordinates\": [  \n            -8.60961198807,  \n            41.150691773  \n        ],  \n        \"type\": \"Point\"  \n    },  \n    \"maximumParkingDuration\": \"PT8H\",  \n    \"modifiedAt\": \"2018-09-21T12:00:05Z\",  \n    \"municipalityInfo\": {  \n        \"district\": \"Bangalore Urban\",  \n        \"ulbName\": \"BMC\",  \n        \"cityId\": \"23\",  \n        \"wardId\": \"23\",  \n        \"stateName\": \"Karnataka\",  \n        \"cityName\": \"Bangalore\",  \n        \"zoneName\": \"South\",  \n        \"wardName\": \"Bangalore Urban\",  \n        \"zoneId\": \"2\",  \n        \"wardNum\": 4  \n    },  \n    \"name\": \"Parque de estacionamento Trindade\",  \n    \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n    \"occupancy\": 0.68,  \n    \"occupancyModified\": \"2018-09-21T12:00:00Z\",  \n    \"occupiedSpotNumber\": 282,  \n    \"outOfServiceSlotNumber\": 0,  \n    \"parkingSiteId\": \"P2\",  \n    \"requiredPermit\": [],  \n    \"totalSpotNumber\": 414,  \n    \"twoWheelerSlots\": {  \n        \"availableSpotNumber\": 20,  \n        \"totalSpotNumber\": 20,  \n        \"occupiedSpotNumber\": 0  \n    },  \n    \"unclassifiedSlots\": {  \n        \"availableSpotNumber\": 0,  \n        \"totalSpotNumber\": 0,  \n        \"occupiedSpotNumber\": 0  \n    },  \n    \"vehicleEntranceCount\": 28,  \n    \"vehicleExitCount\": 12,  \n    \"@context\": [  \n        \"iudx:SmartParking\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Parking/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### OffStreetParking NGSI-LD normalized Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:OffStreetParking:porto-ParkingLot-23889\",  \n    \"type\": \"OffStreetParking\",  \n    \"accessModified\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2018-09-21T12:00:00Z\"  \n        }  \n    },  \n    \"address\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"addressLocality\": \"Porto\",  \n            \"addressCountry\": \"Portugal\",  \n            \"streetAddress\": \"Rua de Fernandes Tomas\",  \n            \"type\": \"PostalAddress\"  \n        }  \n    },  \n    \"allowedVehicleType\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"car\"  \n        ]  \n    },  \n    \"availableSpotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 132,  \n        \"observedAt\": \"2018-09-21T12:00:00Z\"  \n    },  \n    \"category\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"underground\",  \n            \"public\",  \n            \"feeCharged\",  \n            \"mediumTerm\",  \n            \"barrierAccess\"  \n        ]  \n    },  \n    \"chargeType\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"temporaryPrice\"  \n        ]  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Municipal car park located near the Trindade metro station and the Town Hall\"  \n    },  \n    \"extCategory\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"A\"  \n        ]  \n    },  \n    \"fourWheelerSlots\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"availableSpotNumber\": 25,  \n            \"totalSpotNumber\": 25,  \n            \"occupiedSpotNumber\": 0  \n        }  \n    },  \n    \"layout\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"multiLevel\"  \n        ]  \n    },  \n    \"location\": {  \n        \"type\": \"Geoproperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates\": [  \n                -8.60961198807,  \n                41.150691773  \n            ]  \n        }  \n    },  \n    \"maximumParkingDuration\": {  \n        \"type\": \"Property\",  \n        \"value\": \"PT8H\"  \n    },  \n    \"modifiedAt\": \"2018-09-21T12:00:05Z\",  \n    \"municipalityInfo\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"district\": \"Bangalore Urban\",  \n            \"ulbName\": \"BMC\",  \n            \"cityId\": \"23\",  \n            \"wardId\": \"23\",  \n            \"stateName\": \"Karnataka\",  \n            \"cityName\": \"Bangalore\",  \n            \"zoneName\": \"South\",  \n            \"wardName\": \"Bangalore Urban\",  \n            \"zoneId\": \"2\",  \n            \"wardNum\": 4  \n        }  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Parque de estacionamento Trindade\"  \n    },  \n    \"observationDateTime\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2021-03-11T15:51:02+05:30\"  \n        }  \n    },  \n    \"occupancy\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.68  \n    },  \n    \"occupancyModified\": {  \n        \"type\": \"Property\",  \n        \"value\": \"2018-09-21T12:00:00Z\"  \n    },  \n    \"occupiedSpotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 282  \n    },  \n    \"parkingSiteID\": {  \n        \"type\": \"Property\",  \n        \"value\": \"P2\"  \n    },  \n    \"requiredPermit\": {  \n        \"type\": \"Property\",  \n        \"value\": []  \n    },  \n    \"totalSpotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 414  \n    },  \n    \"twoWheelerSlots\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"availableSpotNumber\": 20,  \n            \"totalSpotNumber\": 20,  \n            \"occupiedSpotNumber\": 0  \n        }  \n    },  \n    \"unclassifiedSlots\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"availableSpotNumber\": 0,  \n            \"totalSpotNumber\": 0,  \n            \"occupiedSpotNumber\": 0  \n        }  \n    },  \n    \"vehicleEntranceCount\": {  \n        \"type\": \"Property\",  \n        \"value\": 28  \n    },  \n    \"vehicleExitCount\": {  \n        \"type\": \"Property\",  \n        \"value\": 12  \n    },  \n    \"@context\": [  \n        \"iudx:SmartParking\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: OnStreetParking
        - MODEL_DESCRIPTION: A site, open space zone, on street, (metered or not) with direct access from a road, intended to park vehicles.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A parking facility Data Model., mail: null,
              organization: IUDX, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              OnStreetParking of the Subject dataModel.Parking.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: OnStreetParking  \n=======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Parking/blob/master/OnStreetParking/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A site, open space zone, on street, (metered or not) with direct access from a road, intended to park vehicles.**  \n\rversion: 0.1.3  \n\n\r## List of properties  \n\n\r- `acceptedPaymentMethod`: Type of charge(s) performed by the parking site. Enum:'ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'  \r- `address`: The mailing address  \r- `allowedVehicleType`: Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html).. Enum:'agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, van, vehicleWithCatalyticConverter, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'  \r- `alternateName`: An alternative name for this item  \r- `areBordersMarked`: Denotes whether parking spots are delimited (with blank lines or similar) or not  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `availableSpotNumber`: The number of spots available globally, including reserved spaces, such as those for disabled people, long term parkers and so on. This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines  \r- `averageSpotLength`: The average length of parking spots  \r- `averageSpotWidth`: The average width of parking spots  \r- `category`: Street parking category. Enum:'blueZone, feeCharged, forDisabled, forElectricalCharging, forLoadUnload, forResidents, free, greenZone, mediumTerm, onlyWithPermit, shortTerm, taxiStop'  \r- `chargeType`: Type of charge(s) performed by the parking site. Enum:'additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, seasonTicket, temporaryFee, temporaryPrice, unknown, other'  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `extraSpotNumber`: The number of extra spots available, i.e. free. Extra    spots are those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). This value must aggregate free spots from all groups devoted to special parking conditions. Allowed values: A positive integer number, including 0. `extraSpotNumber` plus `availableSpotNumber` must be lower than or equal to `totalSpotNumber  \r- `fourWheelerSlots`: Four wheeler parking spot availability status in parking site corresponding to this observation.  \r- `id`: Unique identifier of the entity  \r- `layout`: Generic classification of the layout of the parking  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maximumParkingDuration`: Maximum allowed stay at site encoded as a ISO8601 duration. An empty value indicates an indefinite duration.  \r- `municipalityInfo`: Municipality information corresponding to this observation.  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `occupancyDetectionType`: Occupancy detection method(s). Enum:'balancing, manual, modelBased, none, singleSpaceDetection'. The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_  \r- `occupancyModified`: Date last time the occupancy of the parking has being modified  \r- `occupiedSpotNumber`: Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber.  \r- `outOfServiceSlotNumber`: The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `parkingMode`: Parking mode(s). Enum:'echelonParking, parallelParking, perpendicularParking'  \r- `parkingSiteId`: The unique ID of the parking site or parking lot corresponding to this observation.  \r- `permitActiveHours`: This attribute allows to capture situations when a permit is only needed at specific hours or days of week. It is a structured value which must contain a subproperty per each required permit, indicating when the permit is active. If nothing specified for a permit it will mean that a permit is always required. An empty JSON Object means always active. The syntax must be conformant with schema.org  \r- `refParkingGroup`: Reference to the parking group(s) (if any) belonging to this onstreet parking zone.  \r- `refParkingSpot`: Individual parking spots belonging to this on street parking site.  \r- `requiredPermit`: This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a ','. For instance 'residentPermit,disabledPermit' stays that both, at the same time, a resident and a disabled permit are needed to park. If list is empty, no permit is needed.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `totalSpotNumber`: The total number of spots offered by this parking site. This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.  \r- `twoWheelerSlots`: Two wheeler parking spot availability status in parking site corresponding to this observation.  \r- `type`: Entity type. It must be equal to OnStreetParking  \r- `unclassifiedSlots`: Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.  \r- `usageScenario`: Type of charge(s) performed by the parking site. Enum:'carSharing, dropOff, kissAndRide, liftShare, loadingBay, overnightParking, parkAndRide, parkAndCycle, parkAndWalk, vehicleLift,'  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `type`  \r  \n\rIn DATEX 2 version 2.3 terminology it corresponds to a _UrbanParkingSite_ of type _onStreetParking_. A data dictionary for DATEX II terms can be found at [http://datexbrowser.tamtamresearch.com/](http://datexbrowser.tamtamresearch.com/).  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOnStreetParking:    \n  description: 'A site, open space zone, on street, (metered or not) with direct access from a road, intended to park vehicles.'    \n  properties:    \n    acceptedPaymentMethod:    \n      description: 'Type of charge(s) performed by the parking site. Enum:''ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'''    \n      enum:    \n        - ByBankTransferInAdvance    \n        - ByInvoice    \n        - Cash    \n        - CheckInAdvance    \n        - COD    \n        - DirectDebit    \n        - GoogleCheckout    \n        - PayPal    \n        - PaySwarm    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    allowedVehicleType:    \n      description: 'Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html).. Enum:''agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, van, vehicleWithCatalyticConverter, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'''    \n      items:    \n        enum:    \n          - agriculturalVehicle    \n          - anyVehicle    \n          - articulatedVehicle    \n          - bicycle    \n          - bus    \n          - car    \n          - caravan    \n          - carOrLightVehicle    \n          - carWithCaravan    \n          - carWithTrailer    \n          - constructionOrMaintenanceVehicle    \n          - fourWheelDrive    \n          - highSidedVehicle    \n          - lorry    \n          - moped    \n          - motorcycle    \n          - motorcycleWithSideCar    \n          - motorscooter    \n          - tanker    \n          - threeWheeledVehicle    \n          - trailer    \n          - tram    \n          - twoWheeledVehicle    \n          - van    \n          - vehicleWithCatalyticConverter    \n          - vehicleWithoutCatalyticConverter    \n          - vehicleWithCaravan    \n          - vehicleWithTrailer    \n          - withEvenNumberedRegistrationPlates    \n          - withOddNumberedRegistrationPlates    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areBordersMarked:    \n      description: 'Denotes whether parking spots are delimited (with blank lines or similar) or not'    \n      type: boolean    \n      x-ngsi:    \n        model: https://schema.org/Boolean    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    availableSpotNumber:    \n      description: 'The number of spots available globally, including reserved spaces, such as those for disabled people, long term parkers and so on. This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    averageSpotLength:    \n      description: 'The average length of parking spots'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/length    \n        type: Property    \n    averageSpotWidth:    \n      description: 'The average width of parking spots'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/width    \n        type: Property    \n    category:    \n      description: 'Street parking category. Enum:''blueZone, feeCharged, forDisabled, forElectricalCharging, forLoadUnload, forResidents, free, greenZone, mediumTerm, onlyWithPermit, shortTerm, taxiStop'''    \n      items:    \n        enum:    \n          - barrierAccess    \n          - blueZone    \n          - feeCharged    \n          - forDisabled    \n          - forElectricalCharging    \n          - forLoadUnload    \n          - forResidents    \n          - free    \n          - greenZone    \n          - mediumTerm    \n          - onlyWithPermit    \n          - public    \n          - shortTerm    \n          - taxiStop    \n          - underground    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    chargeType:    \n      description: 'Type of charge(s) performed by the parking site. Enum:''additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, seasonTicket, temporaryFee, temporaryPrice, unknown, other'''    \n      items:    \n        enum:    \n          - additionalIntervalPrice    \n          - annualPayment    \n          - firstIntervalPrice    \n          - flat    \n          - free    \n          - minimum    \n          - maximum    \n          - monthlyPayment    \n          - seasonTicket    \n          - temporaryFee    \n          - temporaryPrice    \n          - unknown    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    extraSpotNumber:    \n      description: 'The number of extra spots available, i.e. free. Extra    spots are those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). This value must aggregate free spots from all groups devoted to special parking conditions. Allowed values: A positive integer number, including 0. `extraSpotNumber` plus `availableSpotNumber` must be lower than or equal to `totalSpotNumber'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    fourWheelerSlots:    \n      description: 'Four wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    id:    \n      anyOf: &onstreetparking_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    layout:    \n      description: 'Generic classification of the layout of the parking'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maximumParkingDuration:    \n      description: 'Maximum allowed stay at site encoded as a ISO8601 duration. An empty value indicates an indefinite duration.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    municipalityInfo:    \n      description: 'Municipality information corresponding to this observation.'    \n      properties:    \n        cityId:    \n          description: 'Property. Model:''https://schema.org/Text''. City ID corresponding to this observation.'    \n          type: string    \n        cityName:    \n          description: 'Property. Model:''https://schema.org/Text''. City name corresponding to this observation'    \n          type: string    \n        district:    \n          description: 'Property. Model:''https://schema.org/Text''. District name corresponding to this observation.'    \n          type: string    \n        stateName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the state corresponding to this observation.'    \n          type: string    \n        ulbName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the Urban Local Body corresponding to this observation.'    \n          type: string    \n        wardId:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward ID corresponding to this observation.'    \n          type: string    \n        wardName:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward name corresponding to this observation.'    \n          type: string    \n        wardNum:    \n          description: 'Property. Model:''https://schema.org/Number''. Ward number corresponding to this observation.'    \n          type: number    \n        zoneId:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone ID corresponding to this observation.'    \n          type: string    \n        zoneName:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone name corresponding to this observation.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    occupancyDetectionType:    \n      description: 'Occupancy detection method(s). Enum:''balancing, manual, modelBased, none, singleSpaceDetection''. The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_'    \n      items:    \n        enum:    \n          - balancing    \n          - manual    \n          - modelBased    \n          - none    \n          - singleSpaceDetection    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    occupancyModified:    \n      description: 'Date last time the occupancy of the parking has being modified'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    occupiedSpotNumber:    \n      description: 'Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    outOfServiceSlotNumber:    \n      description: 'The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *onstreetparking_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    parkingMode:    \n      description: 'Parking mode(s). Enum:''echelonParking, parallelParking, perpendicularParking'''    \n      enum:    \n        - echelonParking    \n        - parallelParking    \n        - perpendicularParking    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    parkingSiteId:    \n      description: 'The unique ID of the parking site or parking lot corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    permitActiveHours:    \n      description: 'This attribute allows to capture situations when a permit is only needed at specific hours or days of week. It is a structured value which must contain a subproperty per each required permit, indicating when the permit is active. If nothing specified for a permit it will mean that a permit is always required. An empty JSON Object means always active. The syntax must be conformant with schema.org'    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    refParkingGroup:    \n      description: 'Reference to the parking group(s) (if any) belonging to this onstreet parking zone.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Relationship    \n    refParkingSpot:    \n      description: 'Individual parking spots belonging to this on street parking site.'    \n      items:    \n        format: uri    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Relationship    \n    requiredPermit:    \n      description: 'This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a '',''. For instance ''residentPermit,disabledPermit'' stays that both, at the same time, a resident and a disabled permit are needed to park. If list is empty, no permit is needed.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    totalSpotNumber:    \n      description: 'The total number of spots offered by this parking site. This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    twoWheelerSlots:    \n      description: 'Two wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'Entity type. It must be equal to OnStreetParking'    \n      enum:    \n        - OnStreetParking    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    unclassifiedSlots:    \n      description: 'Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    usageScenario:    \n      description: 'Type of charge(s) performed by the parking site. Enum:''carSharing, dropOff, kissAndRide, liftShare, loadingBay, overnightParking, parkAndRide, parkAndCycle, parkAndWalk, vehicleLift,'''    \n      enum:    \n        - carSharing    \n        - dropOff    \n        - kissAndRide    \n        - liftShare    \n        - loadingBay    \n        - overnightParking    \n        - parkAndRide    \n        - parkAndCycle    \n        - parkAndWalk    \n        - vehicleLift    \n        - other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Parking/blob/master/OnStreetParking/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Parking/OnStreetParking/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.1.3    \n```  \n</details>    \n\r## Example payloads    \n\r#### OnStreetParking NGSI-v2 key-values Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"category\": [  \n    \"blueZone\",  \n    \"shortTerm\",  \n    \"forDisabled\"  \n  ],  \n  \"allowedVehicleType\": [  \n    \"car\"  \n  ],  \n  \"chargeType\": [  \n    \"temporaryFee\"  \n  ],  \n  \"requiredPermit\": [  \n    \"blueZonePermit\",  \n    \"disabledPermit\"  \n  ],  \n  \"permitActiveHours\": {  \n    \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n  },  \n  \"maximumParkingDuration\": \"PT2H\",  \n  \"availableSpotNumber\": 3,  \n  \"occupiedSpotNumber\": 3,  \n  \"totalSpotNumber\": 6,  \n  \"extraSpotNumber\": 2,  \n  \"dateModified\": \"2016-06-02T09:25:55.00Z\",  \n  \"location\": {  \n    \"type\": \"Polygon\",  \n    \"coordinates\": [  \n      [  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ],  \n        [  \n          -3.803161973253841,  \n          43.46301091092682  \n        ],  \n        [  \n          -3.803147082548618,  \n          43.462879859445884  \n        ],  \n        [  \n          -3.803536474744068,  \n          43.462838666196674  \n        ],  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ]  \n      ]  \n    ]  \n  },  \n  \"areaServed\": \"Zona Centro\",  \n  \"refParkingGroup\": [  \n    \"daoiz-velarde-1-5-main\",  \n    \"daoiz-velarde-1-5-disabled\"  \n  ],  \n  \"outOfServiceSlotNumber\": 0,  \n  \"parkingSiteId\": \"P2\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"fourWheelerSlots\": {  \n    \"availableSpotNumber\": 25,  \n    \"totalSpotNumber\": 25,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"unclassifiedSlots\": {  \n    \"availableSpotNumber\": 0,  \n    \"totalSpotNumber\": 0,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"twoWheelerSlots\": {  \n    \"availableSpotNumber\": 20,  \n    \"totalSpotNumber\": 20,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  }  \n}  \n```  \n\r#### OnStreetParking NGSI-v2 normalized Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"category\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"blueZone\",  \n      \"shortTerm\",  \n      \"forDisabled\"  \n    ]  \n  },  \n  \"permitActiveHours\": {  \n    \"type\": \"array\",  \n    \"value\": {  \n      \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n    }  \n  },  \n  \"requiredPermit\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"blueZonePermit\",  \n      \"disabledPermit\"  \n    ]  \n  },  \n  \"allowedVehicleType\": {  \n    \"type\": \"Text\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"chargeType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"temporaryFee\"  \n    ]  \n  },  \n  \"refParkingGroup\": {  \n    \"type\": \"Relationship\",  \n    \"value\": [  \n      \"daoiz-velarde-1-5-main\",  \n      \"daoiz-velarde-1-5-disabled\"  \n    ]  \n  },  \n  \"totalSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 6  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Polygon\",  \n      \"coordinates\": [  \n        [  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ],  \n          [  \n            -3.803161973253841,  \n            43.46301091092682  \n          ],  \n          [  \n            -3.803147082548618,  \n            43.462879859445884  \n          ],  \n          [  \n            -3.803536474744068,  \n            43.462838666196674  \n          ],  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ]  \n        ]  \n      ]  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Zona Centro\"  \n  },  \n  \"maximumAllowedStay\": {  \n    \"type\": \"Text\",  \n    \"value\": \"PT2H\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2016-06-02T09:25:55.00Z\"  \n  },  \n  \"extraSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 3,  \n    \"metadata\": {  \n      \"timestamp\": {  \n        \"value\": \"2018-09-12T12:00:00\",  \n        \"type\": \"DateTime\"  \n      }  \n    }  \n  },  \n  \"occupiedSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 3,  \n    \"metadata\": {  \n      \"timestamp\": {  \n        \"value\": \"2018-09-12T12:00:00\",  \n        \"type\": \"DateTime\"  \n      }  \n    }  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"fourWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 25,  \n      \"totalSpotNumber\": 25,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"unclassifiedSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 0,  \n      \"totalSpotNumber\": 0,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"twoWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 20,  \n      \"totalSpotNumber\": 20,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityId\": \"23\",  \n      \"wardId\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneName\": \"South\",  \n      \"wardName\": \"Bangalore Urban\",  \n      \"zoneId\": \"2\",  \n      \"wardNum\": 4  \n    }  \n  }  \n}  \n```  \n\r#### OnStreetParking NGSI-LD key-values Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OnStreetParking:santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"allowedVehicleType\": [  \n    \"car\"  \n  ],  \n  \"areaServed\": \"Zona Centro\",  \n  \"availableSpotNumber\": 3,  \n  \"category\": [  \n    \"blueZone\",  \n    \"shortTerm\",  \n    \"forDisabled\"  \n  ],  \n  \"chargeType\": [  \n    \"temporaryFee\"  \n  ],  \n  \"extraSpotNumber\": 2,  \n  \"fourWheelerSlots\": {  \n    \"availableSpotNumber\": 25,  \n    \"totalSpotNumber\": 25,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"location\": {  \n    \"coordinates\": [  \n      [  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ],  \n        [  \n          -3.803161973253841,  \n          43.46301091092682  \n        ],  \n        [  \n          -3.803147082548618,  \n          43.462879859445884  \n        ],  \n        [  \n          -3.803536474744068,  \n          43.462838666196674  \n        ],  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ]  \n      ]  \n    ],  \n    \"type\": \"Polygon\"  \n  },  \n  \"maximumAllowedStay\": \"PT2H\",  \n  \"modifiedAt\": \"2016-06-02T09:25:55.00Z\",  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  },  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"occupiedSpotNumber\": 3,  \n  \"parkingSiteId\": \"P2\",  \n  \"permitActiveHours\": {  \n    \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n  },  \n  \"refParkingGroup\": [  \n    \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-main\",  \n    \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-disabled\"  \n  ],  \n  \"requiredPermit\": [  \n    \"blueZonePermit\",  \n    \"disabledPermit\"  \n  ],  \n  \"totalSpotNumber\": 6,  \n  \"twoWheelerSlots\": {  \n    \"availableSpotNumber\": 20,  \n    \"totalSpotNumber\": 20,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"unclassifiedSlots\": {  \n    \"availableSpotNumber\": 0,  \n    \"totalSpotNumber\": 0,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"@context\": [  \n    \"iudx:SmartParking\",  \n    \"https://raw.githubusercontent.com/smart-data-models/dataModel.Parking/master/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OnStreetParking NGSI-LD normalized Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OnStreetParking:santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"allowedVehicleType\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Zona Centro\"  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 3,  \n    \"observedAt\": \"2018-09-12T12:00:00Z\"  \n  },  \n  \"category\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"blueZone\",  \n      \"shortTerm\",  \n      \"forDisabled\"  \n    ]  \n  },  \n  \"chargeType\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"temporaryFee\"  \n    ]  \n  },  \n  \"extraSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Polygon\",  \n      \"coordinates\": [  \n        [  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ],  \n          [  \n            -3.803161973253841,  \n            43.46301091092682  \n          ],  \n          [  \n            -3.803147082548618,  \n            43.462879859445884  \n          ],  \n          [  \n            -3.803536474744068,  \n            43.462838666196674  \n          ],  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ]  \n        ]  \n      ]  \n    }  \n  },  \n  \"maximumAllowedStay\": {  \n    \"type\": \"Property\",  \n    \"value\": \"PT2H\"  \n  },  \n  \"occupiedSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 3,  \n    \"observedAt\": \"2018-09-12T12:00:00Z\"  \n  },  \n  \"permitActiveHours\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n    }  \n  },  \n  \"refParkingGroup\": {  \n    \"type\": \"Relationship\",  \n    \"object\": [  \n      \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-main\",  \n      \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-disabled\"  \n    ]  \n  },  \n  \"requiredPermit\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"blueZonePermit\",  \n      \"disabledPermit\"  \n    ]  \n  },  \n  \"totalSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 6  \n  },  \n  \"@context\": [  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: ParksAndGardens
      MODELS:
    - SUBMODULE_SHORT_NAME: PointOfInterest
      MODELS:
        - MODEL_NAME: PointOfInterest
        - MODEL_DESCRIPTION: This entity contains a harmonised geographic description of a Point of Interest
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: Data Model for describing a point of
                interest in he city., mail: null, organization: null, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              PointOfInterest of the Subject dataModel.PointOfInterest.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: PointOfInterest  \n=======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.PointOfInterest/blob/master/PointOfInterest/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised geographic description of a Point of Interest**  \n\n\r## List of properties  \n\n\r- `additionalInfoURL`: URL from which additional information of the subject can be obtained  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `category`: Category of this point of interest. Allowed values: Those defined by the [Factual taxonomy](https://github.com/Factual/places/blob/master/categories/factual_taxonomy.json) together with the extended categories described by the specification. For instance the value `113` corresponds to beaches, and the value `311` corresponds to museums.  \r- `contactPoint`: The details to contact with the item.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `refSeeAlso`: List of references to one or more related entities.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be PointOfInterest  \r- `wardId`: Ward ID of the entity corresponding to this observation.  \r- `zoneId`: Zone ID of the entity corresponding to this observation.  \r- `zoneName`: Zone name of the entity corresponding to this observation.  \r  \n\rRequired properties  \n- `category`  \r- `id`  \r- `name`  \r- `type`  \r  \n\rThis entity is used in applications that use spatial data and is applicable to Automotive, Environment, Industry and Smart City vertical segments and related IoT applications. This data model has been created in cooperation with the GSMA and the members of the [IoT Big Data Project](http://www.gsma.com/iot/iot-big-data/). Created with contributions of IUDX project.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nPointOfInterest:    \n  description: 'This entity contains a harmonised geographic description of a Point of Interest'    \n  properties:    \n    additionalInfoURL:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'URL from which additional information of the subject can be obtained'    \n      x-ngsi:    \n        type: Relationship    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    category:    \n      description: 'Category of this point of interest. Allowed values: Those defined by the [Factual taxonomy](https://github.com/Factual/places/blob/master/categories/factual_taxonomy.json) together with the extended categories described by the specification. For instance the value `113` corresponds to beaches, and the value `311` corresponds to museums.'    \n      items:    \n        type: string    \n      minItems: 1    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    contactPoint:    \n      description: 'The details to contact with the item.'    \n      properties:    \n        contactType:    \n          description: 'Property. Contact type of this item.'    \n          type: string    \n        email:    \n          description: 'Property. Email address of owner.'    \n          format: idn-email    \n          type: string    \n        name:    \n          description: 'Property. The name of this item.'    \n          type: string    \n        telephone:    \n          description: 'Property. Telephone of this contact.'    \n          type: string    \n        url:    \n          description: 'Property. URL which provides a description or further information about this item.'    \n          format: uri    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/ContactPoint    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &pointofinterest_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *pointofinterest_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refSeeAlso:    \n      description: 'List of references to one or more related entities.'    \n      items:    \n        anyOf:    \n          - anyOf: *pointofinterest_-_properties_-_owner_-_items_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be PointOfInterest'    \n      enum:    \n        - PointOfInterest    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    wardId:    \n      description: 'Ward ID of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    zoneId:    \n      description: 'Zone ID of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    zoneName:    \n      description: 'Zone name of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - category    \n    - name    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.PointOfInterest/PointOfInterest/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.2.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### PointOfInterest NGSI-v2 key-values Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"name\": \"Playa de a Concha\",  \n  \"description\": \"La Playa de A Concha se presenta como una continuaci\u00f3n de la Playa de Compostela, una de las m\u00e1s frecuentadas de Vilagarc\u00eda.\",  \n  \"address\": {  \n    \"addressCountry\": \"ES\",  \n    \"addressLocality\": \"Vilagarc\u00eda de Arousa\"  \n  },  \n  \"category\": [  \n    \"113\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -8.768460000000001,  \n      42.60214472222222  \n    ]  \n  },  \n  \"source\": \"http://www.tourspain.es\",  \n  \"refSeeAlso\": [  \n    \"Beach-A-Concha-123456\"  \n  ],  \n  \"wardId\": \"\",  \n  \"zoneId\": \"\",  \n  \"additionalInfoURL\": \"urn:ngsi-ld:Point:34E4:A234\",  \n  \"zoneName\": \"\"  \n}  \n```  \n\r#### PointOfInterest NGSI-v2 normalized Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"category\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"113\"  \n    ]  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"La Playa de A Concha se presenta como una continuaciin de la Playa de Compostela, una de las mis frecuentadas de Vilagarcia.\"  \n  },  \n  \"refSeeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"Beach-A-Concha-123456\"  \n    ]  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"http://www.tourspain.es\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -8.768460000000001,  \n        42.60214472222222  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressCountry\": \"ES\",  \n      \"addressLocality\": \"Vilagarcia de Arousa\"  \n    }  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Playa de a Concha\"  \n  },  \n  \"wardId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"zoneId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"additionalInfoURL\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Point:34E4:A234\"  \n  },  \n  \"zoneName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  }  \n}  \n```  \n\r#### PointOfInterest NGSI-LD key-values Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:PointOfInterest:PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"category\": [  \n    \"113\"  \n  ],  \n  \"description\": \"La Playa de A Concha se presenta como una continuacion de la Playa de Compostela, una de las mas frecuentadas de Vilagarcia.\",  \n  \"refSeeAlso\": [  \n    \"urn:ngsi-ld:SeeAlso:Beach-A-Concha-123456\"  \n  ],  \n  \"source\": \"http://www.tourspain.es\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -8.768460000000001,  \n      42.60214472222222  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"ES\",  \n    \"addressLocality\": \"Vilagarcia de Arousa\"  \n  },  \n  \"name\": \"Playa de a Concha\",  \n  \"wardId\": \"\",  \n  \"zoneId\": \"\",  \n  \"additionalInfoURL\": \"urn:ngsi-ld:Point:34E4:A234\",  \n  \"zoneName\": \"\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### PointOfInterest NGSI-LD normalized Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:PointOfInterest:PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"ES\",  \n      \"addressLocality\": \"Vilagarcia de Arousa\"  \n    }  \n  },  \n  \"category\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"113\"  \n    ]  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"La Playa de A Concha se presenta como una continuacion de la Playa de Compostela, una de las mas frecuentadas de Vilagarcia.\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -8.768460000000001,  \n        42.60214472222222  \n      ]  \n    }  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Playa de a Concha\"  \n  },  \n  \"refSeeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:SeeAlso:Beach-A-Concha-123456\"  \n    ]  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"http://www.tourspain.es\"  \n  },  \n   \"wardId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"zoneId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"additionalInfoURL\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Point:34E4:A234\"  \n  },  \n  \"zoneName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: Ports
      MODELS:
        - MODEL_NAME: BoatAuthorized
        - MODEL_DESCRIPTION: The data model is intended to provide information on the boats authorized to operate within the port according to the ISO 8666 standard for Boat Category. This repository is created by type of category of boat (pleasure craft, trade, passengers, ...). For each type of category, a list of optional subtypes of category can be associated.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              BoatPlacesAvailable of the Subject Ports.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: BoatAuthorized  \n======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Ports/blob/master/BoatAuthorized/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The data model is intended to provide information on the boats authorized to operate within the port according to the ISO 8666 standard for Boat Category. This repository is created by type of category of boat (pleasure craft, trade, passengers, ...). For each type of category, a list of optional subtypes of category can be associated.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `boatSubType`: Sub Type for a boatType. A combination of the elements. Enum:'aircraftCarrier, amphibiousAssaultShip, anchorHandlingVessel, artisanVessel, bac, barge, bargeCarrier, bulkCarrier, buoyTenderBoat, butaneCarrier, cableLayer, canoe, caravel, cargoCarrier, carrack, catamaran, chemicalCarrier, clipper, coastalFerry, cog, containerCarrier, corvette, craneBarge, crudeCarrier, cruise, cruiser, destroyer, dhow, divingVessel, djong, dredger, drifter, drillRig, factoryShip, ferry, fireBoat, fisheriesResearchVessel, flagshipBoat, floatingProductionStorageUnit, floatingStorageUnit, fluyt, frigate, gabare, galleon, galley, gondola, harbourFerry, helicopterCarrier, highSpeedVessel, houseBoat, hovercraft, iceBreakerShip, jetSki, junk, koch, lifeBoat, lightShip, liner, lineVessel, LiquefiedGasCarrier, littoralCombatShip, livestockCarrier, lngCarrier, longLiner, lpgCarrier, mineSweeping, monoHull, mooringBoat, multipurposeVessel, oceanographicBoat, other, paddleSteamer, pilotBoat, pinisi, pipeLayer, productCarrier, productionPlatform, referCarrier, researchVessel, roroCarrier, sailboat, sailingShip, salvageOperation, seiner, speedBoat, submarineAttack, submarineBallisticMissile, submarineCruiseMissile, supplyShip, tanker, timberCarrier, trawler, trimaran, tugBoat, viking, yacht, zodiac'  \r- `boatType`: A unique value of the list. Enum:'cargo, fishing, historic, passenger, specialist, Tanker, war, yachting'  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: Last time data were gathered  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maxDraft`: Maximum draft allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter  \r- `maxLength`: Maximum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter  \r- `maxTonnage`: Maximum tonnage authorized to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **TNE** represents Tonne Metric  \r- `maxWidth`: Maximum width allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter  \r- `minLength`: Minimum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter  \r- `name`: The name of this item.  \r- `openingHoursSpecification`: A structured value providing information about the opening hours of a place or a certain service inside a place  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `refPointOfInterest`: Point of Interest that the element has relation to  \r- `refSeaPort`: Port that belongs to  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: It has to be BoatAuthorized. NGSI Entity type  \r  \n\rRequired properties  \n- `dateLastReported`  \r- `id`  \r- `location`  \r- `refSeaPort`  \r- `type`  \r  \n\rMethod to design your repository of Boat Authorized* Create a record for each `boatType` authorized to circulate in the harbor with all corresponding `BoatSubType`. - record 1 - `id` i.e.  \"BoatAuthorized:MNCA-NCE-BA-001-yatching\" - \"refSeapPortName` i.e. \"MyPort\" - `boatType` i.e. \"yatching\" - `boatSubType` i.e. [ \"zodiac\", \"monoHull\", \"catamaran\", \"yacht\", \"sailboat\", \"jetSki\" ] - record 2 - \"id\" i.e.  \"BoatAuthorized:MNCA-NCE-BA-001-passenger\" - `refSeapPortName` i.e.  \"MyPort\" - `boatType` i.e.  \"passenger\" - `boatSubType` i.e.  [ \"cruise\", \"ferrie\" ] - record 3 - \"id\" i.e.  \"BoatAuthorized:MNCA-NCE-BA-001-passenger\" - `refSeapPortName` i.e.  \"MyPort\" - `boatType` i.e.  \"passenger\" - `boatSubType` i.e.  [ \"factoryShip\", \"seiner\",\"artisanVessels\",\"trawler\" ]  \nRules about the date - section Information about the date and period of authorization* There are several scenarios possibles - **Case 1** Definition of a range starting on a specific date and ending without date binding. Allows to define a permanent authorization for example `dateObserved` i.e.  \"2020-01-01T00:00:01Z\" `dateObservedFrom` i.e. \"2020-01-01T00:00:01Z\" `dateObservedTo` \"\" - **Case 2** Definition of a range starting on a specific date and ending date. Allows to define a specific authorization for example for a boatshow or for a type of boat. `dateObserved` i.e.  \"2020-10-10T00:00:01Z:2020-10-14T23:59:59Z\" `dateObservedFrom` i.e. \"2020-10-10T00:00:01Z\" `dateObservedTo` i.e. \"2020-10-14T23:59:59Z\"  \nAdditional Information about this Data Model* It can be used with the following data Model. - **SeaPort** to provide information to the port about authorized Boat in the port.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBoatAuthorized:    \n  description: 'The data model is intended to provide information on the boats authorized to operate within the port according to the ISO 8666 standard for Boat Category. This repository is created by type of category of boat (pleasure craft, trade, passengers, ...). For each type of category, a list of optional subtypes of category can be associated.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    boatSubType:    \n      description: 'Sub Type for a boatType. A combination of the elements. Enum:''aircraftCarrier, amphibiousAssaultShip, anchorHandlingVessel, artisanVessel, bac, barge, bargeCarrier, bulkCarrier, buoyTenderBoat, butaneCarrier, cableLayer, canoe, caravel, cargoCarrier, carrack, catamaran, chemicalCarrier, clipper, coastalFerry, cog, containerCarrier, corvette, craneBarge, crudeCarrier, cruise, cruiser, destroyer, dhow, divingVessel, djong, dredger, drifter, drillRig, factoryShip, ferry, fireBoat, fisheriesResearchVessel, flagshipBoat, floatingProductionStorageUnit, floatingStorageUnit, fluyt, frigate, gabare, galleon, galley, gondola, harbourFerry, helicopterCarrier, highSpeedVessel, houseBoat, hovercraft, iceBreakerShip, jetSki, junk, koch, lifeBoat, lightShip, liner, lineVessel, LiquefiedGasCarrier, littoralCombatShip, livestockCarrier, lngCarrier, longLiner, lpgCarrier, mineSweeping, monoHull, mooringBoat, multipurposeVessel, oceanographicBoat, other, paddleSteamer, pilotBoat, pinisi, pipeLayer, productCarrier, productionPlatform, referCarrier, researchVessel, roroCarrier, sailboat, sailingShip, salvageOperation, seiner, speedBoat, submarineAttack, submarineBallisticMissile, submarineCruiseMissile, supplyShip, tanker, timberCarrier, trawler, trimaran, tugBoat, viking, yacht, zodiac'''    \n      items:    \n        enum:    \n          - aircraftCarrier    \n          - amphibiousAssaultShip    \n          - anchorHandlingVessel    \n          - artisanVessel    \n          - bac    \n          - barge    \n          - bargeCarrier    \n          - bulkCarrier    \n          - buoyTenderBoat    \n          - butaneCarrier    \n          - cableLayer    \n          - canoe    \n          - caravel    \n          - cargoCarrier    \n          - carrack    \n          - catamaran    \n          - chemicalCarrier    \n          - clipper    \n          - coastalFerry    \n          - cog    \n          - containerCarrier    \n          - corvette    \n          - craneBarge    \n          - crudeCarrier    \n          - cruise    \n          - cruiser    \n          - destroyer    \n          - dhow    \n          - divingVessel    \n          - djong    \n          - dredger    \n          - drifter    \n          - drillRig    \n          - factoryShip    \n          - ferry    \n          - fireBoat    \n          - fisheriesResearchVessel    \n          - flagshipBoat    \n          - floatingProductionStorageUnit    \n          - floatingStorageUnit    \n          - fluyt    \n          - frigate    \n          - gabare    \n          - galleon    \n          - galley    \n          - gondola    \n          - harbourFerry    \n          - helicopterCarrier    \n          - highSpeedVessel    \n          - houseBoat    \n          - hovercraft    \n          - iceBreakerShip    \n          - jetSki    \n          - junk    \n          - koch    \n          - lifeBoat    \n          - lightShip    \n          - liner    \n          - lineVessel    \n          - LiquefiedGasCarrier    \n          - littoralCombatShip    \n          - livestockCarrier    \n          - lngCarrier    \n          - longLiner    \n          - lpgCarrier    \n          - mineSweeping    \n          - monoHull    \n          - mooringBoat    \n          - multipurposeVessel    \n          - oceanographicBoat    \n          - other    \n          - paddleSteamer    \n          - pilotBoat    \n          - pinisi    \n          - pipeLayer    \n          - productCarrier    \n          - productionPlatform    \n          - referCarrier    \n          - researchVessel    \n          - roroCarrier    \n          - sailboat    \n          - sailingShip    \n          - salvageOperation    \n          - seiner    \n          - speedBoat    \n          - submarineAttack    \n          - submarineBallisticMissile    \n          - submarineCruiseMissile    \n          - supplyShip    \n          - tanker    \n          - timberCarrier    \n          - trawler    \n          - trimaran    \n          - tugBoat    \n          - viking    \n          - yacht    \n          - zodiac    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    boatType:    \n      description: 'A unique value of the list. Enum:''cargo, fishing, historic, passenger, specialist, Tanker, war, yachting'''    \n      items:    \n        enum:    \n          - cargo    \n          - fishing    \n          - historic    \n          - passenger    \n          - specialist    \n          - Tanker    \n          - war    \n          - yachting    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'Last time data were gathered'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &boatauthorized_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maxDraft:    \n      description: 'Maximum draft allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/depth    \n        type: Property    \n        units: meters    \n    maxLength:    \n      description: 'Maximum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/length    \n        type: Property    \n        units: meters    \n    maxTonnage:    \n      description: 'Maximum tonnage authorized to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **TNE** represents Tonne Metric'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: Tons    \n    maxWidth:    \n      description: 'Maximum width allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/width    \n        type: Property    \n        units: meters    \n    minLength:    \n      description: 'Minimum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/length    \n        type: Property    \n        units: meters    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    openingHoursSpecification:    \n      description: 'A structured value providing information about the opening hours of a place or a certain service inside a place'    \n      items:    \n        properties:    \n          closes:    \n            format: time    \n            pattern: ^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(\\.[0-9]*)?(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$    \n            type: string    \n          dayOfWeek:    \n            anyOf:    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - Monday    \n                  - Tuesday    \n                  - Wednesday    \n                  - Thursday    \n                  - Friday    \n                  - Saturday    \n                  - Sunday    \n                  - PublicHolidays    \n                type: string    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - https://schema.org/Monday    \n                  - https://schema.org/Tuesday    \n                  - https://schema.org/Wednesday    \n                  - https://schema.org/Thursday    \n                  - https://schema.org/Friday    \n                  - https://schema.org/Saturday    \n                  - https://schema.org/Sunday    \n                  - https://schema.org/PublicHolidays    \n                type: string    \n            description: 'Property. Model:''http://schema.org/dayOfWeek''. The day of the week for which these opening hours are valid. URLs from GoodRelations (http://purl.org/goodrelations/v1) are used (for Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday plus a special entry for PublicHolidays).'    \n            type: string    \n          opens:    \n            format: time    \n            pattern: ^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(\\.[0-9]*)?(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$    \n            type: string    \n          validFrom:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date when the item becomes valid. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n          validThrough:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n            type: string    \n        type: object    \n      minItems: 1    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/openingHoursSpecification    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *boatauthorized_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refPointOfInterest:    \n      description: 'Point of Interest that the element has relation to'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    refSeaPort:    \n      description: 'Port that belongs to'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'It has to be BoatAuthorized. NGSI Entity type'    \n      enum:    \n        - BoatAuthorized    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateLastReported    \n    - refSeaPort    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Ports/blob/master/BoatAuthorized/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Ports/BoatAuthorized/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### BoatAuthorized NGSI-v2 key-values Example    \n\rHere is an example of a BoatAuthorized in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatAuthorized:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n  \"type\": \"BoatAuthorized\",  \n  \"name\": \"Riviera-Port-NCE-BA-001-yatching\",  \n  \"alternateName\": \"Riviera Port - Autorized Boats in the port\",  \n  \"description\": \"List of Type and SubType of boats authorized to move and moor in the harbor\",  \n  \"seeAlso\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\",  \n  \"areaServed\": \"Nice Port\",  \n  \"dateObserved\": \"2020-01-01T00:00:01Z\",  \n  \"refSeaPort\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\",  \n  \"refBoatType\": \"yatching\",  \n  \"refBoatSubType\": [  \n    \"monoHull\",  \n    \"catamaran\",  \n    \"yacht\",  \n    \"sailboat\",  \n    \"jetSki\"  \n  ],  \n  \"openingHoursSpecification\": [  \n    {  \n      \"dayOfWeek\": \"Monday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Tuesday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Wednesday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Thursday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Friday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Saturday\",  \n      \"opens\": \"08:30:00\",  \n      \"closes\": \"21:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Sunday\",  \n      \"opens\": \"08:30:00\",  \n      \"closes\": \"20:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"PublicHolidays\",  \n      \"opens\": \"08:30:00\",  \n      \"closes\": \"19:30:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    }  \n  ],  \n  \"maxTonnage\": 3855,  \n  \"minLength\": 3,  \n  \"maxLength\": 35,  \n  \"maxWidth\": 15,  \n  \"maxDraft\": 6.00,  \n  \"dateLastReported\": \"2021-12-31T23:59:59\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      23,  \n      45  \n    ]  \n  }  \n}  \n```  \n\r#### BoatAuthorized NGSI-v2 normalized Example    \n\rHere is an example of a BoatAuthorized in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatAuthorized:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n  \"type\": \"BoatAuthorized\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Riviera-Port-NCE-BA-001-yatching\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Riviera Port - Autorized Boats in the port\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"List of Type and SubType of boats authorized to move and moor in the harbor\"  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Text\",  \n    \"value\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\"  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Nice Port\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-01-01T00:00:01Z\"  \n  },  \n  \"refSeaPort\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\"  \n  },  \n  \"refBoatType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"yatching\"  \n  },  \n  \"refBoatSubType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"monoHull\",  \n      \"catamaran\",  \n      \"yacht\",  \n      \"sailboat\",  \n      \"jetSki\"  \n    ]  \n  },  \n  \"openingHoursSpecification\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": [  \n      {  \n        \"dayOfWeek\": \"Monday, Tuesday, Wednesday, Thursday, Friday\",  \n        \"opens\": \"07.00\",  \n        \"closes\": \"20.00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Saturday\",  \n        \"opens\": \"08.30\",  \n        \"closes\": \"21.00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Sunday\",  \n        \"opens\": \"8.30\",  \n        \"closes\": \"20.00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"PublicHolidays\",  \n        \"opens\": \"8.30\",  \n        \"closes\": \"19.30\"  \n      }  \n    ],  \n    \"validFrom\": \"-01-01\",  \n    \"validThrough\": \"-31-12\"  \n  },  \n  \"maxTonnage\": {  \n    \"type\": \"Number\",  \n    \"value\": 3855  \n  },  \n  \"minLength\": {  \n    \"type\": \"Number\",  \n    \"value\": 3  \n  },  \n  \"maxLength\": {  \n    \"type\": \"Number\",  \n    \"value\": 35  \n  },  \n  \"maxWidth\": {  \n    \"type\": \"Number\",  \n    \"value\": 15  \n  },  \n  \"maxDraft\": {  \n    \"type\": \"Number\",  \n    \"value\": 6.00  \n  }  \n}  \n```  \n\r#### BoatAuthorized NGSI-LD key-values Example    \n\rHere is an example of a BoatAuthorized in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:BoatAuthorized:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n    \"type\": \"BoatAuthorized\",  \n    \"alternateName\": \"Riviera Port - Autorized Boats in the port\",  \n    \"areaServed\": \"Nice Port\",  \n    \"dateLastReported\": \"2021-12-31T23:59:59\",  \n    \"dateObserved\": \"2020-01-01T00:00:01Z\",  \n    \"description\": \"List of Type and SubType of boats authorized to move and moor in the harbor\",  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            23,  \n            45  \n        ]  \n    },  \n    \"maxDraft\": 6.0,  \n    \"maxLength\": 35,  \n    \"maxTonnage\": 3855,  \n    \"maxWidth\": 15,  \n    \"minLength\": 3,  \n    \"name\": \"Riviera-Port-NCE-BA-001-yatching\",  \n    \"openingHoursSpecification\": [  \n        {  \n            \"dayOfWeek\": \"Monday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Tuesday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Wednesday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Thursday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Friday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Saturday\",  \n            \"opens\": \"08:30:00\",  \n            \"closes\": \"21:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Sunday\",  \n            \"opens\": \"08:30:00\",  \n            \"closes\": \"20:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"PublicHolidays\",  \n            \"opens\": \"08:30:00\",  \n            \"closes\": \"19:30:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        }  \n    ],  \n    \"refBoatSubType\": [  \n        \"monoHull\",  \n        \"catamaran\",  \n        \"yacht\",  \n        \"sailboat\",  \n        \"jetSki\"  \n    ],  \n    \"refBoatType\": \"yatching\",  \n    \"refSeaPort\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\",  \n    \"seeAlso\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\",  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Ports/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### BoatAuthorized NGSI-LD normalized Example    \n\rHere is an example of a BoatAuthorized in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:BoatAuthorized:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n    \"type\": \"BoatAuthorized\",  \n    \"alternateName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Riviera Port - Autorized Boats in the port\"  \n    },  \n    \"areaServed\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice Port\"  \n    },  \n    \"dateObserved\": {  \n        \"type\": \"Property\",  \n        \"value\": \"2020-01-01T00:00:01Z\"  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"List of Type and SubType of boats authorized to move and moor in the harbor\"  \n    },  \n    \"maxDraft\": {  \n        \"type\": \"Property\",  \n        \"value\": 6.0  \n    },  \n    \"maxLength\": {  \n        \"type\": \"Property\",  \n        \"value\": 35  \n    },  \n    \"maxTonnage\": {  \n        \"type\": \"Property\",  \n        \"value\": 3855  \n    },  \n    \"maxWidth\": {  \n        \"type\": \"Property\",  \n        \"value\": 15  \n    },  \n    \"minLength\": {  \n        \"type\": \"Property\",  \n        \"value\": 3  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Riviera-Port-NCE-BA-001-yatching\"  \n    },  \n    \"openingHoursSpecification\": {  \n        \"type\": \"object\",  \n        \"value\": [  \n            {  \n                \"dayOfWeek\": \"Monday\",  \n                \"opens\": \"07:00:00\",  \n                \"closes\": \"20:00:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Tuesday\",  \n                \"opens\": \"07:00:00\",  \n                \"closes\": \"20:00:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Wednesday\",  \n                \"opens\": \"07:00:00\",  \n                \"closes\": \"20:00:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Thursday\",  \n                \"opens\": \"07:00:00\",  \n                \"closes\": \"20:00:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Friday\",  \n                \"opens\": \"07:00:00\",  \n                \"closes\": \"20:00:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Saturday\",  \n                \"opens\": \"08:30:00\",  \n                \"closes\": \"21:00:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Sunday\",  \n                \"opens\": \"08:30:00\",  \n                \"closes\": \"20:00:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            },  \n            {  \n                \"dayOfWeek\": \"PublicHolidays\",  \n                \"opens\": \"08:30:00\",  \n                \"closes\": \"19:30:00\",  \n                \"validFrom\": \"2021-01-01T00:00:00\",  \n                \"validThrough\": \"2021-12-31T23:59:59\"  \n            }  \n        ]  \n    },  \n    \"refBoatSubType\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"monoHull\",  \n            \"catamaran\",  \n            \"yacht\",  \n            \"sailboat\",  \n            \"jetSki\"  \n        ]  \n    },  \n    \"refBoatType\": {  \n        \"type\": \"Property\",  \n        \"value\": \"yatching\"  \n    },  \n    \"refSeaPort\": {  \n        \"type\": \"Relationship\",  \n        \"object\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\"  \n    },  \n    \"seeAlso\": {  \n        \"type\": \"Property\",  \n        \"value\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\"  \n    },  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: BoatPlacesAvailable
        - MODEL_DESCRIPTION: The purpose of the data model is to provide information on the availability of mooring rings for boats in the port by category. The information received relates only to pleasure boats and excludes commercial and passenger transport boats. The information on the Spot categories for boats is taken from the ISO 8666 standard.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              BoadPlacesAvailable of the Subject Ports.

        - MODEL_DOCUMENTATION: "Entity: BoatPlacesAvailable  \n===========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Ports/blob/master/BoatPlacesAvailable/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The purpose of the data model is to provide information on the availability of mooring rings for boats in the port by category. The information received relates only to pleasure boats and excludes commercial and passenger transport boats. The information on the Spot categories for boats is taken from the ISO 8666 standard.**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `availableSpotNumber`: Number of places available in the port for this category  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObserved`: The date and time of this observation in ISO8601 UTC format. It can be represented by a specific time instant or by an ISO8601 interval  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maxDraft`: Maximum draft allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter  \r- `maxLength`: Maximum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter  \r- `maxWidth`: Maximum width allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter  \r- `minLength`: Minimum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `refPointOfInterest`: Point of Interest that the element has relation to  \r- `refSeaPort`: Port that belongs to  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `spotCategoryRange`:  List from the lowest to the highest categories: A combination of the items listed. Enum:'A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T1, T2, U, V, W, X, Y, Z, Z01, Z02, Z03, Z04, Z05, Z06, Z07, Z08, Z08, Z09, Z10, Z11, Z12, Z13, Z14, Z15, Z16, Z17'  \r- `totalCapacitySpotNumber`: Total Capacity of Spot in the port for this range  \r- `type`: NGSI Entity type. It has to be BoatPlaceAvailable  \r  \n\rRequired properties  \n- `availableSpotNumber`  \r- `dateObserved`  \r- `id`  \r- `location`  \r- `refSeaPort`  \r- `spotCategoryRange`  \r- `type`  \r  \n\rMethod to design your repository of Boat Authorized To describe the different places available by category (A to Z17) in the section Information about place available, the use of a list is necessary when writing the record. Depending on the port configuration, a record will be created by `spotCategoryRange` to determine the number of space remaining at a given time. Two scenario are possible Scenario 1. Definition of the length range on a single category . `spotCategoryRange` = [\"F\"], Boats accepted. length 7.00 to 7.49 and max width =< 2.70. \"F\"  length 7.00 to 7.49 / max width =< 2.70 Scenario 2. Definition of the length range with consecutive categories. `spotCategoryRange`  = [\"F\", \"G\"], Boats accepted. length 7.00 to 7.99 and max width =< 2.80. \"F\" gives maxLength from 7.00 to 7.49 and maxWidth 2.70 \"G\" gives maxLength from 7.50 to 7.99 and maxWidth 2.80  \nAdditional Information about this Data Model It can be used with the following data Model. - SeaPort to provide information to the port about authorized Boat in the port.  \nThis Data Model is complementary to the Data Model BoatPlacesPricing.  \nData repository (ISO 8666 standard) Categorie Length Max   Width Max A        4.99     2.00 B        5.49     2.15 C        5.99     2.30 D        6.49     2.45 E        6.99     2.60 F        7.49     2.80 G        7.99     2.80 H        8.49     2.95 I        8.99     3.10 J        9.49     3.25 K        9.99     3.40 L       10.49     3.55 M       10.99     3.70 N       11.49     3.85 O       11.99     4.00 P       12.99     4.30 Q       13.99     4.60 R       15.99     4.90 S       17.99     5.20 T1      20.99     5.60 T2      23.99     6.00 U       28.99     7.00 V       33.99     8.00 W       38.99     9.00 X       43.99    10.00 Y       48.99    11.00 Z       53.99    12.00 Z01     58.99    13.00 Z02     64.99    14.00 Z03     71.99    15.00 Z04     78.99    16.00 Z05     85.99    17.00 Z06     92.99    18.00 Z07     99.99    19.00 Z08    106.99    20.00 Z09    113.99    21.00 Z10    120.99    22.00 Z11    127.99    23.00 Z12    134.99    24.00 Z13    142.99    25.00 Z14    150.99    26.00 Z15    158.99    27.00 Z16    166.99    28.00 Z17    174.99    29.00  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBoatPlacesAvailable:    \n  description: 'The purpose of the data model is to provide information on the availability of mooring rings for boats in the port by category. The information received relates only to pleasure boats and excludes commercial and passenger transport boats. The information on the Spot categories for boats is taken from the ISO 8666 standard.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    availableSpotNumber:    \n      description: 'Number of places available in the port for this category'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObserved:    \n      description: 'The date and time of this observation in ISO8601 UTC format. It can be represented by a specific time instant or by an ISO8601 interval'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &boatplacesavailable_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maxDraft:    \n      description: 'Maximum draft allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/depth    \n        type: Property    \n        units: meters    \n    maxLength:    \n      description: 'Maximum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/length    \n        type: Property    \n        units: meters    \n    maxWidth:    \n      description: 'Maximum width allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/width    \n        type: Property    \n        units: meters    \n    minLength:    \n      description: 'Minimum length allowed to access the harbor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/length    \n        type: Property    \n        units: meters    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *boatplacesavailable_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Point of Interest that the element has relation to'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    refSeaPort:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Port that belongs to'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    spotCategoryRange:    \n      description: ' List from the lowest to the highest categories: A combination of the items listed. Enum:''A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T1, T2, U, V, W, X, Y, Z, Z01, Z02, Z03, Z04, Z05, Z06, Z07, Z08, Z08, Z09, Z10, Z11, Z12, Z13, Z14, Z15, Z16, Z17'''    \n      items:    \n        enum:    \n          - A    \n          - B    \n          - C    \n          - D    \n          - E    \n          - F    \n          - G    \n          - H    \n          - I    \n          - J    \n          - K    \n          - L    \n          - M    \n          - N    \n          - O    \n          - P    \n          - Q    \n          - R    \n          - S    \n          - T1    \n          - T2    \n          - U    \n          - V    \n          - W    \n          - X    \n          - Y    \n          - Z    \n          - Z01    \n          - Z02    \n          - Z03    \n          - Z04    \n          - Z05    \n          - Z06    \n          - Z07    \n          - Z08    \n          - Z08    \n          - Z09    \n          - Z10    \n          - Z11    \n          - Z12    \n          - Z13    \n          - Z14    \n          - Z15    \n          - Z16    \n          - Z17    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    totalCapacitySpotNumber:    \n      description: 'Total Capacity of Spot in the port for this range'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be BoatPlaceAvailable'    \n      enum:    \n        - BoatPlaceAvailable    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateObserved    \n    - refSeaPort    \n    - spotCategoryRange    \n    - availableSpotNumber    \n  type: object    \n```  \n</details>    \n\r## Example payloads    \n\r#### BoatPlacesAvailable NGSI-v2 key-values Example    \n\rHere is an example of a BoatPlacesAvailable in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlaceAvailable:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n  \"type\": \"BoatPlaceAvailable\",  \n  \"name\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\",  \n  \"alternateName\": \"Riviera Port - Available places\",  \n  \"description\": \"Availability places\",  \n  \"seeAlso\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\",  \n  \"areaServed\": \"Riviera Port\",  \n  \"dateObserved\": \"2020-03-17T08:45:00Z\",  \n  \"refSeaPort\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\",  \n  \"spotCategoryRange\": [  \n    \"F\",  \n    \"G\"  \n  ],  \n  \"minLength\": 7,  \n  \"maxLength\": 7.99,  \n  \"maxWidth\": 2.80,  \n  \"maxDraft\": 2.55,  \n  \"totalCapacitySpotNumber\": 10,  \n  \"availableSpotNumber\": 3,  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      123,  \n      45  \n    ]  \n  }  \n}  \n```  \n\r#### BoatPlacesAvailable NGSI-v2 normalized Example    \n\rHere is an example of a BoatPlacesAvailable in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlaceAvailable:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n  \"type\": \"BoatPlaceAvailable\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port - Available places\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Availability places\"  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\"  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\",  \n    \"metadata\": {  \n      \"TimeInstant\": {  \n        \"type\": \"Text\",  \n        \"value\": \"2020-03-17T08:45:00Z\"  \n      }  \n    }  \n  },  \n  \"refSeaPort\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\"  \n  },  \n  \"spotCategoryRange\": {  \n    \"type\": \"property\",  \n    \"value\": [  \n      \"F\",  \n      \"G\"  \n    ]  \n  },  \n  \"minLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7  \n  },  \n  \"maxLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7.99  \n  },  \n  \"maxWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.80  \n  },  \n  \"maxDraft\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.55  \n  },  \n  \"totalCapacitySpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 3  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        123,  \n        45  \n      ]  \n    }  \n  }  \n}  \n```  \n\r#### BoatPlacesAvailable NGSI-LD key-values Example    \n\rHere is an example of a BoatPlacesAvailable in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlaceAvailable:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n  \"type\": \"BoatPlaceAvailable\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port - Available places\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Availability places\"  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\"  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\",  \n    \"metadata\": {  \n      \"TimeInstant\": {  \n        \"type\": \"Text\",  \n        \"value\": \"2020-03-17T08:45:00Z\"  \n      }  \n    }  \n  },  \n  \"refSeaPort\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\"  \n  },  \n  \"spotCategoryRange\": {  \n    \"type\": \"property\",  \n    \"value\": [  \n      \"F\",  \n      \"G\"  \n    ]  \n  },  \n  \"minLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7  \n  },  \n  \"maxLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7.99  \n  },  \n  \"maxWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.8  \n  },  \n  \"maxDraft\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.55  \n  },  \n  \"totalCapacitySpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 3  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        123,  \n        45  \n      ]  \n    }  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### BoatPlacesAvailable NGSI-LD normalized Example    \n\rHere is an example of a BoatPlacesAvailable in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlaceAvailable:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n  \"type\": \"BoatPlaceAvailable\",  \n  \"name\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\",  \n  \"alternateName\": \"Riviera Port - Available places\",  \n  \"description\": \"Availability places\",  \n  \"seeAlso\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\",  \n  \"areaServed\": \"Riviera Port\",  \n  \"dateObserved\": \"2020-03-17T08:45:00Z\",  \n  \"refSeaPort\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\",  \n  \"spotCategoryRange\": [  \n    \"F\",  \n    \"G\"  \n  ],  \n  \"minLength\": 7,  \n  \"maxLength\": 7.99,  \n  \"maxWidth\": 2.8,  \n  \"maxDraft\": 2.55,  \n  \"totalCapacitySpotNumber\": 10,  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      123,  \n      45  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: BoatPlacesPricing
        - MODEL_DESCRIPTION: The purpose of the data model is to provide information on the pricing of mooring rings by category (length / Width). The information received relates only to pleasure boats and excludes commercial and passenger transport boats. The information on the Spot categories for boats is taken from the ISO 8666 standard.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              BoadPlacesAvailable of the Subject Ports.

        - MODEL_DOCUMENTATION: "Entity: BoatPlacesPricing  \n=========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Ports/blob/master/BoatPlacesPricing/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The purpose of the data model is to provide information on the pricing of mooring rings by category (length / Width). The information received relates only to pleasure boats and excludes commercial and passenger transport boats. The information on the Spot categories for boats is taken from the ISO 8666 standard.**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: A timestamp which denotes the last time when the device successfully reported data. The date and time of this observation in ISO8601 UTCformat  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `fairing`: Ticket price of the place for fairing boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maxDraft`: Maximum draft allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)   \r- `maxLength`: Maximum length allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)   \r- `maxWidth`: Maximum width allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)   \r- `minLength`: Minimum length allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)   \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `passage`: Ticket price of the place for passing boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac  \r- `period`: Type of period defined the date From and Through: A free text or a unique value of the different combination allowed 'season / offSeason' - 'summer / winter' - 'low / medium / high'. enum:'high, low, medium, offSeason, season, summer, winter'  \r- `refPointOfInterest`: Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the Repository  \r- `refSeaPort`: Reference to the entity [Seaport](https://github.com/smart-data-models/dataModel.Port/blob/master/Seaport/doc/spec.md) to use as main link  \r- `resident`: Ticket price of the place for resident boats for this category / period. A structured value with 2 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `spotCategoryRange`: List from the lowest to the highest categories: A combination of them. Enum:'A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T1, T2, U, V, W, X, Y, Z, Z01, Z02, Z03, Z04, Z05, Z06, Z07, Z08, Z08, Z09, Z10, Z11, Z12, Z13, Z14, Z15, Z16, Z17'  \r- `type`: NGSI Entity type. It has to be BoatPlacePricing  \r- `validFrom`: Start date and time of the pricing rules.  \r- `validThrough`: End date and time of the pricing rules.  \r- `wintering`: Ticket price of the place for wintering boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac  \r  \n\rRequired properties  \n- `dateLastReported`  \r- `id`  \r- `location`  \r- `refSeaPort`  \r- `spotCategoryRange`  \r- `type`  \r- `validFrom`  \r- `validThrough`  \r  \n\rMethod to design your repository of Boat Pricing* To describe the different pricing by category (A to Z17) in the section *Information about pricing*, the use of a list is necessary when writing the record. Depending on the port configuration, a record will be created by 'spotCategoryRange' to determine the pricing for a period as repository. Two scenarios are possible - Scenario 1. Definition of the length range on a single category . 'spotCategoryRange' = [F], Boats accepted= length 7.00 to 7.49 and max width =< 2.70. [F]  length 7.00 to 7.49 / max width =< 2.70 - Scenario 2. Definition of the length range with consecutive categories. 'spotCategoryRange' = [F, G], Boats accepted= length 7.00 to 7.99 and max width =< 2.80.'F' gives maxLength from 7.00 to 7.49 and maxWidth 2.70,  'G' gives maxLength from 7.50 to 7.99 and maxWidth 2.80  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBoatPlacesPricing:    \n  description: 'The purpose of the data model is to provide information on the pricing of mooring rings by category (length / Width). The information received relates only to pleasure boats and excludes commercial and passenger transport boats. The information on the Spot categories for boats is taken from the ISO 8666 standard.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'A timestamp which denotes the last time when the device successfully reported data. The date and time of this observation in ISO8601 UTCformat'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    fairing:    \n      description: 'Ticket price of the place for fairing boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac'    \n      properties:    \n        day:    \n          type: number    \n        month:    \n          type: number    \n        week:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    id:    \n      anyOf: &boatplacespricing_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maxDraft:    \n      description: 'Maximum draft allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) '    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: metres    \n    maxLength:    \n      description: 'Maximum length allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) '    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/number    \n        type: Property    \n        units: metres    \n    maxWidth:    \n      description: 'Maximum width allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) '    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/width    \n        type: Property    \n        units: metres    \n    minLength:    \n      description: 'Minimum length allowed to access the spot. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) '    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/number    \n        type: Property    \n        units: metres    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *boatplacespricing_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    passage:    \n      description: 'Ticket price of the place for passing boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac'    \n      properties:    \n        day:    \n          type: number    \n        month:    \n          type: number    \n        week:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    period:    \n      description: 'Type of period defined the date From and Through: A free text or a unique value of the different combination allowed ''season / offSeason'' - ''summer / winter'' - ''low / medium / high''. enum:''high, low, medium, offSeason, season, summer, winter'''    \n      enum:    \n        - high    \n        - low    \n        - medium    \n        - offSeason    \n        - season    \n        - summer    \n        - winter    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the Repository'    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    refSeaPort:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to the entity [Seaport](https://github.com/smart-data-models/dataModel.Port/blob/master/Seaport/doc/spec.md) to use as main link'    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    resident:    \n      description: 'Ticket price of the place for resident boats for this category / period. A structured value with 2 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac'    \n      properties:    \n        annual:    \n          type: number    \n        month:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    spotCategoryRange:    \n      description: 'List from the lowest to the highest categories: A combination of them. Enum:''A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T1, T2, U, V, W, X, Y, Z, Z01, Z02, Z03, Z04, Z05, Z06, Z07, Z08, Z08, Z09, Z10, Z11, Z12, Z13, Z14, Z15, Z16, Z17'''    \n      items:    \n        enum:    \n          - A    \n          - B    \n          - C    \n          - D    \n          - E    \n          - F    \n          - G    \n          - H    \n          - I    \n          - J    \n          - K    \n          - L    \n          - M    \n          - N    \n          - O    \n          - P    \n          - Q    \n          - R    \n          - S    \n          - T1    \n          - T2    \n          - U    \n          - V    \n          - W    \n          - X    \n          - Y    \n          - Z    \n          - Z01    \n          - Z02    \n          - Z03    \n          - Z04    \n          - Z05    \n          - Z06    \n          - Z07    \n          - Z08    \n          - Z08    \n          - Z09    \n          - Z10    \n          - Z11    \n          - Z12    \n          - Z13    \n          - Z14    \n          - Z15    \n          - Z16    \n          - Z17    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be BoatPlacePricing'    \n      enum:    \n        - BoatPlacesPricing    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    validFrom:    \n      description: 'Start date and time of the pricing rules.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validThrough:    \n      description: 'End date and time of the pricing rules.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    wintering:    \n      description: 'Ticket price of the place for wintering boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro \u20ac'    \n      properties:    \n        day:    \n          type: number    \n        month:    \n          type: number    \n        week:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateLastReported    \n    - refSeaPort    \n    - spotCategoryRange    \n    - validFrom    \n    - validThrough    \n  type: object    \n```  \n</details>    \n\rAdditional Information about this Data Model* It can be used with the following data Model. - **SeaPort** to provide information to the port about authorized Boat in the port.  \nThis Data Model is complementary to the Data Model **BoatPlacesAvailable**.  \nData repository (ISO 8666 standard)** *Categorie Length Max  Width Max* A    4.99   2.00 B    5.49   2.15 C    5.99   2.30 D    6.49   2.45 E    6.99   2.60 F    7.49   2.80 G    7.99   2.80 H    8.49   2.95 I    8.99   3.10 J    9.49   3.25 K    9.99   3.40 L   10.49   3.55 M   10.99   3.70 N   11.49   3.85 O   11.99   4.00 P   12.99   4.30 Q   13.99   4.60 R   15.99   4.90 S   17.99   5.20 T1   20.99   5.60 T2   23.99   6.00 U   28.99   7.00 V   33.99   8.00 W   38.99   9.00 X   43.99  10.00 Y   48.99  11.00 Z   53.99  12.00 Z01   58.99  13.00 Z02   64.99  14.00 Z03   71.99  15.00 Z04   78.99  16.00 Z05   85.99  17.00 Z06   92.99  18.00 Z07   99.99  19.00 Z08  106.99  20.00 Z09  113.99  21.00 Z10  120.99  22.00 Z11  127.99  23.00 Z12  134.99  24.00 Z13  142.99  25.00 Z14  150.99  26.00 Z15  158.99  27.00 Z16  166.99  28.00 Z17  174.99  29.00  \n\r## Example payloads    \n\r#### BoatPlacesPricing NGSI-v2 key-values Example    \n\rHere is an example of a BoatPlacesPricing in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlacePricing:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n  \"type\": \"BoatPlacesPricing\",  \n  \"name\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\",  \n  \"alternateName\": \"Riviera Port - Pricing of the Places by Categories\",  \n  \"description\": \"Pricing of the Places by Categories\",  \n  \"seeAlso\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\",  \n  \"areaServed\": \"Riviera Port\",  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"refSeaPort\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\",  \n  \"spotCategoryRange\": [  \n    \"F\",  \n    \"G\"  \n  ],  \n  \"minLength\": 7,  \n  \"maxLength\": 7.99,  \n  \"maxWidth\": 2.80,  \n  \"maxDraft\": 2.55,  \n  \"validFrom\": \"2021-01-01T17:21:20Z\",  \n  \"validThrough\": \"2021-02-10T17:21:20Z\",  \n  \"period\": \"season\",  \n  \"passage\": {  \n    \"day\": 29.45,  \n    \"week\": 200.15,  \n    \"month\": 821.20  \n  },  \n  \"resident\": {  \n    \"month\": 760.41,  \n    \"annual\": 9125.00  \n  },  \n  \"wintering\": {  \n    \"day\": 27.00,  \n    \"week\": 185.00,  \n    \"month\": 775.00  \n  },  \n  \"fairing\": {  \n    \"day\": 17.30,  \n    \"week\": 87.00,  \n    \"month\": 260.90  \n  },  \n  \"location\": {  \n    \"type\": \"Polygon\",  \n    \"coordinates\": [[[100, 0], [101, 0], [101, 1], [100, 1], [100, 0]]]  \n  }  \n}  \n```  \n\r#### BoatPlacesPricing NGSI-v2 normalized Example    \n\rHere is an example of a BoatPlacesPricing in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlacePricing:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n  \"type\": \"BoatPlacePricing\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port - Pricing of the Places by Categories\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Pricing of the Places by Categories\"  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\"  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port\"  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\"  \n  },  \n  \"refSeaPort\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\"  \n  },  \n  \"spotCategoryRange\": {  \n    \"type\": \"property\",  \n    \"value\": [  \n      \"F\",  \n      \"G\"  \n    ]  \n  },  \n  \"minLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7  \n  },  \n  \"maxLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7.99  \n  },  \n  \"maxWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.80  \n  },  \n  \"maxDraft\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.55  \n  },  \n  \"validFrom\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-01-01T17:21:20Z\"  \n  },  \n  \"validThrough\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-02-10T17:21:20Z\"  \n  },  \n  \"period\": {  \n    \"type\": \"Property\",  \n    \"value\": \"season\"  \n  },  \n  \"passage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"day\": 29.45,  \n      \"week\": 200.15,  \n      \"month\": 821.20  \n    }  \n  },  \n  \"resident\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"month\": 760.41,  \n      \"annual\": 9125.00  \n    }  \n  },  \n  \"wintering\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"day\": 27.00,  \n      \"week\": 185.00,  \n      \"month\": 775.00  \n    }  \n  },  \n  \"fairing\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"day\": 17.30,  \n      \"week\": 87.00,  \n      \"month\": 260.90  \n    },  \n    \"location\": {  \n      \"type\": \"GeoProperty\",  \n      \"value\": {  \n        \"type\": \"Polygon\",  \n        \"coordinates\": [  \n          [  \n            [  \n              100,  \n              0  \n            ],  \n            [  \n              101,  \n              0  \n            ],  \n            [  \n              101,  \n              1  \n            ],  \n            [  \n              100,  \n              1  \n            ],  \n            [  \n              100,  \n              0  \n            ]  \n          ]  \n        ]  \n      }  \n    }  \n  }  \n}  \n```  \n\r#### BoatPlacesPricing NGSI-LD key-values Example    \n\rHere is an example of a BoatPlacesPricing in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlacePricing:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n  \"type\": \"BoatPlacePricing\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port - Pricing of the Places by Categories\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Pricing of the Places by Categories\"  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\"  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Riviera Port\"  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\"  \n  },  \n  \"refSeaPort\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\"  \n  },  \n  \"spotCategoryRange\": {  \n    \"type\": \"property\",  \n    \"value\": [  \n      \"F\",  \n      \"G\"  \n    ]  \n  },  \n  \"minLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7  \n  },  \n  \"maxLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7.99  \n  },  \n  \"maxWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.8  \n  },  \n  \"maxDraft\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.55  \n  },  \n  \"validFrom\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-01-01T17:21:20Z\"  \n  },  \n  \"validThrough\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-02-10T17:21:20Z\"  \n  },  \n  \"period\": {  \n    \"type\": \"Property\",  \n    \"value\": \"season\"  \n  },  \n  \"passage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"day\": 29.45,  \n      \"week\": 200.15,  \n      \"month\": 821.2  \n    }  \n  },  \n  \"resident\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"month\": 760.41,  \n      \"annual\": 9125.0  \n    }  \n  },  \n  \"wintering\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"day\": 27.0,  \n      \"week\": 185.0,  \n      \"month\": 775.0  \n    }  \n  },  \n  \"fairing\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"day\": 17.3,  \n      \"week\": 87.0,  \n      \"month\": 260.9  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Polygon\",  \n      \"coordinates\": [  \n        [  \n          [  \n            100,  \n            0  \n          ],  \n          [  \n            101,  \n            0  \n          ],  \n          [  \n            101,  \n            1  \n          ],  \n          [  \n            100,  \n            1  \n          ],  \n          [  \n            100,  \n            0  \n          ]  \n        ]  \n      ]  \n    }  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### BoatPlacesPricing NGSI-LD normalized Example    \n\rHere is an example of a BoatPlacesPricing in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:BoatPlacePricing:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n  \"type\": \"BoatPlacePricing\",  \n  \"name\": \"Riviera-Port-NCE-SPAP-BPA-Range-FG\",  \n  \"alternateName\": \"Riviera Port - Pricing of the Places by Categories\",  \n  \"description\": \"Pricing of the Places by Categories\",  \n  \"seeAlso\": \"https://ccinicecotedazur/docs/tarifs-plaisance-yachting-ports-passage-2019\",  \n  \"areaServed\": \"Riviera Port\",  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"refSeaPort\": \"urn:ngsi-ld:SeaPort:Riviera-Port-NCE-SP-001\",  \n  \"spotCategoryRange\": [  \n    \"F\",  \n    \"G\"  \n  ],  \n  \"minLength\": 7,  \n  \"maxLength\": 7.99,  \n  \"maxWidth\": 2.8,  \n  \"maxDraft\": 2.55,  \n  \"validFrom\": \"2021-01-01T17:21:20Z\",  \n  \"validThrough\": \"2021-02-10T17:21:20Z\",  \n  \"period\": \"season\",  \n  \"passage\": {  \n    \"day\": 29.45,  \n    \"week\": 200.15,  \n    \"month\": 821.2  \n  },  \n  \"resident\": {  \n    \"month\": 760.41,  \n    \"annual\": 9125.0  \n  },  \n  \"wintering\": {  \n    \"day\": 27.0,  \n    \"week\": 185.0,  \n    \"month\": 775.0  \n  },  \n  \"fairing\": {  \n    \"day\": 17.3,  \n    \"week\": 87.0,  \n    \"month\": 260.9  \n  },  \n  \"location\": {  \n    \"type\": \"Polygon\",  \n    \"coordinates\": [  \n      [  \n        [  \n          100,  \n          0  \n        ],  \n        [  \n          101,  \n          0  \n        ],  \n        [  \n          101,  \n          1  \n        ],  \n        [  \n          100,  \n          1  \n        ],  \n        [  \n          100,  \n          0  \n        ]  \n      ]  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: SeaportFacilities
        - MODEL_DESCRIPTION: The Data Model is intended to provide information about ports that can accommodate pleasure craft, commerce or passenger  transport. It permit to represent the parameters of each port, its location, its mooring capacities and the free or paid services associated with it provided directly by the port or by professionals working on or near the port.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              BoadPlacesAvailable of the Subject Ports.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: SeaportFacilities  \n=========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Ports/blob/master/SeaportFacilities/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The Data Model is intended to provide information about ports that can accommodate pleasure craft, commerce or passenger  transport. It permit to represent the parameters of each port, its location, its mooring capacities and the free or paid services associated with it provided directly by the port or by professionals working on or near the port.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: A timestamp which denotes the last time when a flow successfully reported data. The date and time of this Repository in ISO8601 UTCformat  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `openingHoursSpecification`: A structured value providing information about the opening hours of a place or a certain service inside a place  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `refDevice`: Reference to the Main Entity [Device](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) if used as second link  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: It has to be SeaPortFacilities  \r  \n\rRequired properties  \n- `dateLastReported`  \r- `id`  \r- `location`  \r- `type`  \r- `typeOfPort`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nSeaportFacilities:    \n  description: 'The Data Model is intended to provide information about ports that can accommodate pleasure craft, commerce or passenger  transport. It permit to represent the parameters of each port, its location, its mooring capacities and the free or paid services associated with it provided directly by the port or by professionals working on or near the port.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'A timestamp which denotes the last time when a flow successfully reported data. The date and time of this Repository in ISO8601 UTCformat'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &seaportfacilities_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    openingHoursSpecification:    \n      description: 'A structured value providing information about the opening hours of a place or a certain service inside a place'    \n      items:    \n        properties:    \n          closes:    \n            format: time    \n            pattern: ^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(\\.[0-9]*)?(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$    \n            type: string    \n          dayOfWeek:    \n            anyOf:    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - Monday    \n                  - Tuesday    \n                  - Wednesday    \n                  - Thursday    \n                  - Friday    \n                  - Saturday    \n                  - Sunday    \n                  - PublicHolidays    \n                type: string    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - https://schema.org/Monday    \n                  - https://schema.org/Tuesday    \n                  - https://schema.org/Wednesday    \n                  - https://schema.org/Thursday    \n                  - https://schema.org/Friday    \n                  - https://schema.org/Saturday    \n                  - https://schema.org/Sunday    \n                  - https://schema.org/PublicHolidays    \n                type: string    \n            description: 'Property. Model:''http://schema.org/dayOfWeek''. The day of the week for which these opening hours are valid. URLs from GoodRelations (http://purl.org/goodrelations/v1) are used (for Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday plus a special entry for PublicHolidays).'    \n            type: string    \n          opens:    \n            format: time    \n            pattern: ^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(\\.[0-9]*)?(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$    \n            type: string    \n          validFrom:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date when the item becomes valid. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n          validThrough:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n            type: string    \n        type: object    \n      minItems: 1    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/openingHoursSpecification    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *seaportfacilities_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to the Main Entity [Device](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) if used as second link'    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'It has to be SeaPortFacilities'    \n      enum:    \n        - SeaPortFacilities    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateLastReported    \n    - typeOfPort    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Ports/blob/master/SeaportFacilities/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModels.Ports/SeaPort/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### SeaportFacilities NGSI-v2 key-values Example    \n\rHere is an example of a SeaportFacilities in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:SeaPort:SeaPort:MNCA-SP-001\",  \n  \"type\": \"SeaPort\",  \n  \"name\": \"Riviera-Port-NCE-SP-001\",  \n  \"alternateName\": \"Riviera Port - Main harbor - Commerce & Passengers\",  \n  \"description\": \"Harbor Description and services provided\",  \n  \"seeAlso\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.664810,  \n      7.196545  \n    ]  \n  },  \n  \"areaServed\": \"Nice Port\",  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"refBoatAuthorized\": [  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-passenger\",  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-fishing\",  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-cargo\",  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-tankers\",  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-specialist\",  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-war\",  \n    \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-historic\"  \n  ],  \n  \"refBoatPlaceAvailable\": [  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-A\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-BC\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-DE\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-HI\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-JK\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-LO\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-PQ\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-U\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-VW\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-XZ\",  \n    \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-Z02\"  \n  ],  \n  \"refBoatPlacePricing\": [  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-A\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-BC\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-DE\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-HI\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-JK\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-LO\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-PQ\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-U\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-VW\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-XZ\",  \n    \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-Z02\"  \n  ],  \n  \"owner\": [  \n    \"Departement_06\", \"CCI06\", \"MNCA\", \"Ville_de_Nice\"  \n  ],  \n  \"contractingAuthority\": \"CCI\",  \n  \"contractingCompany\": \"R\u00e9gie Autonome des ports\",  \n  \"contactPoint\": \"Capitainerie\",  \n  \"webSite\": \"https://riviera-ports.com/ports/port-de-nice\",  \n  \"typeOfPort\": [  \n    \"marina\",  \n    \"merchandise\",  \n    \"cruise\",  \n    \"ferry\",  \n    \"yatching\"  \n  ],  \n  \"authorizedPropulsion\": [  \n    \"motor\",  \n    \"electric\",  \n    \"lng\"  \n  ],  \n  \"maxTonnage\": 30000,  \n  \"numberOfPlace\": 120,  \n  \"minLength\": 6,  \n  \"maxLength\": 180,  \n  \"maxWidth\": 25,  \n  \"maxDraft\": 9.65,  \n  \"portServicesProvided\": [  \n    \"harborOffice\",  \n    \"weather\",  \n    \"customsServices\",  \n    \"porters\"  \n  ],  \n  \"boatSupplyingServices\": [  \n    \"fuelStation\",  \n    \"fuelTankerTruck\",  \n    \"drinkingWaterTankerTruck\",  \n    \"dryFairing\",  \n    \"repair\",  \n    \"expertise\",  \n    \"gangways\",  \n    \"liftingCranes\",  \n    \"towing\",  \n    \"wasteWaterPumping\",  \n    \"boatConveying\"  \n  ],  \n  \"facilities\": [  \n    \"wifi\",  \n    \"telephone\",  \n    \"toilets\",  \n    \"selectiveSortingWaste\",  \n    \"electricTerminal\",  \n    \"waterTerminal\",  \n    \"dustbins\",  \n    \"dumpsters\",  \n    \"container\"  \n  ],  \n  \"nearbyServices\": [  \n    \"groceryStores\",  \n    \"presses\",  \n    \"exchangeOffice\",  \n    \"touristicExcursions\"  \n  ],  \n  \"rentalSaleServices\": [  \n    \"boatRental\",  \n    \"boatSale\",  \n    \"carRental\"  \n  ],  \n  \"transportServices\": [  \n    \"parking\",  \n    \"shuttlesToAirport\",  \n    \"taxis\"  \n  ],  \n  \"routeType\": [  \n    \"tram\",  \n    \"metro\",  \n    \"train\",  \n    \"bus\",  \n    \"ferry\"  \n  ],  \n  \"electricTransport\": [  \n    \"electricBycicle\",  \n    \"electricMotorBike\"  \n  ],  \n  \"paymentAccepted\": [  \n    \"Cash\",  \n    \"CreditCard\"  \n  ],  \n  \"currencyAccepted\": [  \n    \"EUR\",  \n    \"USD\"  \n  ]  \n}  \n```  \n\r#### SeaportFacilities NGSI-v2 normalized Example    \n\rHere is an example of a SeaportFacilities in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n\t\"id\": \"urn:ngsi-ld:SeaPort:SeaPort:MNCA-SP-001\",  \n\t\"type\": \"SeaPort\",  \n\t\"name\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"Riviera-Port-NCE-SP-001\"  \n\t},  \n\t\"alternateName\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"Riviera Port - Main harbor - Commerce & Passengers\"  \n\t},  \n\t\"description\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"Harbor Description and services provided\"  \n\t},  \n\t\"seeAlso\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\"  \n\t},  \n\t\"location\": {  \n\t\t\"type\": \"GeoProperty\",  \n\t\t\"value\": {  \n\t\t\t\"type\": \"point\",  \n\t\t\t\t\"coordinates\": [43.664810, 7.196545]  \n\t\t\t}  \n\t},  \n\t\"areaServed\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"Nice Port\"  \n\t},  \n\t\"dateLastReported\": {  \n\t\t\"type\": \"DateTime\",  \n\t\t\"value\": \"2020-03-17T08:45:00Z\",  \n\t\t\"metadata\": {  \n\t\t\t\"TimeInstant\": {  \n\t\t\t\t\"type\": \"Text\",  \n\t\t\t\t\"value\": \"2020-03-17TT08:45:00Z\"  \n\t\t\t}  \n\t\t}  \n\t},  \n\t\"refBoatAuthorized\": {  \n\t\t\"type\": \"Relationship\",  \n\t\t\"Object\": [\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-passenger\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-fishing\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-cargo\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-tankers\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-specialist\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-war\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-historic\"  \n\t\t]  \n\t},  \n\t\"refBoatPlaceAvailable\": {  \n\t\t\"type\": \"Relationship\",  \n\t\t\"Object\": [\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-A\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-BC\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-DE\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-HI\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-JK\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-LO\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-PQ\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-U\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-VW\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-XZ\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-Z02\"  \n\t\t]  \n\t},  \n\t\"refBoatPlacePricing\": {  \n\t\t\"type\": \"Relationship\",  \n\t\t\"Object\": [\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-A\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-BC\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-DE\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-HI\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-JK\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-LO\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-PQ\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-U\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-VW\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-XZ\",  \n\t\t\t\t\t\"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-Z02\"  \n\t\t]  \n\t},  \n\t\"owner\" : {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"Departement_06\", \"CCI06\", \"MNCA\", \"Ville_de_Nice\"]  \n\t},  \n\t\"contractingAuthority\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"CCI\"  \n\t},  \n\t\"contractingCompagny\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"R\u00e9gie Autonome des ports\"  \n\t},  \n\t\"contactPoint\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"Capitainerie\"  \n\t},  \n\t\"webSite\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"https://riviera-ports.com/ports/port-de-nice\"  \n\t},  \n\t\"typeOfPort\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"marina\", \"merchandise\", \"cruise\", \"ferry\", \"yatching\"]  \n\t},  \n\t\"authorizedPropulsions\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"motor\", \"electric\",\"lng\"]  \n\t},  \n\t\"maxTonnage\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 30000  \n\t},  \n\t\"numberOfPlace\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 120  \n\t},  \n\t\"minLength\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 6  \n\t},  \n\t\"maxLength\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 180  \n\t},  \n\t\"maxWidth\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 25  \n\t},  \n\t\"maxDraft\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 9.65  \n\t},  \n\t\"portServicesProvided\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"harborOffice\", \"weather\", \"customsServices\", \"porters\"]  \n\t},  \n\t\"boatSupplyingServices\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"fuelStation\", \"fuelTankerTruck\", \"drinkingWaterTankerTruck\", \"dryFairing\", \"repair\", \"expertise\", \"gangways\", \"liftingCranes\", \"towing\", \"wasteWaterPumping\", \"boatConveying\"]  \n\t},  \n\t\"facilities\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"wifi\", \"telephone\", \"toilets\", \"selectiveSortingWaste\", \"electricTerminal\", \"waterTerminal\", \"dustbins\", \"dumpsters\", \"container\"]  \n\t},  \n\t\"nearbyServices\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"groceryStores\", \"presses\", \"exchangeOffice\", \"touristicExcursions\"]  \n\t},  \n\t\"rentalSaleServices\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"boatRental\", \"boatSale\", \"carRental\"]  \n\t},  \n\t\"transportServices\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"parking\", \"shuttlesToAirport\", \"taxis\"]  \n\t},  \n\t\"routeType\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"tram\", \"metro\", \"train\", \"bus\", \"ferry\"]  \n\t},  \n\t\"electricTransport\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"electricBycicle\", \"electricMotorBike\"]  \n\t},  \n\t\"paymentAccepted\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"Cash\", \"CreditCard\"]  \n\t},  \n\t\"currencyAccepted\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [\"EUR\", \"USD\"]  \n\t}  \n}  \n```  \n\r#### SeaportFacilities NGSI-LD key-values Example    \n\rHere is an example of a SeaportFacilities in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:SeaPort:SeaPort:MNCA-SP-001\",  \n    \"type\": \"SeaPort\",  \n    \"alternateName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Riviera Port - Main harbor - Commerce & Passengers\"  \n    },  \n    \"areaServed\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice Port\"  \n    },  \n    \"authorizedPropulsions\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"motor\",  \n            \"electric\",  \n            \"lng\"  \n        ]  \n    },  \n    \"boatSupplyingServices\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"fuelStation\",  \n            \"fuelTankerTruck\",  \n            \"drinkingWaterTankerTruck\",  \n            \"dryFairing\",  \n            \"repair\",  \n            \"expertise\",  \n            \"gangways\",  \n            \"liftingCranes\",  \n            \"towing\",  \n            \"wasteWaterPumping\",  \n            \"boatConveying\"  \n        ]  \n    },  \n    \"contactPoint\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Capitainerie\"  \n    },  \n    \"contractingAuthority\": {  \n        \"type\": \"Property\",  \n        \"value\": \"CCI\"  \n    },  \n    \"contractingCompagny\": {  \n        \"type\": \"Property\",  \n        \"value\": \"R\\u00e9gie Autonome des ports\"  \n    },  \n    \"currencyAccepted\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"EUR\",  \n            \"USD\"  \n        ]  \n    },  \n    \"dateLastReported\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2020-03-17T08:45:00Z\",  \n        \"metadata\": {  \n            \"TimeInstant\": {  \n                \"type\": \"Text\",  \n                \"value\": \"2020-03-17TT08:45:00Z\"  \n            }  \n        }  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Harbor Description and services provided\"  \n    },  \n    \"electricTransport\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"electricBycicle\",  \n            \"electricMotorBike\"  \n        ]  \n    },  \n    \"facilities\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"wifi\",  \n            \"telephone\",  \n            \"toilets\",  \n            \"selectiveSortingWaste\",  \n            \"electricTerminal\",  \n            \"waterTerminal\",  \n            \"dustbins\",  \n            \"dumpsters\",  \n            \"container\"  \n        ]  \n    },  \n    \"location\": {  \n        \"type\": \"GeoProperty\",  \n        \"value\": {  \n            \"type\": \"point\",  \n            \"coordinates\": [  \n                43.66481,  \n                7.196545  \n            ]  \n        }  \n    },  \n    \"maxDraft\": {  \n        \"type\": \"Property\",  \n        \"value\": 9.65  \n    },  \n    \"maxLength\": {  \n        \"type\": \"Property\",  \n        \"value\": 180  \n    },  \n    \"maxTonnage\": {  \n        \"type\": \"Property\",  \n        \"value\": 30000  \n    },  \n    \"maxWidth\": {  \n        \"type\": \"Property\",  \n        \"value\": 25  \n    },  \n    \"minLength\": {  \n        \"type\": \"Property\",  \n        \"value\": 6  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Riviera-Port-NCE-SP-001\"  \n    },  \n    \"nearbyServices\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"groceryStores\",  \n            \"presses\",  \n            \"exchangeOffice\",  \n            \"touristicExcursions\"  \n        ]  \n    },  \n    \"numberOfPlace\": {  \n        \"type\": \"Property\",  \n        \"value\": 120  \n    },  \n    \"owner\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"Departement_06\",  \n            \"CCI06\",  \n            \"MNCA\",  \n            \"Ville_de_Nice\"  \n        ]  \n    },  \n    \"paymentAccepted\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"Cash\",  \n            \"CreditCard\"  \n        ]  \n    },  \n    \"portServicesProvided\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"harborOffice\",  \n            \"weather\",  \n            \"customsServices\",  \n            \"porters\"  \n        ]  \n    },  \n    \"refBoatAuthorized\": {  \n        \"type\": \"Relationship\",  \n        \"Object\": [  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-passenger\",  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-fishing\",  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-cargo\",  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-tankers\",  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-specialist\",  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-war\",  \n            \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-historic\"  \n        ]  \n    },  \n    \"refBoatPlaceAvailable\": {  \n        \"type\": \"Relationship\",  \n        \"Object\": [  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-A\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-BC\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-DE\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-HI\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-JK\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-LO\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-PQ\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-U\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-VW\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-XZ\",  \n            \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-Z02\"  \n        ]  \n    },  \n    \"refBoatPlacePricing\": {  \n        \"type\": \"Relationship\",  \n        \"Object\": [  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-A\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-BC\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-DE\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-HI\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-JK\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-LO\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-PQ\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-U\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-VW\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-XZ\",  \n            \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-Z02\"  \n        ]  \n    },  \n    \"rentalSaleServices\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"boatRental\",  \n            \"boatSale\",  \n            \"carRental\"  \n        ]  \n    },  \n    \"routeType\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"tram\",  \n            \"metro\",  \n            \"train\",  \n            \"bus\",  \n            \"ferry\"  \n        ]  \n    },  \n    \"seeAlso\": {  \n        \"type\": \"Property\",  \n        \"value\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\"  \n    },  \n    \"transportServices\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"parking\",  \n            \"shuttlesToAirport\",  \n            \"taxis\"  \n        ]  \n    },  \n    \"typeOfPort\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"marina\",  \n            \"merchandise\",  \n            \"cruise\",  \n            \"ferry\",  \n            \"yatching\"  \n        ]  \n    },  \n    \"webSite\": {  \n        \"type\": \"Property\",  \n        \"value\": \"https://riviera-ports.com/ports/port-de-nice\"  \n    },  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Ports/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### SeaportFacilities NGSI-LD normalized Example    \n\rHere is an example of a SeaportFacilities in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:SeaPort:SeaPort:MNCA-SP-001\",  \n    \"type\": \"SeaPort\",  \n    \"alternateName\": \"Riviera Port - Main harbor - Commerce & Passengers\",  \n    \"areaServed\": \"Nice Port\",  \n    \"authorizedPropulsion\": [  \n        \"motor\",  \n        \"electric\",  \n        \"lng\"  \n    ],  \n    \"boatSupplyingServices\": [  \n        \"fuelStation\",  \n        \"fuelTankerTruck\",  \n        \"drinkingWaterTankerTruck\",  \n        \"dryFairing\",  \n        \"repair\",  \n        \"expertise\",  \n        \"gangways\",  \n        \"liftingCranes\",  \n        \"towing\",  \n        \"wasteWaterPumping\",  \n        \"boatConveying\"  \n    ],  \n    \"contactPoint\": \"Capitainerie\",  \n    \"contractingAuthority\": \"CCI\",  \n    \"contractingCompany\": \"R\\u00e9gie Autonome des ports\",  \n    \"currencyAccepted\": [  \n        \"EUR\",  \n        \"USD\"  \n    ],  \n    \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n    \"description\": \"Harbor Description and services provided\",  \n    \"electricTransport\": [  \n        \"electricBycicle\",  \n        \"electricMotorBike\"  \n    ],  \n    \"facilities\": [  \n        \"wifi\",  \n        \"telephone\",  \n        \"toilets\",  \n        \"selectiveSortingWaste\",  \n        \"electricTerminal\",  \n        \"waterTerminal\",  \n        \"dustbins\",  \n        \"dumpsters\",  \n        \"container\"  \n    ],  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            43.66481,  \n            7.196545  \n        ]  \n    },  \n    \"maxDraft\": 9.65,  \n    \"maxLength\": 180,  \n    \"maxTonnage\": 30000,  \n    \"maxWidth\": 25,  \n    \"minLength\": 6,  \n    \"name\": \"Riviera-Port-NCE-SP-001\",  \n    \"nearbyServices\": [  \n        \"groceryStores\",  \n        \"presses\",  \n        \"exchangeOffice\",  \n        \"touristicExcursions\"  \n    ],  \n    \"numberOfPlace\": 120,  \n    \"owner\": [  \n        \"Departement_06\",  \n        \"CCI06\",  \n        \"MNCA\",  \n        \"Ville_de_Nice\"  \n    ],  \n    \"paymentAccepted\": [  \n        \"Cash\",  \n        \"CreditCard\"  \n    ],  \n    \"portServicesProvided\": [  \n        \"harborOffice\",  \n        \"weather\",  \n        \"customsServices\",  \n        \"porters\"  \n    ],  \n    \"refBoatAuthorized\": [  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-yatching\",  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-passenger\",  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-fishing\",  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-cargo\",  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-tankers\",  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-specialist\",  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-war\",  \n        \"urn:ngsi-ld:BoatAuthorized:MNCA-NCE-BA-001-historic\"  \n    ],  \n    \"refBoatPlaceAvailable\": [  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-A\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-BC\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-DE\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-FG\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-HI\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-JK\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-LO\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-PQ\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-RT2\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-U\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-VW\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-XZ\",  \n        \"urn:ngsi-ld:BoatPlaceAvailable:MNCA-BPA-Range-Z02\"  \n    ],  \n    \"refBoatPlacePricing\": [  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-A\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-BC\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-DE\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-FG\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-HI\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-JK\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-LO\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-PQ\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-RT2\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-U\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-VW\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-XZ\",  \n        \"urn:ngsi-ld:BoatPlacePricing:MNCA-BPP-Range-Z02\"  \n    ],  \n    \"rentalSaleServices\": [  \n        \"boatRental\",  \n        \"boatSale\",  \n        \"carRental\"  \n    ],  \n    \"routeType\": [  \n        \"tram\",  \n        \"metro\",  \n        \"train\",  \n        \"bus\",  \n        \"ferry\"  \n    ],  \n    \"seeAlso\": \"https://ccinicecotedazur/docs/port-nice_z-card_2015\",  \n    \"transportServices\": [  \n        \"parking\",  \n        \"shuttlesToAirport\",  \n        \"taxis\"  \n    ],  \n    \"typeOfPort\": [  \n        \"marina\",  \n        \"merchandise\",  \n        \"cruise\",  \n        \"ferry\",  \n        \"yatching\"  \n    ],  \n    \"webSite\": \"https://riviera-ports.com/ports/port-de-nice\",  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: Streetlighting
      MODELS:
        - MODEL_NAME: Streetlight
        - MODEL_DESCRIPTION: A Street light
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A streetlight data model, mail: null,
              organization: IUDX, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              Streetlight of the Subject dataModel.Streetlighting.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: Streetlight  \n===================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Streetlighting/blob/master/Streetlight/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A Street light**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `annotations`: Annotations about the item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `circuit`: The circuit to which this streetlight connects to and gets power from. Typically it will contain an identifier that will allow to obtain more information about such circuit.  \r- `color`: The color of the product  \r- `controllingMethod`: The method used to control this streetlight. Enum:'group, individual'.   \r- `current`: Current value of the streetlight corresponding to this observation.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastLampChange`: Timestamp of the last change of lamp made  \r- `dateLastSwitchingOff`: Timestamp of the last switching off  \r- `dateLastSwitchingOn`: Timestamp of the last switching on  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateServiceStarted`: Date at which the streetlight started giving service  \r- `description`: A description of this item  \r- `deviceInfo`: Information about the device associated with the observations.  \r- `feederID`: Unique ID of the streetlight feeder panel associated with the streetlight corresponding to this observation.  \r- `feederPillarNum`: Streetlight feeder pillar information associated with the streetlight corresponding to this observation.  \r- `id`: Unique identifier of the entity  \r- `illuminanceLevel`: Relative illuminance level setting. A number between 0 and 1.  \r- `image`: A URL containing a photo of the streetlight  \r- `lanternHeight`: Lantern's height. In columns with many arms this can vary between streetlights. Another variation source of this property are wall-mounted streetlights.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `locationCategory`: Category of the location where the streetlight is placed. Enum:'bridge, centralIsland, facade, garden, park, parking, pedestrianPath, playground, road, sidewalk, tunnel'  \r- `municipalityInfo`: Municipality information corresponding to this observation.  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `powerConsumption`: Power consumed by the LED or the streetlight bulb corresponding to this observation.  \r- `powerFactor`: Power factor or the ratio of working power of the streetlight corresponding to this observation.  \r- `powerRating`: Power rating of the LED or the streetlight bulb corresponding to this observation.  \r- `powerState`: Streetlight's power state. Enum:'bootingUp, low, off, on'  \r- `refDevice`: Reference to the device(s) used to monitor this streetligth. List of Reference to entity(ies) of type Device.  \r- `refStreetlightControlCabinet`: If this streetlight is individually controlled, reference to the control cabinet in charge of.  \r- `refStreetlightGroup`: Streetlight's group, if this streetlight belongs to any group.  \r- `refStreetlightModel`: Streetlight's model.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `status`: The overall status of this street light. Enum:'brokenLantern, columnIssue, defectiveLamp, ok'  \r- `streetPoleNum`: Street pole information associated with the streetlight corresponding to this observation.  \r- `type`: NGSI Entity type. It has to be Streetlight  \r- `voltage`: Voltage value of the streetlight corresponding to this observation.  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `status`  \r- `type`  \r  \n\rAn entity of type `Streetlight` represents a urban streetlight. Actually, there  will be an entity of type `Streetlight` per lamp. Thus, if a particular pole   holds more than one lantern there will be as many streetlight entites as   installed lamps. As a result there might be more than one streetlight entity per   location. A `Streetlight` entity does not contain any attribute corresponding to structural characteristics. Such data is captured by entities of type `StreetlightModel`.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nStreetlight:    \n  description: 'A Street light'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    annotations:    \n      description: 'Annotations about the item'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    circuit:    \n      description: 'The circuit to which this streetlight connects to and gets power from. Typically it will contain an identifier that will allow to obtain more information about such circuit.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    color:    \n      description: 'The color of the product'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/color    \n        type: Property    \n    controllingMethod:    \n      description: 'The method used to control this streetlight. Enum:''group, individual''. '    \n      enum:    \n        - group    \n        - individual    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    current:    \n      description: 'Current value of the streetlight corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastLampChange:    \n      description: 'Timestamp of the last change of lamp made'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateLastSwitchingOff:    \n      description: 'Timestamp of the last switching off'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateLastSwitchingOn:    \n      description: 'Timestamp of the last switching on'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateServiceStarted:    \n      description: 'Date at which the streetlight started giving service'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Date    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    deviceInfo:    \n      description: 'Information about the device associated with the observations.'    \n      properties:    \n        RFId:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the ID of the RFID reader.'    \n          type: string    \n        deviceBatteryStatus:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the Battery charging status of the reporting device(Connected, Disconnected).'    \n          type: string    \n        deviceId:    \n          description: 'Property. Model:''https://schema.org/Text''. Device ID of the physical sensor/ measurement station corresponding to this observation.'    \n          type: string    \n        deviceModel:    \n          description: 'Property. Model:''https://schema.org/Text''. Describes the information of the device, sensor or system in consideration.'    \n          properties:    \n            brandName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of the brand associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            manufacturerName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of the manufacturer associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            modelName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of a specific model associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            modelURL:    \n              description: 'Property. Model:''https://schema.org/Text''. URL providing further information of a specific model associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n          type: object    \n        deviceName:    \n          description: 'Property. Model:''https://schema.org/Text''. Device Name or Station name of the sensor device/station corresponding to this observation.'    \n          type: string    \n        deviceSimNumber:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the sim number of the device in the waste management vehicle.'    \n          type: string    \n        measurand:    \n          description: 'Property. Model:''https://schema.org/Text''. Property/properties sensed/observed/measured by the device.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    feederID:    \n      anyOf:    \n        - description: 'Property. '    \n          type: string    \n        - description: 'Property. Model:''https://schema.org/Text'    \n          format: uri    \n          type: string    \n      description: 'Unique ID of the streetlight feeder panel associated with the streetlight corresponding to this observation.'    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Relationship    \n    feederPillarNum:    \n      description: 'Streetlight feeder pillar information associated with the streetlight corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    id:    \n      anyOf: &streetlight_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    illuminanceLevel:    \n      description: 'Relative illuminance level setting. A number between 0 and 1.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    image:    \n      description: 'A URL containing a photo of the streetlight'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/image    \n        type: Relationship    \n    lanternHeight:    \n      description: 'Lantern''s height. In columns with many arms this can vary between streetlights. Another variation source of this property are wall-mounted streetlights.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    locationCategory:    \n      description: 'Category of the location where the streetlight is placed. Enum:''bridge, centralIsland, facade, garden, park, parking, pedestrianPath, playground, road, sidewalk, tunnel'''    \n      enum:    \n        - bridge    \n        - centralIsland    \n        - facade    \n        - garden    \n        - park    \n        - parking    \n        - pedestrianPath    \n        - playground    \n        - road    \n        - sidewalk    \n        - tunnel    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    municipalityInfo:    \n      description: 'Municipality information corresponding to this observation.'    \n      properties:    \n        cityId:    \n          description: 'Property. Model:''https://schema.org/Text''. City ID corresponding to this observation'    \n          type: string    \n        cityName:    \n          description: 'Property. Model:''https://schema.org/Text''. City name corresponding to this observation'    \n          type: string    \n        district:    \n          description: 'Property. Model:''https://schema.org/Text''. District name corresponding to this observation.'    \n          type: string    \n        stateName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the state corresponding to this observation.'    \n          type: string    \n        ulbName:    \n          description: 'Property. Model:''https://schema.org/Text''.Name of the Urban Local Body corresponding to this observation.'    \n          type: string    \n        wardNum:    \n          description: 'Property. Model:''https://schema.org/Number''. Ward number corresponding to this observation.'    \n          type: number    \n        zoneId:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone ID corresponding to this observation.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *streetlight_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    powerConsumption:    \n      description: 'Power consumed by the LED or the streetlight bulb corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    powerFactor:    \n      description: 'Power factor or the ratio of working power of the streetlight corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    powerRating:    \n      description: 'Power rating of the LED or the streetlight bulb corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    powerState:    \n      description: 'Streetlight''s power state. Enum:''bootingUp, low, off, on'''    \n      enum:    \n        - bootingUp    \n        - low    \n        - off    \n        - on    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    refDevice:    \n      description: 'Reference to the device(s) used to monitor this streetligth. List of Reference to entity(ies) of type Device.'    \n      items:    \n        anyOf:    \n          - description: 'Property. Identifier format of any NGSI entity'    \n            maxLength: 256    \n            minLength: 1    \n            pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n            type: string    \n          - description: 'Property. Identifier format of any NGSI entity'    \n            format: uri    \n            type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Relationship    \n    refStreetlightControlCabinet:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'If this streetlight is individually controlled, reference to the control cabinet in charge of.'    \n      x-ngsi:    \n        type: Relationship    \n    refStreetlightGroup:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Streetlight''s group, if this streetlight belongs to any group.'    \n      x-ngsi:    \n        type: Relationship    \n    refStreetlightModel:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Streetlight''s model.'    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    status:    \n      description: 'The overall status of this street light. Enum:''brokenLantern, columnIssue, defectiveLamp, ok'''    \n      enum:    \n        - brokenLantern    \n        - columnIssue    \n        - defectiveLamp    \n        - ok    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    streetPoleNum:    \n      description: 'Street pole information associated with the streetlight corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be Streetlight'    \n      enum:    \n        - Streetlight    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    voltage:    \n      description: 'Voltage value of the streetlight corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - status    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Streetlighting/blob/master/Streetlight/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Streetlighting/Streetlight/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.1.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### Streetlight NGSI-v2 key-values Example    \n\rHere is an example of a Streetlight in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"streetlight:guadalajara:4567\",  \n  \"type\": \"Streetlight\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -3.164485591715449,  \n      40.62785133667262  \n    ]  \n  },  \n  \"areaServed\": \"Roundabouts city entrance\",  \n  \"status\": \"ok\",  \n  \"refStreetlightGroup\": \"streetlightgroup:G345\",  \n  \"refStreetlightModel\": \"streetlightmodel:STEEL_Tubular_10m\",  \n  \"circuit\": \"C-456-A467\",  \n  \"lanternHeight\": 10,  \n  \"locationCategory\": \"centralIsland\",  \n  \"powerState\": \"off\",  \n  \"controllingMethod\": \"individual\",  \n  \"dateLastLampChange\": \"2016-07-08T08:02:21.753Z\",  \n  \"powerConsumption\": 10,  \n  \"current\": 250,  \n  \"powerRating\": 5,  \n  \"powerFactor\": 0.7,  \n  \"voltage\": 50,  \n  \"feederPillarNum\": \"70\",  \n  \"streetPoleNum\": \"2\",  \n  \"feederID\": \"F1\",  \n  \"observationDateTime\": \"2021-01-11T15:51:02+05:30\",  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityID\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneID\": \"2\",  \n    \"wardNum\": 4  \n  },  \n  \"deviceInfo\": {  \n    \"rfID\": \"5634684\",  \n    \"deviceBatteryStatus\": \"Connected\",  \n    \"deviceName\": \"SL1\",  \n    \"deviceID\": \"43\",  \n    \"measurand\": \"6\",  \n    \"deviceSimNumber\": \"6755375727\",  \n    \"deviceModel\": {  \n      \"brandName\": \"abc\",  \n      \"manufacturerName\": \"xyz\",  \n      \"modelName\": \"SL1\",  \n      \"modelURL\": \"www.abcstreetlight.com\"  \n    }  \n  }  \n}  \n```  \n\r#### Streetlight NGSI-v2 normalized Example    \n\rHere is an example of a Streetlight in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"streetlight:guadalajara:4567\",  \n  \"type\": \"Streetlight\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -3.164485591715449,  \n        40.62785133667262  \n      ]  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Roundabouts city entrance\"  \n  },  \n  \"status\": {  \n    \"type\": \"Text\",  \n    \"value\": \"ok\"  \n  },  \n  \"refStreetlightGroup\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"streetlightgroup:G345\"  \n  },  \n  \"refStreetlightModel\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"streetlightmodel:STEEL_Tubular_10m\"  \n  },  \n  \"circuit\": {  \n    \"type\": \"Text\",  \n    \"value\": \"C-456-A467\"  \n  },  \n  \"lanternHeight\": {  \n    \"type\": \"Number\",  \n    \"value\": 10  \n  },  \n  \"locationCategory\": {  \n    \"type\": \"Text\",  \n    \"value\": \"centralIsland\"  \n  },  \n  \"powerState\": {  \n    \"type\": \"Text\",  \n    \"value\": \"off\"  \n  },  \n  \"controllingMethod\": {  \n    \"type\": \"Text\",  \n    \"value\": \"individual\"  \n  },  \n  \"dateLastLampChange\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2016-07-08T08:02:21.753Z\"  \n  },  \n  \"powerConsumption\": {  \n    \"type\": \"Number\",  \n    \"value\": 10  \n  },  \n  \"current\": {  \n    \"type\": \"Number\",  \n    \"value\": 250  \n  },  \n  \"powerRating\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"powerFactor\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.7  \n  },  \n  \"voltage\": {  \n    \"type\": \"Number\",  \n    \"value\": 50  \n  },  \n  \"feederPillarNum\": {  \n    \"type\": \"Text\",  \n    \"value\": \"70\"  \n  },  \n  \"streetPoleNum\": {  \n    \"type\": \"Text\",  \n    \"value\": \"2\"  \n  },  \n  \"feederID\": {  \n    \"type\": \"Text\",  \n    \"value\": \"F1\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-01-11T15:51:02+05:30\"  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityId\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneId\": \"2\",  \n      \"wardNum\": 4  \n    },  \n    \"deviceInfo\": {  \n      \"type\": \"StructuredValue\",  \n      \"value\": {  \n        \"rfId\": \"5634684\",  \n        \"deviceBatteryStatus\": \"Connected\",  \n        \"deviceName\": \"SL1\",  \n        \"deviceID\": \"43\",  \n        \"measurand\": \"6\",  \n        \"deviceSimNumber\": \"6755375727\",  \n        \"deviceModel\": {  \n          \"brandName\": \"abc\",  \n          \"manufacturerName\": \"xyz\",  \n          \"modelName\": \"SL1\",  \n          \"modelURL\": \"www.abcstreetlight.com\"  \n        }  \n      }  \n    }  \n  }  \n}  \n```  \n\r#### Streetlight NGSI-LD key-values Example    \n\rHere is an example of a Streetlight in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ],  \n  \"areaServed\": \"Roundabouts city entrance\",  \n  \"circuit\": \"C-456-A467\",  \n  \"controllingMethod\": \"individual\",  \n  \"dateLastLampChange\": {  \n    \"@type\": \"DateTime\",  \n    \"@value\": \"2016-07-08T08:02:21.753Z\"  \n  },  \n  \"id\": \"urn:ngsi-ld:Streetlight:streetlight:guadalajara:4567\",  \n  \"lanternHeight\": 10,  \n  \"location\": {  \n    \"coordinates\": [  \n      -3.164485591715449,  \n      40.62785133667262  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"locationCategory\": \"centralIsland\",  \n  \"powerState\": \"off\",  \n  \"refStreetlightGroup\": \"urn:ngsi-ld:StreetlightGroup:streetlightgroup:G345\",  \n  \"refStreetlightModel\": \"urn:ngsi-ld:StreetlightModel:streetlightmodel:STEEL_Tubular_10m\",  \n  \"status\": \"ok\",  \n  \"type\": \"Streetlight\",  \n  \"powerConsumption\": 10,  \n  \"current\": 250,  \n  \"powerRating\": 5,  \n  \"powerFactor\": 0.7,  \n  \"voltage\": 50,  \n  \"feederPillarNum\": \"70\",  \n  \"streetPoleNum\": \"2\",  \n  \"feederID\": \"F1\",  \n  \"observationDateTime\": \"2021-01-11T15:51:02+05:30\",  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityID\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneID\": \"2\",  \n    \"wardNum\": 4  \n  },  \n  \"deviceInfo\": {  \n    \"rfID\": \"5634684\",  \n    \"deviceBatteryStatus\": \"Connected\",  \n    \"deviceName\": \"SL1\",  \n    \"deviceID\": \"43\",  \n    \"measurand\": \"6\",  \n    \"deviceSimNumber\": \"6755375727\",  \n    \"deviceModel\": {  \n      \"brandName\": \"abc\",  \n      \"manufacturerName\": \"xyz\",  \n      \"modelName\": \"SL1\",  \n      \"modelURL\": \"www.abcstreetlight.com\"  \n    }  \n  }  \n}  \n```  \n\r#### Streetlight NGSI-LD normalized Example    \n\rHere is an example of a Streetlight in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Streetlight:streetlight:guadalajara:4567\",  \n  \"type\": \"Streetlight\",  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -3.164485591715449,  \n        40.62785133667262  \n      ]  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Roundabouts city entrance\"  \n  },  \n  \"status\": {  \n    \"type\": \"Property\",  \n    \"value\": \"ok\"  \n  },  \n  \"refStreetlightGroup\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:StreetlightGroup:streetlightgroup:G345\"  \n  },  \n  \"refStreetlightModel\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:StreetlightModel:streetlightmodel:STEEL_Tubular_10m\"  \n  },  \n  \"circuit\": {  \n    \"type\": \"Property\",  \n    \"value\": \"C-456-A467\"  \n  },  \n  \"lanternHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"locationCategory\": {  \n    \"type\": \"Property\",  \n    \"value\": \"centralIsland\"  \n  },  \n  \"powerState\": {  \n    \"type\": \"Property\",  \n    \"value\": \"off\"  \n  },  \n  \"controllingMethod\": {  \n    \"type\": \"Property\",  \n    \"value\": \"individual\"  \n  },  \n  \"dateLastLampChange\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2016-07-08T08:02:21.753Z\"  \n    }  \n  },  \n  \"powerConsumption\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"current\": {  \n    \"type\": \"Property\",  \n    \"value\": 250  \n  },  \n  \"powerRating\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"powerFactor\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.7  \n  },  \n  \"voltage\": {  \n    \"type\": \"Property\",  \n    \"value\": 50  \n  },  \n  \"feederPillarNum\": {  \n    \"type\": \"Property\",  \n    \"value\": \"70\"  \n  },  \n  \"streetPoleNum\": {  \n    \"type\": \"Property\",  \n    \"value\": \"2\"  \n  },  \n  \"feederID\": {  \n    \"type\": \"Property\",  \n    \"value\": \"F1\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-01-11T15:51:02+05:30\"  \n    }  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityID\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneID\": \"2\",  \n      \"wardNum\": 4  \n    },  \n    \"deviceInfo\": {  \n      \"type\": \"Property\",  \n      \"value\": {  \n        \"rfID\": \"5634684\",  \n        \"deviceBatteryStatus\": \"Connected\",  \n        \"deviceName\": \"SL1\",  \n        \"deviceID\": \"43\",  \n        \"measurand\": \"6\",  \n        \"deviceSimNumber\": \"6755375727\",  \n        \"deviceModel\": {  \n          \"brandName\": \"abc\",  \n          \"manufacturerName\": \"xyz\",  \n          \"modelName\": \"SL1\",  \n          \"modelURL\": \"www.abcstreetlight.com\"  \n        }  \n      }  \n    }  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"iudx:Streetlight\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: StreetlightFeeder
        - MODEL_DESCRIPTION: A streetlight control panel Data Model.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A streetlight control panel Data Model.,
              mail: null, organization: IUDX, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              StreetlightFeeder of the Subject dataModel.Streetlight.  All fields are non mandatory.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: StreetlightFeeder  \n=========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Streetlighting/blob/master/StreetlightFeeder/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A streetlight control panel Data Model.**  \n\rversion: 0.0.2  \n\n\r## List of properties  \n\n\r- `activePower`: Active power consumed per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `deviceInfo`: Information about the device associated with the observations.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `numStreetlight`: Describes the total number of streetlights connected to the feeder panel corresponding to this observation.  \r- `observationDateTime`: Last reported time of observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `phaseCurrent`: Current per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]  \r- `phaseVoltage`: Voltage per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]  \r- `powerState`: Indicates the current status of the streetlight feeder panel.  \r- `reactivePower`: Reactive power consumed per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `totalActivePower`: Total active power consumed by all phases.  \r- `totalReactivePower`: Total reactive power for all phases.  \r- `type`: NGSI entity type. It has to be StreetlightFeeder  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nStreetlightFeeder:    \n  description: 'A streetlight control panel Data Model.'    \n  properties:    \n    activePower:    \n      description: 'Active power consumed per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]'    \n      items:    \n        minItems: 3    \n        type: number    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    deviceInfo:    \n      description: 'Information about the device associated with the observations.'    \n      properties:    \n        deviceBatteryStatus:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the Battery charging status of the reporting device(Connected, Disconnected).'    \n          type: string    \n        deviceId:    \n          description: 'Property. Model:''https://schema.org/Text''. Device ID of the physical sensor/ measurement station corresponding to this observation.'    \n          type: string    \n        deviceModel:    \n          description: 'Property. Model:''https://schema.org/Text''. Describes the information of the device, sensor or system in consideration.'    \n          properties:    \n            brandName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of the brand associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            manufacturerName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of the manufacturer associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            modelName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of a specific model associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            modelURL:    \n              description: 'Property. Model:''https://schema.org/Text''. URL providing further information of a specific model associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n          type: object    \n        deviceName:    \n          description: 'Property. Model:''https://schema.org/Text''. Device Name or Station name of the sensor device/station corresponding to this observation.'    \n          type: string    \n        deviceSimNumber:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the sim number of the device in the waste management vehicle.'    \n          type: string    \n        measurand:    \n          description: 'Property. Model:''https://schema.org/Text''. Property/properties sensed/observed/measured by the device.'    \n          type: string    \n        rfId:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the ID of the RFID reader.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    id:    \n      anyOf: &streetlightfeeder_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    numStreetlight:    \n      description: 'Describes the total number of streetlights connected to the feeder panel corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *streetlightfeeder_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    phaseCurrent:    \n      description: 'Current per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]'    \n      items:    \n        minItems: 3    \n        type: number    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    phaseVoltage:    \n      description: 'Voltage per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]'    \n      items:    \n        minItems: 3    \n        type: number    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    powerState:    \n      description: 'Indicates the current status of the streetlight feeder panel.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    reactivePower:    \n      description: 'Reactive power consumed per phase. Ordered triple comprising of active power from three phases in the following order: [R Y B]'    \n      items:    \n        minItems: 3    \n        type: number    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    totalActivePower:    \n      description: 'Total active power consumed by all phases.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    totalReactivePower:    \n      description: 'Total reactive power for all phases.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be StreetlightFeeder'    \n      enum:    \n        - StreetlightFeeder    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Streetlighting/blob/master/StreetlightFeeder/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Streetlighting/StreetLightFeeder/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### StreetlightFeeder NGSI-v2 key-values Example    \n\rHere is an example of a StreetlightFeeder in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://smart-data-models.github.io/dataModel.Streetlighting/StreetLightFeeder/schema.json\",  \n  \"type\": \"StreetlightFeeder\",  \n  \"totalActivePower\": 30,  \n  \"phaseCurrent\": [  \n    25,  \n    28,  \n    30  \n  ],  \n  \"reactivePower\": [  \n    25,  \n    28,  \n    30  \n  ],  \n  \"numStreetlight\": 45,  \n  \"phaseVoltage\": [  \n    240,  \n    120,  \n    50  \n  ],  \n  \"totalReactivePower\": 200,  \n  \"activePower\": [  \n    120,  \n    200,  \n    150  \n  ],  \n  \"powerState\": \"ON\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"deviceInfo\": {  \n    \"rfId\": \"5634684\",  \n    \"deviceBatteryStatus\": \"Connected\",  \n    \"deviceName\": \"SL1\",  \n    \"deviceId\": \"43\",  \n    \"measurand\": \"6\",  \n    \"deviceSimNumber\": \"6755375727\",  \n    \"deviceModel\": {  \n      \"brandName\": \"abc\",  \n      \"manufacturerName\": \"xyz\",  \n      \"modelName\": \"SL1\",  \n      \"modelURL\": \"www.abcstreetlight.com\"  \n    }  \n  }  \n}  \n```  \n\r#### StreetlightFeeder NGSI-v2 normalized Example    \n\rHere is an example of a StreetlightFeeder in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://smart-data-models.github.io/dataModel.Streetlighting/StreetLightFeeder/schema.json\",  \n  \"type\": \"StreetlightFeeder\",  \n  \"totalActivePower\": {  \n    \"type\": \"Number\",  \n    \"value\": 30  \n  },  \n  \"phaseCurrent\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      25,  \n      28,  \n      30  \n    ]  \n  },  \n  \"reactivePower\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      25,  \n      28,  \n      30  \n    ]  \n  },  \n  \"numStreetlight\": {  \n    \"type\": \"Number\",  \n    \"value\": 45  \n  },  \n  \"phaseVoltage\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      240,  \n      120,  \n      50  \n    ]  \n  },  \n  \"totalReactivePower\": {  \n    \"type\": \"Number\",  \n    \"value\": 200  \n  },  \n  \"activePower\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      120,  \n      200,  \n      150  \n    ]  \n  },  \n  \"powerState\": {  \n    \"type\": \"Text\",  \n    \"value\": \"ON\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"deviceInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"rfID\": \"5634684\",  \n      \"deviceBatteryStatus\": \"Connected\",  \n      \"deviceName\": \"SL1\",  \n      \"deviceID\": \"43\",  \n      \"measurand\": \"6\",  \n      \"deviceSimNumber\": \"6755375727\",  \n      \"deviceModel\": {  \n        \"brandName\": \"abc\",  \n        \"manufacturerName\": \"xyz\",  \n        \"modelName\": \"SL1\",  \n        \"modelURL\": \"www.abcstreetlight.com\"  \n      }  \n    }  \n  },  \n  \"@context\": [  \n    \"iudx:StreetLightFeeder\",  \n    \"https://smart-data-models.github.io/dataModel.StreetLight/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### StreetlightFeeder NGSI-LD key-values Example    \n\rHere is an example of a StreetlightFeeder in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"https://smart-data-models.github.io/dataModel.Streetlighting/StreetLightFeeder/schema.json\",  \n    \"type\": \"StreetlightFeeder\",  \n    \"activePower\": [  \n        120,  \n        200,  \n        150  \n    ],  \n    \"deviceInfo\": {  \n        \"rfId\": \"5634684\",  \n        \"deviceBatteryStatus\": \"Connected\",  \n        \"deviceName\": \"SL1\",  \n        \"deviceId\": \"43\",  \n        \"measurand\": \"6\",  \n        \"deviceSimNumber\": \"6755375727\",  \n        \"deviceModel\": {  \n            \"brandName\": \"abc\",  \n            \"manufacturerName\": \"xyz\",  \n            \"modelName\": \"SL1\",  \n            \"modelURL\": \"www.abcstreetlight.com\"  \n        }  \n    },  \n    \"numStreetlight\": 45,  \n    \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n    \"phaseCurrent\": [  \n        25,  \n        28,  \n        30  \n    ],  \n    \"phaseVoltage\": [  \n        240,  \n        120,  \n        50  \n    ],  \n    \"powerState\": \"ON\",  \n    \"reactivePower\": [  \n        25,  \n        28,  \n        30  \n    ],  \n    \"totalActivePower\": 30,  \n    \"totalReactivePower\": 200,  \n    \"@context\": [  \n        \"iudx:StreetLightFeeder\",  \n        \"https://smart-data-models.github.io/dataModel.StreetLight/context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Streetlighting/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### StreetlightFeeder NGSI-LD normalized Example    \n\rHere is an example of a StreetlightFeeder in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"https://smart-data-models.github.io/dataModel.Streetlighting/StreetLightFeeder/schema.json\",  \n    \"type\": \"StreetlightFeeder\",  \n    \"activePower\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            120,  \n            200,  \n            150  \n        ]  \n    },  \n    \"deviceInfo\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"rfID\": \"5634684\",  \n            \"deviceBatteryStatus\": \"Connected\",  \n            \"deviceName\": \"SL1\",  \n            \"deviceID\": \"43\",  \n            \"measurand\": \"6\",  \n            \"deviceSimNumber\": \"6755375727\",  \n            \"deviceModel\": {  \n                \"brandName\": \"abc\",  \n                \"manufacturerName\": \"xyz\",  \n                \"modelName\": \"SL1\",  \n                \"modelURL\": \"www.abcstreetlight.com\"  \n            }  \n        }  \n    },  \n    \"numStreetlight\": {  \n        \"type\": \"Property\",  \n        \"value\": 45  \n    },  \n    \"observationDateTime\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2021-03-11T15:51:02+05:30\"  \n        }  \n    },  \n    \"phaseCurrent\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            25,  \n            28,  \n            30  \n        ]  \n    },  \n    \"phaseVoltage\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            240,  \n            120,  \n            50  \n        ]  \n    },  \n    \"powerState\": {  \n        \"type\": \"Property\",  \n        \"value\": \"ON\"  \n    },  \n    \"reactivePower\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            25,  \n            28,  \n            30  \n        ]  \n    },  \n    \"totalActivePower\": {  \n        \"type\": \"Property\",  \n        \"value\": 30  \n    },  \n    \"totalReactivePower\": {  \n        \"type\": \"Property\",  \n        \"value\": 200  \n    },  \n    \"@context\": [  \n        \"iudx:StreetLightFeeder\",  \n        \"https://smart-data-models.github.io/dataModel.StreetLight/context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: Transportation
      MODELS:
        - MODEL_NAME: BikeHireDockingStation
        - MODEL_DESCRIPTION: Bike Hire Docking Station
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A citizen bike hiring system Data Model.,
              mail: null, organization: null, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              BikeHireDockingStation of the Subject Transportation. All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: BikeHireDockingStation  \n==============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/BikeHireDockingStation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Bike Hire Docking Station**  \n\rversion: 0.1.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `agency_fare_url`: URL of a web page that contains the details of the fares and also could allow to purchase tickets for that agency online. SameAs: 'agency_fare_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)   \r- `agency_name`: The agency_name field contains the full name of the transit agency. SameAs: 'agency_name' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `agency_url`: The agency_url field contains the URL of the transit agency. SameAs: 'agency_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `availableBikeNumber`: The number of bikes available in the bike hire docking station to be hired by users  \r- `contactPoint`: The details to contact with the item.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `freeSlotNumber`: The number of slots available for returning and parking bikes. It must lower or equal than `totalSlotNumber`  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `mediaURL`: URL providing further information of any image(s) or media of the complaint or place.  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `openingHours`: Opening hours of the docking station  \r- `outOfServiceSlotNumber`: The number of slots that are out of order and cannot be used to hire or park a bike. It must lower or equal than `totalSlotNumber`  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `provider`: Bike hire service provider  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `stationCode`: The station number or station code of the bike hire docking station corresponding to the observation.  \r- `stationName`: The name of the bike hire docking station corresponding to this observation.  \r- `status`: Status of the bike hire docking station. Enum:'working, outOfService, withIncidence, full, almostFull, empty, almostEmpty'. Or any other application specific.  \r- `totalSlotNumber`: The total number of slots offered by this bike docking station  \r- `type`: NGSI Entity type. It has to be BikeHireDockingStation  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r  \n\rMany cities provide a bike hiring system for citizens. These can hire a bike base on different types of subscriptions. A bike hire docking station where subscribed users can hire and return a bike. It provides data about its main features and availability of bikes and free slots.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBikeHireDockingStation:    \n  description: 'Bike Hire Docking Station'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    agency_fare_url:    \n      description: \"URL of a web page that contains the details of the fares and also could allow to purchase tickets for that agency online. SameAs: 'agency_fare_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt) \"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    agency_name:    \n      description: \"The agency_name field contains the full name of the transit agency. SameAs: 'agency_name' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    agency_url:    \n      description: \"The agency_url field contains the URL of the transit agency. SameAs: 'agency_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    availableBikeNumber:    \n      description: 'The number of bikes available in the bike hire docking station to be hired by users'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    contactPoint:    \n      description: 'The details to contact with the item.'    \n      properties:    \n        contactType:    \n          description: 'Property. Contact type of this item.'    \n          type: string    \n        email:    \n          description: 'Property. Email address of owner.'    \n          format: idn-email    \n          type: string    \n        name:    \n          description: 'Property. The name of this item.'    \n          type: string    \n        telephone:    \n          description: 'Property. Telephone of this contact.'    \n          type: string    \n        url:    \n          description: 'Property. URL which provides a description or further information about this item.'    \n          format: uri    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/ContactPoint    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    freeSlotNumber:    \n      description: 'The number of slots available for returning and parking bikes. It must lower or equal than `totalSlotNumber`'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    id:    \n      anyOf: &bikehiredockingstation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    mediaURL:    \n      description: 'URL providing further information of any image(s) or media of the complaint or place.'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    openingHours:    \n      description: 'Opening hours of the docking station'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/openingHours.    \n        type: Property    \n    outOfServiceSlotNumber:    \n      description: 'The number of slots that are out of order and cannot be used to hire or park a bike. It must lower or equal than `totalSlotNumber`'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *bikehiredockingstation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    provider:    \n      description: 'Bike hire service provider'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/provider.    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stationCode:    \n      description: 'The station number or station code of the bike hire docking station corresponding to the observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    stationName:    \n      description: 'The name of the bike hire docking station corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    status:    \n      description: 'Status of the bike hire docking station. Enum:''working, outOfService, withIncidence, full, almostFull, empty, almostEmpty''. Or any other application specific.'    \n      enum:    \n        - almostEmpty    \n        - almostFull    \n        - empty    \n        - full    \n        - outOfService    \n        - withIncidence    \n        - working    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    totalSlotNumber:    \n      description: 'The total number of slots offered by this bike docking station'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be BikeHireDockingStation'    \n      enum:    \n        - BikeHireDockingStation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.1.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### BikeHireDockingStation NGSI-v2 key-values Example    \n\rHere is an example of a BikeHireDockingStation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Bcn-BikeHireDockingStation-1\",  \n    \"type\": \"BikeHireDockingStation\",  \n    \"status\": \"working\",  \n    \"provider\": \"University of Mumbay\",  \n    \"contactPoint\": {  \n        \"url\": \"uri:ngsi:www.lignesdazur.com\"  \n    },  \n    \"availableBikeNumber\": 20,  \n    \"freeSlotNumber\": 10,  \n    \"openingHours\": \"Mo-Fr 10:00-19:00, Sa 10:00-22:00, Su 10:00-21:00\",  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            2.180042,  \n            41.397952  \n        ]  \n    },  \n    \"address\": {  \n        \"addressCountry\": \"ES\",  \n        \"addressLocality\": \"Barcelona\",  \n        \"streetAddress\": \"Gran Via Corts Catalanes,760\"  \n    },  \n    \"totalSlotNumber\": 100,  \n    \"outOfServiceSlotNumber\": 21,  \n    \"stationName\": \"Pune\",  \n    \"mediaURL\": \"http://pedalsaddle.in/\",  \n    \"agency_url\": \"http://pedalsaddle.in/\",  \n    \"agency_name\": \"PedalSaddle\",  \n    \"stationCode\": \"2\",  \n    \"observationDate\": \"2021-03-11T15:51:02+05:30\",  \n    \"agency_fare_url\": \"\"  \n}  \n```  \n\r#### BikeHireDockingStation NGSI-v2 normalized Example    \n\rHere is an example of a BikeHireDockingStation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Bcn-BikeHireDockingStation-1\",  \n  \"type\": \"BikeHireDockingStation\",  \n  \"status\": {  \n    \"type\": \"Text\",  \n    \"value\": \"working\"  \n  },  \n  \"provider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"University of Mumbay\"  \n  },  \n  \"contactPoint\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"url\": \"uri:ngsi:www.lignesdazur.com\"  \n    }  \n  },  \n  \"availableBikeNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 20  \n  },  \n  \"freeSlotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 10  \n  },  \n  \"openingHours\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Mo-Fr 10:00-19:00, Sa 10:00-22:00, Su 10:00-21:00\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        2.180042,  \n        41.397952  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressCountry\": \"ES\",  \n      \"addressLocality\": \"Barcelona\",  \n      \"streetAddress\": \"Gran Via Corts Catalanes,760\"  \n    }  \n  },  \n  \"totalSlotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 100  \n  },  \n  \"outOfServiceSlotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 21  \n  },  \n  \"stationName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Pune\"  \n  },  \n  \"mediaURL\": {  \n    \"type\": \"Text\",  \n    \"value\": \"http://pedalsaddle.in/\"  \n  },  \n  \"agency_url\": {  \n    \"type\": \"Text\",  \n    \"value\": \"http://pedalsaddle.in/\"  \n  },  \n  \"agency_name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"PedalSaddle\"  \n  },  \n  \"stationCode\": {  \n    \"type\": \"Number\",  \n    \"value\": \"2\"  \n  },  \n  \"observationDate\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"agency_fare_url\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  }  \n}  \n```  \n\r#### BikeHireDockingStation NGSI-LD key-values Example    \n\rHere is an example of a BikeHireDockingStation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Bcn-BikeHireDockingStation-1\",  \n    \"type\": \"BikeHireDockingStation\",  \n    \"status\": \"working\",  \n    \"provider\": \"University of Mumbay\",  \n    \"contactPoint\": {  \n        \"url\": \"uri:ngsi:www.lignesdazur.com\"  \n    },  \n    \"availableBikeNumber\": 20,  \n    \"freeSlotNumber\": 10,  \n    \"openingHours\": \"Mo-Fr 10:00-19:00, Sa 10:00-22:00, Su 10:00-21:00\",  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            2.180042,  \n            41.397952  \n        ]  \n    },  \n    \"address\": {  \n        \"addressCountry\": \"ES\",  \n        \"addressLocality\": \"Barcelona\",  \n        \"streetAddress\": \"Gran Via Corts Catalanes,760\"  \n    },  \n    \"totalSlotNumber\": 100,  \n    \"outOfServiceSlotNumber\": 21,  \n    \"stationName\": \"Pune\",  \n    \"mediaURL\": \"http://pedalsaddle.in/\",  \n    \"agency_url\": \"http://pedalsaddle.in/\",  \n    \"agency_name\": \"PedalSaddle\",  \n    \"stationCode\": \"2\",  \n    \"observationDate\": \"2021-03-11T15:51:02+05:30\",  \n    \"agency_fare_url\": \"\",  \n    \"@context\": [  \n        \"https://smartdatamodels.org/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### BikeHireDockingStation NGSI-LD normalized Example    \n\rHere is an example of a BikeHireDockingStation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Bcn-BikeHireDockingStation-1\",  \n    \"type\": \"BikeHireDockingStation\",  \n    \"status\": {  \n        \"type\": \"Property\",  \n        \"value\": \"working\"  \n    },  \n    \"provider\": {  \n        \"type\": \"Property\",  \n        \"value\": \"University of Mumbay\"  \n    },  \n    \"contactPoint\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"url\": \"uri:ngsi:www.lignesdazur.com\"  \n        }  \n    },  \n    \"availableBikeNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 20  \n    },  \n    \"freeSlotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 10  \n    },  \n    \"openingHours\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Mo-Fr 10:00-19:00, Sa 10:00-22:00, Su 10:00-21:00\"  \n    },  \n    \"location\": {  \n        \"type\": \"Geoproperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates\": [  \n                2.180042,  \n                41.397952  \n            ]  \n        }  \n    },  \n    \"address\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"addressCountry\": \"ES\",  \n            \"addressLocality\": \"Barcelona\",  \n            \"streetAddress\": \"Gran Via Corts Catalanes,760\"  \n        }  \n    },  \n    \"totalSlotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 100  \n    },  \n    \"outOfServiceSlotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 21  \n    },  \n    \"stationName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Pune\"  \n    },  \n    \"mediaURL\": {  \n        \"type\": \"Property\",  \n        \"value\": \"http://pedalsaddle.in/\"  \n    },  \n    \"agency_url\": {  \n        \"type\": \"Property\",  \n        \"value\": \"http://pedalsaddle.in/\"  \n    },  \n    \"agency_name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"PedalSaddle\"  \n    },  \n    \"stationCode\": {  \n        \"type\": \"Property\",  \n        \"value\": \"2\"  \n    },  \n    \"observationDate\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2021-03-11T15:51:02+05:30\"  \n        }  \n    },  \n    \"agency_fare_url\": {  \n        \"type\": \"Property\",  \n        \"value\": \"\"  \n    },  \n    \"@context\": [  \n        \"https://smartdatamodels.org/context.jsonld\"  \n    ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: CityWork
        - MODEL_DESCRIPTION: The Data Model is a contextual description of urban works carried out on a road axis and which can impact individual (Cars, motorcycle, bicycles, .…) or common transport (Tram, Bus, subway). It contains a geographic representation making it possible to locate its work from a specific JSON Object and at a more global level (Road segment, Road, District, ...) in order to assess the potential impacts on the circulation. A GeoJSON object may represent a region of space (a Geometry), a spatially-bounded entity (a Feature), or a list of features (a Feature Collection). refer to the document [geojson](https://tools.ietf.org/pdf/draft-ietf-geojson-03.pdf) for more information about the modeling and the possible value.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              CityWork of the Subject Transportation.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: CityWork  \n================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/CityWork/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The Data Model is a contextual description of urban works carried out on a road axis and which can impact individual (Cars, motorcycle, bicycles, .\u2026) or common transport (Tram, Bus, subway). It contains a geographic representation making it possible to locate its work from a specific JSON Object and at a more global level (Road segment, Road, District, ...) in order to assess the potential impacts on the circulation. A GeoJSON object may represent a region of space (a Geometry), a spatially-bounded entity (a Feature), or a list of features (a Feature Collection). refer to the document [geojson](https://tools.ietf.org/pdf/draft-ietf-geojson-03.pdf) for more information about the modeling and the possible value.**  \n\rversion: 0.4.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `allowedVehicle`: Type of vehicle authorized to circulate. A combination of these values. Enum:'all Vehicle, bicycle, bus, car, companiesTrucks,  emergencyVehicle, firefighters, lorry, motorcycle, police, subway, sweepingMachine, trailer, tramway, trucks, van'  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `busImpacted`: Bus lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of 'lineId / lineName / lineLocation'. Second subproperties, one of 'segmentId / segmentName / segmentLocation'  \r- `contactPoint`: The details to contact with the item.  \r- `contractingAuthority`: Name of the contracting authority  \r- `countOfBusLineImpacted`: Count of Bus Lines impacted by the works  \r- `countOfDerogation`: Count of derogations granted to the work Number  \r- `countOfEventImpacted`: Count of Events impacted by the works  \r- `countOfRailwayLineImpacted`: Count of Railway Lines impacted by the works  \r- `countOfRoadImpacted`: Count of roads impacted by the works  \r- `countOfSchoolBusLineImpacted`: Count of School Bus Lines impacted by the works  \r- `countOfSchoolImpacted`: Count of University, School, or other educational resource impacted by the works  \r- `countOfStationImpacted`: Count of Railway stations impacted by the works  \r- `countOfSubwayLineImpacted`: Count of Subway Lines impacted by the works  \r- `countOfTramwayLineImpacted`: Count of tramway lines impacted by the works  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: A timestamp which denotes the last time when the device successfully reported data. The date and time of this observation in ISO8601 UTCformat  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `decrees`: A List of text where each element is a string with the URL to download or the name of the decree.  \r- `derogation`: Derogation granted for carrying out work on days and times. A structured value from 0 to N occurrences where each items has the following format `derogationType` :  with sub properties 'startDate, endDate, dayOfWeek, comment'  \r- `description`: A description of this item  \r- `encroachment`: Impact of the works on public, private area. A combination of these values. Enum:'other, private, public'  \r- `endDate`: End date and time of the works in an ISO8601 UTC format. The attribute can be used in addition to the `workDate` attribute when it corresponds to a time interval to be highlighted  \r- `eventsImpacted`: List of free text or to the entity [Events](https://github.com/smart-data-models/dataModel.TourismDestinations/blob/master/Event/doc/spec.md) if exist.  \r- `id`: Unique identifier of the entity  \r- `infrastructureFunction`:  Function of the infrastructure impacted by the works. Enum:'collection, distribution, other, transportation'  \r- `isMainRoadImpactedHTR`: Value to indicate whether the main traffic road is impacted. Default false. https://schema.org/Boolean  \r- `isMobile`: Characteristic on the mobility of the works : false for Fixed (default) and true for Mobile  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `mainContractingCompany`: The Main Contracting Company responsible of the works  \r- `maxAuthorizedTonnage`: Roads impacted by the works with Maximum tonnage authorized. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of 'roadId / roadName / roadLocation'. Second subproperties, 'maxTonnage'  \r- `name`: The name of this item.  \r- `openingHoursSpecification`: A structured value providing information about the opening hours of a place or a certain service inside a place  \r- `othersContractingCompany`: A List of Text where each element is a string with the name of the contracting Companies under the responsibility of the main Contracting Company.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `railwayImpacted`: Rail lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of 'lineId / lineName / lineLocation'. Second subproperties, one of 'segmentId / segmentName / segmentLocation'  \r- `roadImpacted`: Roads impacted by the works and the details of the roads concerned by the work. A structured value from 0 to N occurrences where each items is a string in the format : 'roadImpact':[List of Segment Impacted or Free Text or geo-property, separated by a comma]. If `isMainRoadImpactedHTR` = true, The first item is this one.  \r- `roadImpactedMT`: A list of roads defined as Major Traffic, impacted by the works. Values are also included in the roadImpacted attribute.  \r- `roadImpactedSA`: A list of roads defined as sensitive areas, impacted by the works. Values are also included in the roadImpacted attribute.  \r- `schoolBusImpacted`: Scholl Bus lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of 'lineId / lineName / lineLocation'. Second subproperties, one of 'segmentId / segmentName / segmentLocation'  \r- `schoolImpacted`: List of free text or a Reference to an entity [SCHOOL] if exist.   \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `startDate`: Start date and time of the works in an ISO8601 UTC format. The attribute can be used in addition to the `workDate` attribute when it corresponds to a time interval to be highlighted  \r- `stationImpacted`: Station Impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, 'stationType'. Second subproperties, one of 'stationId / stationName / stationLocation'  \r- `subwayImpacted`: Subway lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of 'lineId / lineName / lineLocation'. Second subproperties, one of 'segmentId / segmentName / segmentLocation'  \r- `territorialArea`: Territorial area. Level higher to the attribute 'areaServed'. A list of Free Text  \r- `tramwayImpacted`: Tramway Line impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of 'lineId / lineName / lineLocation'. Second subproperties, one of 'segmentId / segmentName / segmentLocation'  \r- `type`: NGSI Entity type. It has to be CityWork  \r- `typeOfInterventionRequest`: Initial type of request to do the works. Enum:'authorizationRequest,  interventionNotice,  other,  urgentWorks'  \r- `workDate`: Date and time (Day or period) of the works. It can be represented by an specific time string  \r- `workDisposition`: Specific rules taken for the works. A structured value from 0 to N occurrences where each items has the following format : `Disposition`: with sub properties  `startDate`, `endDate`,  `dayOfWeek`, `comment`. Enum:'alternatingLights , bicyclePathClosure, bicyclePathDeviation, bicyclePathReduction, circulationManualControl, laneClosure, laneDeviation, laneReduction, noRestriction, parkingForbidden, parkingModification, sidewalkClosure, sidewalkClosureOrReduction, sidewalkReduction, speedReduction'  \r- `workLastDateUpdate`: Last date for updating a contractual element of the work  \r- `workLevel`: Positioning of the works in relation to a ground reference system. A combination of these elements. Enum:'aerial, ground, mixed, other, roofing, surface, underground, wall'  \r- `workNature`: Nature of the works. A combination of these values.Enum:'additionalInvestigations, brushCutting, cleaning, collection, connection, consolidation, construction, control, counting, craneLifting, creation, demolition, drivingSwitch, experimentation, extension, filmShooting, Installation-OR-layout, investigation, landFill, maintenance, manholeOpening, ManholeOpeningToRestoreService, miscellaneousInstallation, miscellaneousWorks, mowingDeburring, other, overheadLinesWorksIntervention, pruning, pulling, refurbishment, rehabilitation, reinforcement, renewal, renovation, repair, replacement, riprap, roadSign, safetyAndComplianceWork, safetyRailsInstallation, securingPerimeter, siteInstallation, staking, supportImplantation, surfaceOccupationAuthorization, survey, tarring, tonnageExemption, treeCutting, trenchOpening, upgrading'  \r- `workNumber`: Number assigned to the work  \r- `workOtherImpact`: Other impact. A list of free values  \r- `workReason`: Reasons of the works in case of urgent intervention. A combination of these values. Enum:'collapse, derailment, fire, flood, gasLeak, landslide, other, powerCut, rockfall, sagging, waterLeak'  \r- `workState`: Number assigned to the work. Enum:'all, approved, authorized, canceled, completed, decreeToBeSigned, draft, editedDecrees, instructionInProgress, investigated, nonCompliantOccupation, open, pendingAuthorization, pendingCancellation, planningCompleted, pendingDocument, pendingExtension, pendingPlanning, planned, received, reject, supported, validatedInPlanning'  \r- `workTarget`: Categories of works regarding the different profession. A combination of these elements. Enum:'bicyclePath, busCorridor, catainers, cityMotorBike, cityBike, cityCar, cityScooter, coldAndAirCon, coldGroup, copperCable, CoringPenetrometry, drinkingWater, electricityNetworks, exploratoryWork, fireHydrants, frameRoof, gasNetworks, generator, historicalMonuments, infrastructure, landscapedArea, movingHoistNacelleTruck, networks, offStreetParking, opticalFibers, other, overheadLine, papersCollection, pavement, publicDecorativeLighting, publicDomain, publicTransport, railway, rainyWaters, riprap, rMTNetworks, roads, roadsAndPublicDomain, sanitation, scaffolding, sideWalk, speedReductionDevices, streetParking, surfaceOccupation, supportStructures, tagsAndPosters, telecomNetworks, telecom-RMT-VideoNetworks, trafficSignalingRegulation, tramway, urbanFurniture, urbanHeating, variousWorks, videoNetworks, vrd'  \r- `workZone`: Zone of Works. A combination of these values. Enum:' airport, beach, bicyclePath, bridge, busCorridor, dock, floodArea, harbor, heliport, mountainousArea, offRoad, other, parking, parksGardens, path, protectArea, railwayLine, riskArea, river, road, rockyArea, sevesoArea, sideWalk, subwayLine, tramwayLine, tunnel'  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nCityWork:    \n  description: 'The Data Model is a contextual description of urban works carried out on a road axis and which can impact individual (Cars, motorcycle, bicycles, .\u2026) or common transport (Tram, Bus, subway). It contains a geographic representation making it possible to locate its work from a specific JSON Object and at a more global level (Road segment, Road, District, ...) in order to assess the potential impacts on the circulation. A GeoJSON object may represent a region of space (a Geometry), a spatially-bounded entity (a Feature), or a list of features (a Feature Collection). refer to the document [geojson](https://tools.ietf.org/pdf/draft-ietf-geojson-03.pdf) for more information about the modeling and the possible value.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    allowedVehicle:    \n      description: 'Type of vehicle authorized to circulate. A combination of these values. Enum:''all Vehicle, bicycle, bus, car, companiesTrucks,  emergencyVehicle, firefighters, lorry, motorcycle, police, subway, sweepingMachine, trailer, tramway, trucks, van'''    \n      items:    \n        enum:    \n          - allVehicle    \n          - bicycle    \n          - bus    \n          - car    \n          - companiesTrucks    \n          - emergencyVehicle    \n          - firefighters    \n          - lorry    \n          - motorcycle    \n          - police    \n          - subway    \n          - sweepingMachine    \n          - trailer    \n          - tramway    \n          - trucks    \n          - van    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    busImpacted:    \n      description: 'Bus lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of ''lineId / lineName / lineLocation''. Second subproperties, one of ''segmentId / segmentName / segmentLocation'''    \n      items:    \n        properties:    \n          lineId:    \n            anyOf: &citywork_-_properties_-_id_-_anyof    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                format: uri    \n                type: string    \n            description: 'Property. Unique identifier of the entity'    \n          lineLocation:    \n            description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n            oneOf: &citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n              - description: 'Geoproperty. Geojson reference to the item. Point'    \n                properties:    \n                  bbox:    \n                    items:    \n                      type: number    \n                    minItems: 4    \n                    type: array    \n                  coordinates:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  type:    \n                    enum:    \n                      - Point    \n                    type: string    \n                required:    \n                  - type    \n                  - coordinates    \n                title: 'GeoJSON Point'    \n                type: object    \n              - description: 'Geoproperty. Geojson reference to the item. LineString'    \n                properties:    \n                  bbox:    \n                    items:    \n                      type: number    \n                    minItems: 4    \n                    type: array    \n                  coordinates:    \n                    items:    \n                      items:    \n                        type: number    \n                      minItems: 2    \n                      type: array    \n                    minItems: 2    \n                    type: array    \n                  type:    \n                    enum:    \n                      - LineString    \n                    type: string    \n                required:    \n                  - type    \n                  - coordinates    \n                title: 'GeoJSON LineString'    \n                type: object    \n              - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n                properties:    \n                  bbox:    \n                    items:    \n                      type: number    \n                    minItems: 4    \n                    type: array    \n                  coordinates:    \n                    items:    \n                      items:    \n                        items:    \n                          type: number    \n                        minItems: 2    \n                        type: array    \n                      minItems: 4    \n                      type: array    \n                    type: array    \n                  type:    \n                    enum:    \n                      - Polygon    \n                    type: string    \n                required:    \n                  - type    \n                  - coordinates    \n                title: 'GeoJSON Polygon'    \n                type: object    \n              - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n                properties:    \n                  bbox:    \n                    items:    \n                      type: number    \n                    minItems: 4    \n                    type: array    \n                  coordinates:    \n                    items:    \n                      items:    \n                        type: number    \n                      minItems: 2    \n                      type: array    \n                    type: array    \n                  type:    \n                    enum:    \n                      - MultiPoint    \n                    type: string    \n                required:    \n                  - type    \n                  - coordinates    \n                title: 'GeoJSON MultiPoint'    \n                type: object    \n              - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n                properties:    \n                  bbox:    \n                    items:    \n                      type: number    \n                    minItems: 4    \n                    type: array    \n                  coordinates:    \n                    items:    \n                      items:    \n                        items:    \n                          type: number    \n                        minItems: 2    \n                        type: array    \n                      minItems: 2    \n                      type: array    \n                    type: array    \n                  type:    \n                    enum:    \n                      - MultiLineString    \n                    type: string    \n                required:    \n                  - type    \n                  - coordinates    \n                title: 'GeoJSON MultiLineString'    \n                type: object    \n              - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n                properties:    \n                  bbox:    \n                    items:    \n                      type: number    \n                    minItems: 4    \n                    type: array    \n                  coordinates:    \n                    items:    \n                      items:    \n                        items:    \n                          items:    \n                            type: number    \n                          minItems: 2    \n                          type: array    \n                        minItems: 4    \n                        type: array    \n                      type: array    \n                    type: array    \n                  type:    \n                    enum:    \n                      - MultiPolygon    \n                    type: string    \n                required:    \n                  - type    \n                  - coordinates    \n                title: 'GeoJSON MultiPolygon'    \n                type: object    \n          lineName:    \n            type: string    \n          segmentId:    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentLocation:    \n            description: 'Geoproperty. Segment Location of the bus impacted'    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentName:    \n            description: 'Property. Segment Name.'    \n            items:    \n              type: string    \n            type: array    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    contactPoint:    \n      description: 'The details to contact with the item.'    \n      properties:    \n        areaServed:    \n          description: 'Property. The geographic area where a service or offered item is provided. Supersedes serviceArea.'    \n          type: string    \n        availabilityRestriction:    \n          anyOf:    \n            - description: 'Property. Array of identifiers format of any NGSI entity.'    \n              items:    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              type: array    \n            - description: 'Property. Array of identifiers format of any NGSI entity.'    \n              items:    \n                format: uri    \n                type: string    \n              type: array    \n          description: 'Relationship. Model:''http://schema.org/hoursAvailable''. This property links a contact point to information about when the contact point is not available. The details are provided using the Opening Hours Specification class.'    \n        availableLanguage:    \n          anyOf:    \n            - anyOf:    \n                - type: string    \n                - items:    \n                    type: string    \n                  type: array    \n          description: 'Property. Model:''http://schema.org/availableLanguage''. A language someone may use with or at the item, service or place. Please use one of the language codes from the IETF BCP 47 standard. It is implemented the Text option but it could be also Language'    \n        contactOption:    \n          anyOf:    \n            - type: string    \n            - items:    \n                type: string    \n              type: array    \n          description: 'Property. Model:''http://schema.org/contactOption''. An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).'    \n        contactType:    \n          description: 'Property. Contact type of this item.'    \n          type: string    \n        email:    \n          description: 'Property. Email address of owner.'    \n          format: idn-email    \n          type: string    \n        faxNumber:    \n          description: 'Property. Model:''http://schema.org/Text''. The fax number.'    \n          type: string    \n        name:    \n          description: 'Property. The name of this item.'    \n          type: string    \n        productSupported:    \n          description: 'Property. Model:''http://schema.org/Text''. The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. \"iPhone\") or a general category of products or services (e.g. \"smartphones\").'    \n          type: string    \n        telephone:    \n          description: 'Property. Telephone of this contact.'    \n          type: string    \n        url:    \n          description: 'Property. URL which provides a description or further information about this item.'    \n          format: uri    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/ContactPoint    \n        type: Property    \n    contractingAuthority:    \n      description: 'Name of the contracting authority'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    countOfBusLineImpacted:    \n      description: 'Count of Bus Lines impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfDerogation:    \n      description: 'Count of derogations granted to the work Number'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/number    \n        type: Property    \n    countOfEventImpacted:    \n      description: 'Count of Events impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfRailwayLineImpacted:    \n      description: 'Count of Railway Lines impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfRoadImpacted:    \n      description: 'Count of roads impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfSchoolBusLineImpacted:    \n      description: 'Count of School Bus Lines impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfSchoolImpacted:    \n      description: 'Count of University, School, or other educational resource impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfStationImpacted:    \n      description: 'Count of Railway stations impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfSubwayLineImpacted:    \n      description: 'Count of Subway Lines impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    countOfTramwayLineImpacted:    \n      description: 'Count of tramway lines impacted by the works'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'A timestamp which denotes the last time when the device successfully reported data. The date and time of this observation in ISO8601 UTCformat'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    decrees:    \n      description: 'A List of text where each element is a string with the URL to download or the name of the decree.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    derogation:    \n      description: 'Derogation granted for carrying out work on days and times. A structured value from 0 to N occurrences where each items has the following format `derogationType` :  with sub properties ''startDate, endDate, dayOfWeek, comment'''    \n      items:    \n        properties:    \n          comment:    \n            type: string    \n          dayOfWeek:    \n            items:    \n              enum:    \n                - Monday    \n                - Tuesday    \n                - Wednesday    \n                - Thursday    \n                - Friday    \n                - Saturday    \n                - Sunday    \n                - PublicHolidays    \n              type: string    \n            type: array    \n          derogationType:    \n            type: string    \n          endDate:    \n            format: date-time    \n            type: string    \n          startDate:    \n            format: date-time    \n            type: string    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    encroachment:    \n      description: 'Impact of the works on public, private area. A combination of these values. Enum:''other, private, public'''    \n      items:    \n        enum:    \n          - other    \n          - private    \n          - public    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    endDate:    \n      description: 'End date and time of the works in an ISO8601 UTC format. The attribute can be used in addition to the `workDate` attribute when it corresponds to a time interval to be highlighted'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    eventsImpacted:    \n      description: 'List of free text or to the entity [Events](https://github.com/smart-data-models/dataModel.TourismDestinations/blob/master/Event/doc/spec.md) if exist.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: *citywork_-_properties_-_id_-_anyof    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    infrastructureFunction:    \n      description: ' Function of the infrastructure impacted by the works. Enum:''collection, distribution, other, transportation'''    \n      items:    \n        enum:    \n          - collection    \n          - distribution    \n          - other    \n          - transportation    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    isMainRoadImpactedHTR:    \n      description: 'Value to indicate whether the main traffic road is impacted. Default false. https://schema.org/Boolean'    \n      type: boolean    \n      x-ngsi:    \n        type: Property    \n    isMobile:    \n      description: 'Characteristic on the mobility of the works : false for Fixed (default) and true for Mobile'    \n      type: boolean    \n      x-ngsi:    \n        model: https://schema.org/Boolean    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n      x-ngsi:    \n        type: Geoproperty    \n    mainContractingCompany:    \n      description: 'The Main Contracting Company responsible of the works'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    maxAuthorizedTonnage:    \n      description: 'Roads impacted by the works with Maximum tonnage authorized. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of ''roadId / roadName / roadLocation''. Second subproperties, ''maxTonnage'''    \n      items:    \n        properties:    \n          maxTonnage:    \n            description: 'Property. Maximum tonnage authorized for the road. The unit code (text) **TNE** which represents Tonne Metric.'    \n            type: number    \n          roadId:    \n            anyOf: *citywork_-_properties_-_id_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n          roadImpacted:    \n            type: string    \n          roadLocation:    \n            description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n            oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n          roadName:    \n            description: 'Property. Road Name'    \n            type: string    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    openingHoursSpecification:    \n      description: 'A structured value providing information about the opening hours of a place or a certain service inside a place'    \n      items:    \n        properties:    \n          closes:    \n            format: time    \n            type: string    \n          dayOfWeek:    \n            anyOf:    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - Monday    \n                  - Tuesday    \n                  - Wednesday    \n                  - Thursday    \n                  - Friday    \n                  - Saturday    \n                  - Sunday    \n                  - PublicHolidays    \n                type: string    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - https://schema.org/Monday    \n                  - https://schema.org/Tuesday    \n                  - https://schema.org/Wednesday    \n                  - https://schema.org/Thursday    \n                  - https://schema.org/Friday    \n                  - https://schema.org/Saturday    \n                  - https://schema.org/Sunday    \n                  - https://schema.org/PublicHolidays    \n                type: string    \n            description: 'Property. Model:''http://schema.org/dayOfWeek''. The day of the week for which these opening hours are valid. URLs from GoodRelations (http://purl.org/goodrelations/v1) are used (for Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday plus a special entry for PublicHolidays).'    \n            type: string    \n          opens:    \n            format: time    \n            type: string    \n          validFrom:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date when the item becomes valid. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n          validThrough:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n            type: string    \n        type: object    \n      minItems: 1    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/openingHoursSpecification    \n        type: Property    \n    othersContractingCompany:    \n      description: 'A List of Text where each element is a string with the name of the contracting Companies under the responsibility of the main Contracting Company.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *citywork_-_properties_-_id_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    railwayImpacted:    \n      description: 'Rail lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of ''lineId / lineName / lineLocation''. Second subproperties, one of ''segmentId / segmentName / segmentLocation'''    \n      items:    \n        properties:    \n          lineId:    \n            anyOf: *citywork_-_properties_-_id_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n          lineLocation:    \n            description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n            oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n          lineName:    \n            type: string    \n          segmentId:    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentLocation:    \n            description: 'Geoproperty. Segment Location of the railwayImpacted'    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentName:    \n            description: 'Property. Segment Name.'    \n            items:    \n              type: string    \n            type: array    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    roadImpacted:    \n      description: 'Roads impacted by the works and the details of the roads concerned by the work. A structured value from 0 to N occurrences where each items is a string in the format : ''roadImpact'':[List of Segment Impacted or Free Text or geo-property, separated by a comma]. If `isMainRoadImpactedHTR` = true, The first item is this one.'    \n      items:    \n        properties:    \n          roadId:    \n            anyOf: *citywork_-_properties_-_id_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n          roadLocation:    \n            description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n            oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n          roadName:    \n            description: 'Property. Road Name'    \n            type: string    \n          segmentId:    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentLocation:    \n            description: 'Geoproperty. Segment Location of the road impacted.'    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentName:    \n            description: 'Property. Segment Name.'    \n            items:    \n              type: string    \n            type: array    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    roadImpactedMT:    \n      description: 'A list of roads defined as Major Traffic, impacted by the works. Values are also included in the roadImpacted attribute.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    roadImpactedSA:    \n      description: 'A list of roads defined as sensitive areas, impacted by the works. Values are also included in the roadImpacted attribute.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    schoolBusImpacted:    \n      description: 'Scholl Bus lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of ''lineId / lineName / lineLocation''. Second subproperties, one of ''segmentId / segmentName / segmentLocation'''    \n      items:    \n        properties:    \n          lineId:    \n            anyOf: *citywork_-_properties_-_id_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n          lineLocation:    \n            description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n            oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n          lineName:    \n            type: string    \n          segmentId:    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentLocation:    \n            description: 'Geoproperty. Segment Location of the school Bus Impacted'    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentName:    \n            description: 'Property. Segment Name.'    \n            items:    \n              type: string    \n            type: array    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    schoolImpacted:    \n      description: 'List of free text or a Reference to an entity [SCHOOL] if exist. '    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    startDate:    \n      description: 'Start date and time of the works in an ISO8601 UTC format. The attribute can be used in addition to the `workDate` attribute when it corresponds to a time interval to be highlighted'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    stationImpacted:    \n      description: 'Station Impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, ''stationType''. Second subproperties, one of ''stationId / stationName / stationLocation'''    \n      items:    \n        properties:    \n          stationId:    \n            description: 'Property. List of free text or reference to the entity [TransportStation](https://github.com/smart-data-models/dataModel.Transportation/blob/master/TransportStation/doc/spec.md) if used.'    \n            items:    \n              anyOf: *citywork_-_properties_-_id_-_anyof    \n              description: 'Property. Unique identifier of the entity'    \n            type: array    \n          stationLocation:    \n            description: 'Geoproperty. Station Location of the stationImpacted.'    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          stationName:    \n            description: 'Property. Station Name.'    \n            items:    \n              type: string    \n            type: array    \n          stationType:    \n            description: \"Property. A unique value of free text or from the urban transport Mode GFTS standard [STOP](https://developers.google.com/transit/gtfs/reference/#stopstxt). Enum:'aerialLift, bus, cableTram, ferry, funicular, monorail, rail, subway, tram, trolleybus'\"    \n            enum:    \n              - aerialLift    \n              - bus    \n              - cableTram    \n              - ferry    \n              - funicular    \n              - monorail    \n              - rail    \n              - subway    \n              - tram    \n              - trolleybus    \n            type: string    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    subwayImpacted:    \n      description: 'Subway lines impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of ''lineId / lineName / lineLocation''. Second subproperties, one of ''segmentId / segmentName / segmentLocation'''    \n      items:    \n        properties:    \n          lineId:    \n            anyOf: *citywork_-_properties_-_id_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n          lineLocation:    \n            description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n            oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n          lineName:    \n            type: string    \n          segmentId:    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentLocation:    \n            description: 'Geoproperty. Segment Location of the subwayImpacted'    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentName:    \n            items:    \n              type: string    \n            type: array    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    territorialArea:    \n      description: 'Territorial area. Level higher to the attribute ''areaServed''. A list of Free Text'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    tramwayImpacted:    \n      description: 'Tramway Line impacted by the works. A structured value from 0 to N occurrences with 2 subproperties per item. First subproperties, one of ''lineId / lineName / lineLocation''. Second subproperties, one of ''segmentId / segmentName / segmentLocation'''    \n      items:    \n        properties:    \n          lineId:    \n            anyOf: *citywork_-_properties_-_id_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n          lineLocation:    \n            description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n            oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n          lineName:    \n            description: 'Property. Line Name.'    \n            type: string    \n          segmentId:    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentLocation:    \n            description: 'Geoproperty. Segment Location of the tramwayImpacted'    \n            items:    \n              description: 'Geoproperty. Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n              oneOf: *citywork_-_properties_-_busimpacted_-_items_-_properties_-_segmentid_-_items_-_oneof    \n            type: array    \n          segmentName:    \n            items:    \n              type: string    \n            type: array    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be CityWork'    \n      enum:    \n        - CityWork    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    typeOfInterventionRequest:    \n      description: 'Initial type of request to do the works. Enum:''authorizationRequest,  interventionNotice,  other,  urgentWorks'''    \n      enum:    \n        - authorizationRequest    \n        - interventionNotice    \n        - other    \n        - urgentWorks    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    workDate:    \n      description: 'Date and time (Day or period) of the works. It can be represented by an specific time string'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    workDisposition:    \n      description: 'Specific rules taken for the works. A structured value from 0 to N occurrences where each items has the following format : `Disposition`: with sub properties  `startDate`, `endDate`,  `dayOfWeek`, `comment`. Enum:''alternatingLights , bicyclePathClosure, bicyclePathDeviation, bicyclePathReduction, circulationManualControl, laneClosure, laneDeviation, laneReduction, noRestriction, parkingForbidden, parkingModification, sidewalkClosure, sidewalkClosureOrReduction, sidewalkReduction, speedReduction'''    \n      items:    \n        properties:    \n          comment:    \n            type: string    \n          dayOfWeek:    \n            items:    \n              enum:    \n                - Monday    \n                - Tuesday    \n                - Wednesday    \n                - Thursday    \n                - Friday    \n                - Saturday    \n                - Sunday    \n                - PublicHolidays    \n              type: string    \n            type: array    \n          disposition:    \n            enum:    \n              - alternatingLights    \n              - bicyclePathClosure    \n              - bicyclePathDeviation    \n              - bicyclePathReduction    \n              - circulationManualControl    \n              - laneClosure    \n              - laneDeviation    \n              - laneReduction    \n              - noRestriction    \n              - parkingForbidden    \n              - parkingModification    \n              - sidewalkClosure    \n              - sidewalkClosureOrReduction    \n              - sidewalkReduction    \n              - speedReduction    \n              - workOtherImpact    \n            type: string    \n          endDate:    \n            format: date-time    \n            type: string    \n          startDate:    \n            format: date-time    \n            type: string    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    workLastDateUpdate:    \n      description: 'Last date for updating a contractual element of the work'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    workLevel:    \n      description: 'Positioning of the works in relation to a ground reference system. A combination of these elements. Enum:''aerial, ground, mixed, other, roofing, surface, underground, wall'''    \n      items:    \n        enum:    \n          - aerial    \n          - ground    \n          - mixed    \n          - other    \n          - roofing    \n          - surface    \n          - underground    \n          - wall    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    workNature:    \n      description: 'Nature of the works. A combination of these values.Enum:''additionalInvestigations, brushCutting, cleaning, collection, connection, consolidation, construction, control, counting, craneLifting, creation, demolition, drivingSwitch, experimentation, extension, filmShooting, Installation-OR-layout, investigation, landFill, maintenance, manholeOpening, ManholeOpeningToRestoreService, miscellaneousInstallation, miscellaneousWorks, mowingDeburring, other, overheadLinesWorksIntervention, pruning, pulling, refurbishment, rehabilitation, reinforcement, renewal, renovation, repair, replacement, riprap, roadSign, safetyAndComplianceWork, safetyRailsInstallation, securingPerimeter, siteInstallation, staking, supportImplantation, surfaceOccupationAuthorization, survey, tarring, tonnageExemption, treeCutting, trenchOpening, upgrading'''    \n      items:    \n        enum:    \n          - additionalInvestigations    \n          - brushCutting    \n          - cleaning    \n          - collection    \n          - connection    \n          - consolidation    \n          - construction    \n          - control    \n          - counting    \n          - craneLifting    \n          - creation    \n          - demolition    \n          - drivingSwitch    \n          - experimentation    \n          - extension    \n          - filmShooting    \n          - Installation-OR-layout    \n          - investigation    \n          - landFill    \n          - maintenance    \n          - manholeOpening    \n          - ManholeOpeningToRestoreService    \n          - miscellaneousInstallation    \n          - miscellaneousWorks    \n          - mowingDeburring    \n          - other    \n          - overheadLinesWorksIntervention    \n          - pruning    \n          - pulling    \n          - refurbishment    \n          - rehabilitation    \n          - reinforcement    \n          - renewal    \n          - renovation    \n          - repair    \n          - replacement    \n          - riprap    \n          - roadSign    \n          - safetyAndComplianceWork    \n          - safetyRailsInstallation    \n          - securingPerimeter    \n          - siteInstallation    \n          - staking    \n          - supportImplantation    \n          - surfaceOccupationAuthorization    \n          - survey    \n          - tarring    \n          - tonnageExemption    \n          - treeCutting    \n          - trenchOpening    \n          - upgrading    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    workNumber:    \n      description: 'Number assigned to the work'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    workOtherImpact:    \n      description: 'Other impact. A list of free values'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    workReason:    \n      description: 'Reasons of the works in case of urgent intervention. A combination of these values. Enum:''collapse, derailment, fire, flood, gasLeak, landslide, other, powerCut, rockfall, sagging, waterLeak'''    \n      items:    \n        enum:    \n          - collapse    \n          - derailment    \n          - fire    \n          - flood    \n          - gasLeak    \n          - landslide    \n          - other    \n          - powerCut    \n          - rockfall    \n          - sagging    \n          - waterLeak    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    workState:    \n      description: 'Number assigned to the work. Enum:''all, approved, authorized, canceled, completed, decreeToBeSigned, draft, editedDecrees, instructionInProgress, investigated, nonCompliantOccupation, open, pendingAuthorization, pendingCancellation, planningCompleted, pendingDocument, pendingExtension, pendingPlanning, planned, received, reject, supported, validatedInPlanning'''    \n      enum:    \n        - all    \n        - approved    \n        - authorized    \n        - canceled    \n        - completed    \n        - decreeToBeSigned    \n        - draft    \n        - editedDecrees    \n        - instructionInProgress    \n        - investigated    \n        - nonCompliantOccupation    \n        - open    \n        - other    \n        - pendingAuthorization    \n        - pendingCancellation    \n        - planningCompleted    \n        - pendingDocument    \n        - pendingExtension    \n        - pendingPlanning    \n        - planned    \n        - received    \n        - reject    \n        - supported    \n        - validatedInPlanning    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    workTarget:    \n      description: 'Categories of works regarding the different profession. A combination of these elements. Enum:''bicyclePath, busCorridor, catainers, cityMotorBike, cityBike, cityCar, cityScooter, coldAndAirCon, coldGroup, copperCable, CoringPenetrometry, drinkingWater, electricityNetworks, exploratoryWork, fireHydrants, frameRoof, gasNetworks, generator, historicalMonuments, infrastructure, landscapedArea, movingHoistNacelleTruck, networks, offStreetParking, opticalFibers, other, overheadLine, papersCollection, pavement, publicDecorativeLighting, publicDomain, publicTransport, railway, rainyWaters, riprap, rMTNetworks, roads, roadsAndPublicDomain, sanitation, scaffolding, sideWalk, speedReductionDevices, streetParking, surfaceOccupation, supportStructures, tagsAndPosters, telecomNetworks, telecom-RMT-VideoNetworks, trafficSignalingRegulation, tramway, urbanFurniture, urbanHeating, variousWorks, videoNetworks, vrd'''    \n      items:    \n        enum:    \n          - bicyclePath    \n          - busCorridor    \n          - catainers    \n          - cityMotorBike    \n          - cityBike    \n          - cityCar    \n          - cityScooter    \n          - coldAndAirCon    \n          - coldGroup    \n          - copperCable    \n          - CoringPenetrometry    \n          - drinkingWater    \n          - electricityNetworks    \n          - exploratoryWork    \n          - fireHydrants    \n          - frameRoof    \n          - gasNetworks    \n          - generator    \n          - historicalMonuments    \n          - infrastructure    \n          - landscapedArea    \n          - movingHoistNacelleTruck    \n          - networks    \n          - offStreetParking    \n          - opticalFibers    \n          - other    \n          - overheadLine    \n          - papersCollection    \n          - pavement    \n          - publicDecorativeLighting    \n          - publicDomain    \n          - publicTransport    \n          - railway    \n          - rainyWaters    \n          - riprap    \n          - rMTNetworks    \n          - roads    \n          - roadsAndPublicDomain    \n          - sanitation    \n          - scaffolding    \n          - sideWalk    \n          - speedReductionDevices    \n          - streetParking    \n          - surfaceOccupation    \n          - supportStructures    \n          - tagsAndPosters    \n          - telecomNetworks    \n          - telecom-RMT-VideoNetworks    \n          - trafficSignalingRegulation    \n          - tramway    \n          - urbanFurniture    \n          - urbanHeating    \n          - variousWorks    \n          - videoNetworks    \n          - vrd    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    workZone:    \n      description: 'Zone of Works. A combination of these values. Enum:'' airport, beach, bicyclePath, bridge, busCorridor, dock, floodArea, harbor, heliport, mountainousArea, offRoad, other, parking, parksGardens, path, protectArea, railwayLine, riskArea, river, road, rockyArea, sevesoArea, sideWalk, subwayLine, tramwayLine, tunnel'''    \n      items:    \n        enum:    \n          - airport    \n          - beach    \n          - bicyclePath    \n          - bridge    \n          - busCorridor    \n          - dock    \n          - floodArea    \n          - harbor    \n          - heliport    \n          - mountainousArea    \n          - offRoad    \n          - other    \n          - parking    \n          - parksGardens    \n          - path    \n          - protectArea    \n          - railwayLine    \n          - riskArea    \n          - river    \n          - road    \n          - rockyArea    \n          - sevesoArea    \n          - sideWalk    \n          - subwayLine    \n          - tramwayLine    \n          - tunnel    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Transportation/blob/master/CityWork/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Transportation/CityWork/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.4.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### CityWork NGSI-v2 key-values Example    \n\rHere is an example of a CityWork in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CityWork:CityWork:MNCA-CW-2020Q2-006\",  \n  \"type\": \"CityWork\",  \n  \"name\": \"Nce-Airport-CW2020Q2-006\",  \n  \"alternateName\": \"AirPort global Observation\",  \n  \"description\": \"Widening work on access roads and installation of a new electrical and digital network for the connection of T1 & T2 terminals\",  \n  \"location\": {  \n    \"type\": \"Polygon\",  \n    \"coordinates\": [  \n      [  \n        43.20315,  \n        7.20186  \n      ],  \n      [  \n        43.20384,  \n        7.20372  \n      ],  \n      [  \n        43.20388,  \n        7.20493  \n      ],  \n      [  \n        43.19938,  \n        7.20312  \n      ],  \n      [  \n        43.20045,  \n        7.20152  \n      ],  \n      [  \n        43.20315,  \n        7.20186  \n      ]  \n    ]  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"territorialArea\": \"subwaypole Nice\",  \n  \"dateLastReported\": \"2020-04-02T10:30:00Z\",  \n  \"workNumber\": \"CW2020Q2-006\",  \n  \"workState\": \"open\",  \n  \"workDate\": \"2020-03-17T08:45:00Z/2020-04-22T18:45:00Z\",  \n  \"startDate\": \"2020-03-17T08:45:00Z\",  \n  \"endDate\": \"2020-04-22T18:45:00Z\",  \n  \"openingHoursSpecification\": [  \n    {  \n      \"dayOfWeek\": \"Monday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Tuesday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Wednesday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Thursday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Friday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"20:00:00\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Saturday\",  \n      \"opens\": \"08:30:00\",  \n      \"closes\": \"17:00:00\"  \n    }  \n  ],  \n  \"contractingAuthority\": \"MNCA - subwaypole Nice Cote d'Azur\",  \n  \"contactPoint\": {  \n    \"name\": \"Service des AO\"  \n  },  \n  \"decrees\": [  \n    \"https://MNCA/CityWork/Decree/CW-2020Q2-006\",  \n    \"CW-2020Q2-006\",  \n    \"CW-2020Q2-006-Av-001\",  \n    \"CW-2020Q2-006-Av-002\"  \n  ],  \n  \"workLastDateUpdate\": \"2020-03-17T08:45:00Z\",  \n  \"mainContractingCompagny\": \"XRP - NICOLSPA\",  \n  \"othersContractingCompagny\": [  \n    \"VRD - Terrassement Nicois\",  \n    \"ELEC - Electricite de Nice\",  \n    \"NUM - Consortium operateur\"  \n  ],  \n  \"workLevel\": [  \n    \"ground\",  \n    \"underground\"  \n  ],  \n  \"workTarget\": [  \n    \"roads\",  \n    \"pavement\",  \n    \"electricityNetworks\",  \n    \"opticalFibers\",  \n    \"videoNetworks\",  \n    \"vrd\"  \n  ],  \n  \"workNature\": [  \n    \"landFill\",  \n    \"repair\",  \n    \"tonnageExemption\",  \n    \"securingPerimeter\",  \n    \"trenchOpening\",  \n    \"tarring\"  \n  ],  \n  \"infrastructureFunction\": [  \n    \"distribution\",  \n    \"collection\"  \n  ],  \n  \"encroachment\": [  \n    \"public\",  \n    \"private\"  \n  ],  \n  \"typeOfInteventionRequest\": \"authorizationRequest\",  \n  \"workReason\": [  \n    \"sagging\",  \n    \"powerCut\"  \n  ],  \n  \"workZone\": [  \n    \"road\",  \n    \"sideWalk\",  \n    \"busCorridor\",  \n    \"tramwayLine\"  \n  ],  \n  \"workDisposition\": [  \n    {  \n      \"disposition\": \"laneReduction\",  \n      \"startDate\": \"2020-05-11T08:00:00Z\",  \n      \"endDate\": \"2020-05-15T18:30:00Z\",  \n      \"dayOfWeek\": [  \n        \"Monday\",  \n        \"Tuesday\",  \n        \"Wednesday\",  \n        \"Thursday\",  \n        \"Friday\"  \n      ],  \n      \"comment\": \"Switching from 2 lanes to 1 lane - BusCorridor not available\"  \n    },  \n    {  \n      \"disposition\": \"sidewalkReduction\",  \n      \"startDate\": \"2020-05-12T00:00:00Z\",  \n      \"endDate\": \"2020-05-14T24:00:00Z\",  \n      \"dayOfWeek\": [  \n        \"Monday\",  \n        \"Tuesday\",  \n        \"Wednesday\",  \n        \"Thursday\",  \n        \"Friday\"  \n      ]  \n    },  \n    {  \n      \"disposition\": \"alternatingLights\",  \n      \"startDate\": \"2020-05-11T08:00:00Z\",  \n      \"endDate\": \"2020-05-15T18:30:00Z\",  \n      \"dayOfWeek\": [  \n        \"Monday\",  \n        \"Tuesday\",  \n        \"Wednesday\",  \n        \"Thursday\",  \n        \"Friday\"  \n      ]  \n    },  \n    {  \n      \"disposition\": \"speedReduction\",  \n      \"startDate\": \"2020-05-12T00:00:00Z\",  \n      \"dayOfWeek\": [  \n        \"Monday\",  \n        \"Tuesday\",  \n        \"Wednesday\",  \n        \"Thursday\",  \n        \"Friday\",  \n        \"Saturday\",  \n        \"Sunday\"  \n      ],  \n      \"comment\": \"Speed Switching from 2 lanes to 1 lane\"  \n    }  \n  ],  \n  \"workOtherImpact\": [  \n    \"layingCablesOnGround\",  \n    \"shopsTerrace\"  \n  ],  \n  \"isMobile\": false,  \n  \"countOfDerogation\": 2,  \n  \"derogation\": [  \n    {  \n      \"derogationType\": \"Work Nigth during Workday\",  \n      \"startDate\": \"2020-05-11T20:30:00Z\",  \n      \"endDate\": \"2020-05-15T23:30:00\",  \n      \"dayOfWeek\": [  \n        \"Monday\",  \n        \"Tuesday\",  \n        \"Wednesday\",  \n        \"Thursday\",  \n        \"Friday\"  \n      ]  \n    },  \n    {  \n      \"derogationType\": \"BRH\",  \n      \"startDate\": \"2020-05-13T20:30:00Z\",  \n      \"endDate\": \"2020-05-13T23:30:00Z\",  \n      \"dayOfWeek\": [  \n        \"Wednesday\"  \n      ]  \n    }  \n  ],  \n  \"isMainRoadImpactedHTR\": true,  \n  \"countOfRoadImpacted\": 3,  \n  \"roadImpacted\": [  \n    {  \n      \"roadId\": \"urn:ngsi-ld:Road:N202\",  \n      \"segmentImpacted\": [  \n        \"urn:ngsi-ld:RoadSegment:N202-12\",  \n        \"urn:ngsi-ld:RoadSegment:N202-13\"  \n      ]  \n    },  \n    {  \n      \"roadId\": \"Road:D021\",  \n      \"segmentImpacted\": [  \n        \"12\",  \n        \"13\",  \n        \"14\",  \n        \"15\"  \n      ]  \n    },  \n    {  \n      \"roadId\": \"urn:ngsi-ld:Road:D032\",  \n      \"segmentArea\": {  \n        \"type\": \"LineString\",  \n        \"coordinates\": [  \n          [  \n            102.0,  \n            0.0  \n          ],  \n          [  \n            103.0,  \n            1.0  \n          ],  \n          [  \n            104.0,  \n            0.0  \n          ],  \n          [  \n            105.0,  \n            1.0  \n          ]  \n        ]  \n      }  \n    }  \n  ],  \n  \"allowedVehicle\": [  \n    \"firefighters\",  \n    \"police\",  \n    \"emergencyVehicle\",  \n    \"companiesTrucks\"  \n  ],  \n  \"maxAuthorizedTonnage\": [  \n    {  \n      \"roadImpacted\": \"urn:ngsi-ld:Road:N202\",  \n      \"maxTonnage\": 30  \n    },  \n    {  \n      \"roadImpacted\": \"Road:D021\",  \n      \"maxTonnage\": 20  \n    },  \n    {  \n      \"roadImpacted\": \"urn:ngsi-ld:Road:D032\",  \n      \"maxTonnage\": 15.2  \n    }  \n  ],  \n  \"countOfBusLineImpacted\": 1,  \n  \"busImpacted\": [  \n    {  \n      \"lineImpacted\": \"urn:ngsi-ld:BusLine:L205\"  \n    }  \n  ],  \n  \"countOfTramwayLineImpacted\": 2,  \n  \"tramwayImpacted\": [  \n    {  \n      \"lineImpacted\": \"TramWayLine:L01\",  \n      \"segmentImpacted\": [  \n        \"urn:ngsi-ld:TramWaySegment:L01-12\",  \n        \"urn:ngsi-ld:TramWaySegment:L01-19\"  \n      ]  \n    },  \n    {  \n      \"lineImpacted\": \"TramWayLine:L03\",  \n      \"segmentImpacted\": [  \n        \"urn:ngsi-ld:TramWaySegment:L03-19\"  \n      ]  \n    }  \n  ],  \n  \"countOfRailwayLineImpacted\": 1,  \n  \"railwayImpacted\": [  \n    {  \n      \"lineImpacted\": \"Nice-Grasse\",  \n      \"segmentImpact\": [  \n        \"Nice Saint Augustin section\"  \n      ]  \n    }  \n  ],  \n  \"countOfSchoolImpacted\": 2,  \n  \"schoolImpacted\": [  \n    \"Lyc\u00e9e Massena\",  \n    \"Universit\u00e9 Campus Saint Jean\"  \n  ],  \n  \"countOfStationImpacted\": 4,  \n  \"stationImpacted\": [  \n    {  \n      \"stationId\": [  \n        \"urn:ngsi-ld:station:L205-S13\",  \n        \"urn:ngsi-ld:station:L205-S14\"  \n      ]  \n    },  \n    {  \n      \"stationType\": \"tram\",  \n      \"stationId\": [  \n        \"L01-S12\",  \n        \"L01-S19\"  \n      ]  \n    }  \n  ],  \n  \"countOfEventImpacted\": 2,  \n  \"eventsImpact\": [  \n    \"urn:ngsi-ld:events:MNCA-EV-JazzCimiez\",  \n    \"NiceMarathon\"  \n  ]  \n}  \n```  \n\r#### CityWork NGSI-v2 normalized Example    \n\rHere is an example of a CityWork in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CityWork:CityWork:MNCA-CW-2020Q2-006\",  \n  \"type\": \"CityWork\",  \n  \"name\": {  \n    \"type\": \"string\",  \n    \"value\": \"Nice-Airport-CW2020Q2-006\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"string\",  \n    \"value\": \"AirPort global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"string\",  \n    \"value\": \"Widening work on access roads and installation of a new electrical and digital network for the connection of T1 & T2 terminals\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Polygon\",  \n      \"coordinates\": [  \n        [  \n          43.20315,  \n          7.20186  \n        ],  \n        [  \n          43.20384,  \n          7.20372  \n        ],  \n        [  \n          43.20388,  \n          7.20493  \n        ],  \n        [  \n          43.19938,  \n          7.20312  \n        ],  \n        [  \n          43.20045,  \n          7.20152  \n        ],  \n        [  \n          43.20315,  \n          7.20186  \n        ]  \n      ]  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"string\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"territorialArea\": {  \n    \"type\": \"string\",  \n    \"value\": \"subwaypole Nice\"  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-04-02T10:30:00Z\"  \n  },  \n  \"workNumber\": {  \n    \"type\": \"string\",  \n    \"value\": \"CW2020Q2-006\"  \n  },  \n  \"workState\": {  \n    \"type\": \"string\",  \n    \"value\": \"open\"  \n  },  \n  \"workDate\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z/2020-04-22T18:45:00Z\",  \n    \"metadata\": {  \n      \"TimeInstant\": {  \n        \"type\": \"Text\",  \n        \"value\": \"2020-04-02T10:30:00Z\"  \n      }  \n    }  \n  },  \n  \"startDate\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\",  \n    \"metadata\": {  \n      \"TimeInstant\": {  \n        \"type\": \"Text\",  \n        \"value\": \"2020-02-01TT17:25:00Z\"  \n      }  \n    }  \n  },  \n  \"endDate\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-04-22T18:45:00Z\",  \n    \"metadata\": {  \n      \"TimeInstant\": {  \n        \"type\": \"Text\",  \n        \"value\": \"2020-04-02T10:30:00Z\"  \n      }  \n    }  \n  },  \n  \"openingHoursSpecification\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"dayOfWeek\": \"Monday\",  \n        \"opens\": \"07:00:00\",  \n        \"closes\": \"20:00:00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Tuesday\",  \n        \"opens\": \"07:00:00\",  \n        \"closes\": \"20:00:00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Wednesday\",  \n        \"opens\": \"07:00:00\",  \n        \"closes\": \"20:00:00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Thursday\",  \n        \"opens\": \"07:00:00\",  \n        \"closes\": \"20:00:00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Friday\",  \n        \"opens\": \"07:00:00\",  \n        \"closes\": \"20:00:00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Saturday\",  \n        \"opens\": \"08:30:00\",  \n        \"closes\": \"17.00:00\"  \n      }  \n    ]  \n  },  \n  \"contractingAuthority\": {  \n    \"type\": \"string\",  \n    \"value\": \"MNCA - subwaypole Nice Cote d'Azur\"  \n  },  \n  \"contactPoint\": {  \n    \"type\": \"string\",  \n    \"value\": \"Service des AO\"  \n  },  \n  \"decrees\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"https://MNCA/CityWork/Decree/CW-2020Q2-006\",  \n      \"CW-2020Q2-006\",  \n      \"CW-2020Q2-006-Av-001\",  \n      \"CW-2020Q2-006-Av-002\"  \n    ]  \n  },  \n  \"workLastDateUpdate\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\",  \n     \"metadata\": {  \n      \"TimeInstant\": {  \n        \"type\": \"Text\",  \n        \"value\": \"2020-03-16T09:12:25Z\"  \n      }  \n    }  \n  },  \n  \"mainContractingCompany\": {  \n    \"type\": \"string\",  \n    \"value\": \"XRP - NICOLSPA\"  \n  },  \n  \"othersContractingCompagny\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"VRD - Terrassement Nicois\",  \n      \"ELEC - Electricite de Nice\",  \n      \"NUM - Consortium operateur\"  \n    ]  \n  },  \n  \"workLevel\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"ground\",  \n      \"underground\"  \n    ]  \n  },  \n  \"workTarget\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"electricityNetworks\",  \n      \"opticalFibers\",  \n      \"pavement\",  \n      \"roads\",  \n      \"videoNetworks\",  \n      \"vrd\"  \n    ]  \n  },  \n  \"workNature\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"landFill\",  \n      \"repair\",  \n      \"securingPerimeter\",  \n      \"tarring\",  \n      \"tonnageExemption\",  \n      \"trenchOpening\"  \n    ]  \n  },  \n  \"infrastructureFunction\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"collection\",  \n      \"distribution\"  \n    ]  \n  },  \n  \"encroachment\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"private\",  \n      \"public\"  \n    ]  \n  },  \n  \"typeOfInterventionRequest\": {  \n    \"type\": \"string\",  \n    \"value\": \"authorizationRequest\"  \n  },  \n  \"workReason\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"sagging\",  \n      \"powerCut\"  \n    ]  \n  },  \n  \"workZone\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"busCorridor\",  \n      \"road\",  \n      \"sideWalk\",  \n      \"tramwayLine\"  \n    ]  \n  },  \n  \"workDisposition\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"disposition\": \"laneReduction\",  \n        \"startDate\": \"2020-05-11T08:00:00Z\",  \n        \"endDate\": \"2020-05-15T18:30:00Z\",  \n        \"dayOfWeek\": [  \n          \"Monday\",  \n          \"Tuesday\",  \n          \"Wednesday\",  \n          \"Thursday\",  \n          \"Friday\"  \n        ],  \n        \"comment\": \"Switching from 2 lanes to 1 lane - BusCorridor not available\"  \n      },  \n      {  \n        \"disposition\": \"sidewalkReduction\",  \n        \"startDate\": \"2020-05-12T00:00:00Z\",  \n        \"endDate\": \"2020-05-14T24:00:00Z\",  \n        \"dayOfWeek\": [  \n          \"Monday\",  \n          \"Tuesday\",  \n          \"Wednesday\",  \n          \"Thursday\",  \n          \"Friday\",  \n          \"Saturday\",  \n          \"Sunday\"  \n        ]  \n      },  \n      {  \n        \"disposition\": \"alternatingLights\",  \n        \"startDate\": \"2020-05-11T08:00:00Z\",  \n        \"endDate\": \"2020-05-15T18:30:00Z\",  \n        \"dayOfWeek\": [  \n          \"Monday\",  \n          \"Tuesday\",  \n          \"Wednesday\",  \n          \"Thursday\",  \n          \"Friday\"  \n        ]  \n      },  \n      {  \n        \"disposition\": \"speedReduction\",  \n        \"startDate\": \"2020-05-12T00:00:00Z\",  \n        \"dayOfWeek\": [  \n          \"Monday\",  \n          \"Tuesday\",  \n          \"Wednesday\",  \n          \"Thursday\",  \n          \"Friday\",  \n          \"Saturday\",  \n          \"Sunday\"  \n        ],  \n        \"comment\": \"Speed Switching from 2 lanes to 1 lane\"  \n      }  \n    ]  \n  },  \n  \"workOtherImpact\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"layingCablesOnGround\",  \n      \"shopsTerrace\"  \n    ]  \n  },  \n  \"isMobile\": {  \n    \"type\": \"Boolean\",  \n    \"value\": false  \n  },  \n  \"countOfDerogation\": {  \n    \"type\": \"number\",  \n    \"value\": 2  \n  },  \n  \"derogation\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"derogationType\": \"Work Night during Workday\",  \n        \"startDate\": \"2020-05-11T20:30:00Z\",  \n        \"endDate\": \"2020-05-15T23:30:00\",  \n        \"dayOfWeek\": [  \n          \"Monday\",  \n          \"Tuesday\",  \n          \"Wednesday\",  \n          \"Thursday\",  \n          \"Friday\"  \n        ]  \n      },  \n      {  \n        \"derogationType\": \"BRH\",  \n        \"startDate\": \"2020-05-13T20:30:00Z\",  \n        \"endDate\": \"2020-05-13T23:30:00Z\",  \n        \"dayOfWeek\": [  \n          \"Wednesday\"  \n        ]  \n      }  \n    ]  \n  },  \n  \"isMainRoadImpactedHTR\": {  \n    \"type\": \"Boolean\",  \n    \"value\": true  \n  },  \n  \"countOfRoadImpacted\": {  \n    \"type\": \"number\",  \n    \"value\": 3  \n  },  \n  \"roadImpacted\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"roadImpacted\": \"urn:ngsi-ld:Road:N202\",  \n        \"segmentImpacted\": [  \n          \"urn:ngsi-ld:RoadSegment:N202-12\",  \n          \"urn:ngsi-ld:RoadSegment:N202-13\"  \n        ]  \n      },  \n      {  \n        \"roadImpacted\": \"Road:D021\",  \n        \"segmentImpacted\": [  \n          \"12\",  \n          \"13\",  \n          \"14\",  \n          \"15\"  \n        ]  \n      },  \n      {  \n        \"roadImpacted\": \"urn:ngsi-ld:Road:D032\",  \n        \"segmentArea\": {  \n          \"type\": \"LineString\",  \n          \"coordinates\": [  \n            [  \n              102.0,  \n              0.0  \n            ],  \n            [  \n              103.0,  \n              1.0  \n            ],  \n            [  \n              104.0,  \n              0.0  \n            ],  \n            [  \n              105.0,  \n              1.0  \n            ]  \n          ]  \n        }  \n      }  \n    ]  \n  },  \n  \"allowedVehicle\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"companiesTrucks\",  \n      \"emergencyVehicle\",  \n      \"firefighters\",  \n      \"police\"  \n    ]  \n  },  \n  \"maxAuthorizedTonnage\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"roadImpacted\": \"urn:ngsi-ld:Road:N202\",  \n        \"maxTonnage\": 30  \n      },  \n      {  \n        \"roadImpacted\": \"Road:D021\",  \n        \"maxTonnage\": 20  \n      },  \n      {  \n        \"roadImpacted\": \"urn:ngsi-ld:Road:D032\",  \n        \"maxTonnage\": 15.2  \n      }  \n    ]  \n  },  \n  \"countOfBusLineImpacted\": {  \n    \"type\": \"number\",  \n    \"value\": 1  \n  },  \n  \"busImpacted\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"lineImpacted\": \"urn:ngsi-ld:BusLine:L205\"  \n      }  \n    ]  \n  },  \n  \"countOfTramwayLineImpacted\": {  \n    \"type\": \"number\",  \n    \"value\": 2  \n  },  \n  \"tramwayImpacted\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"lineImpacted\": \"TramWayLine:L01\",  \n        \"segmentImpacted\": [  \n          \"urn:ngsi-ld:TramWaySegment:L01-12\",  \n          \"urn:ngsi-ld:TramWaySegment:L01-19\"  \n        ]  \n      },  \n      {  \n        \"lineImpacted\": \"TramWayLine:L03\",  \n        \"segmentImpacted\": [  \n          \"urn:ngsi-ld:TramWaySegment:L03-19\"  \n        ]  \n      }  \n    ]  \n  },  \n  \"countOfRailwayLineImpacted\": {  \n    \"type\": \"number\",  \n    \"value\": 1  \n  },  \n  \"railwayImpacted\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"lineImpacted\": \"Nice-Grasse\",  \n        \"segmentImpact\": [  \n          \"Nice Saint Augustin section\"  \n        ]  \n      }  \n    ]  \n  },  \n  \"countOfSchoolImpacted\": {  \n    \"type\": \"number\",  \n    \"value\": 2  \n  },  \n  \"schoolImpacted\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"Lyc\u00e9e Massena\",  \n      \"Universit\u00e9 Campus Saint Jean\"  \n    ]  \n  },  \n  \"countOfStationImpacted\": {  \n    \"type\": \"number\",  \n    \"value\": 4  \n  },  \n  \"stationImpacted\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"stationType\": \"bus\",  \n        \"stationId\": [  \n          \"urn:ngsi-ld:station:L205-S13\",  \n          \"urn:ngsi-ld:station:L205-S14\"  \n        ]  \n      },  \n      {  \n        \"stationType\": \"tram\",  \n        \"stationId\": [  \n          \"L01-S12\",  \n          \"L01-S19\"  \n        ]  \n      }  \n    ]  \n  },  \n  \"countOfEventImpacted\": {  \n    \"type\": \"number\",  \n    \"value\": 2  \n  },  \n  \"eventsImpact\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:events:MNCA-EV-JazzCimiez\",  \n      \"NiceMarathon\"  \n    ]  \n  }  \n}  \n```  \n\r#### CityWork NGSI-LD key-values Example    \n\rHere is an example of a CityWork in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:CityWork:CityWork:MNCA-CW-2020Q2-006\",  \n    \"type\": \"CityWork\",  \n    \"allowedVehicle\": [  \n        \"firefighters\",  \n        \"police\",  \n        \"emergencyVehicle\",  \n        \"companiesTrucks\"  \n    ],  \n    \"alternateName\": \"AirPort global Observation\",  \n    \"areaServed\": \"Nice Aeroport\",  \n    \"busImpacted\": [  \n        {  \n            \"lineImpacted\": \"urn:ngsi-ld:BusLine:L205\"  \n        }  \n    ],  \n    \"contactPoint\": {  \n        \"name\": \"Service des AO\"  \n    },  \n    \"contractingAuthority\": \"MNCA - subwaypole Nice Cote d'Azur\",  \n    \"countOfBusLineImpacted\": 1,  \n    \"countOfDerogation\": 2,  \n    \"countOfEventImpacted\": 2,  \n    \"countOfRailwayLineImpacted\": 1,  \n    \"countOfRoadImpacted\": 3,  \n    \"countOfSchoolImpacted\": 2,  \n    \"countOfStationImpacted\": 4,  \n    \"countOfTramwayLineImpacted\": 2,  \n    \"dateLastReported\": \"2020-04-02T10:30:00Z\",  \n    \"decrees\": [  \n        \"https://MNCA/CityWork/Decree/CW-2020Q2-006\",  \n        \"CW-2020Q2-006\",  \n        \"CW-2020Q2-006-Av-001\",  \n        \"CW-2020Q2-006-Av-002\"  \n    ],  \n    \"derogation\": [  \n        {  \n            \"derogationType\": \"Work Nigth during Workday\",  \n            \"startDate\": \"2020-05-11T20:30:00Z\",  \n            \"endDate\": \"2020-05-15T23:30:00\",  \n            \"dayOfWeek\": [  \n                \"Monday\",  \n                \"Tuesday\",  \n                \"Wednesday\",  \n                \"Thursday\",  \n                \"Friday\"  \n            ]  \n        },  \n        {  \n            \"derogationType\": \"BRH\",  \n            \"startDate\": \"2020-05-13T20:30:00Z\",  \n            \"endDate\": \"2020-05-13T23:30:00Z\",  \n            \"dayOfWeek\": [  \n                \"Wednesday\"  \n            ]  \n        }  \n    ],  \n    \"description\": \"Widening work on access roads and installation of a new electrical and digital network for the connection of T1 & T2 terminals\",  \n    \"encroachment\": [  \n        \"public\",  \n        \"private\"  \n    ],  \n    \"endDate\": \"2020-04-22T18:45:00Z\",  \n    \"eventsImpact\": [  \n        \"urn:ngsi-ld:events:MNCA-EV-JazzCimiez\",  \n        \"NiceMarathon\"  \n    ],  \n    \"infrastructureFunction\": [  \n        \"distribution\",  \n        \"collection\"  \n    ],  \n    \"isMainRoadImpactedHTR\": true,  \n    \"isMobile\": false,  \n    \"location\": {  \n        \"type\": \"Polygon\",  \n        \"coordinates\": [  \n            [  \n                43.20315,  \n                7.20186  \n            ],  \n            [  \n                43.20384,  \n                7.20372  \n            ],  \n            [  \n                43.20388,  \n                7.20493  \n            ],  \n            [  \n                43.19938,  \n                7.20312  \n            ],  \n            [  \n                43.20045,  \n                7.20152  \n            ],  \n            [  \n                43.20315,  \n                7.20186  \n            ]  \n        ]  \n    },  \n    \"mainContractingCompagny\": \"XRP - NICOLSPA\",  \n    \"maxAuthorizedTonnage\": [  \n        {  \n            \"roadImpacted\": \"urn:ngsi-ld:Road:N202\",  \n            \"maxTonnage\": 30  \n        },  \n        {  \n            \"roadImpacted\": \"Road:D021\",  \n            \"maxTonnage\": 20  \n        },  \n        {  \n            \"roadImpacted\": \"urn:ngsi-ld:Road:D032\",  \n            \"maxTonnage\": 15.2  \n        }  \n    ],  \n    \"name\": \"Nce-Airport-CW2020Q2-006\",  \n    \"openingHoursSpecification\": [  \n        {  \n            \"dayOfWeek\": \"Monday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Tuesday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Wednesday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Thursday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Friday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"20:00:00\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Saturday\",  \n            \"opens\": \"08:30:00\",  \n            \"closes\": \"17:00:00\"  \n        }  \n    ],  \n    \"othersContractingCompagny\": [  \n        \"VRD - Terrassement Nicois\",  \n        \"ELEC - Electricite de Nice\",  \n        \"NUM - Consortium operateur\"  \n    ],  \n    \"railwayImpacted\": [  \n        {  \n            \"lineImpacted\": \"Nice-Grasse\",  \n            \"segmentImpact\": [  \n                \"Nice Saint Augustin section\"  \n            ]  \n        }  \n    ],  \n    \"roadImpacted\": [  \n        {  \n            \"roadId\": \"urn:ngsi-ld:Road:N202\",  \n            \"segmentImpacted\": [  \n                \"urn:ngsi-ld:RoadSegment:N202-12\",  \n                \"urn:ngsi-ld:RoadSegment:N202-13\"  \n            ]  \n        },  \n        {  \n            \"roadId\": \"Road:D021\",  \n            \"segmentImpacted\": [  \n                \"12\",  \n                \"13\",  \n                \"14\",  \n                \"15\"  \n            ]  \n        },  \n        {  \n            \"roadId\": \"urn:ngsi-ld:Road:D032\",  \n            \"segmentArea\": {  \n                \"type\": \"LineString\",  \n                \"coordinates\": [  \n                    [  \n                        102.0,  \n                        0.0  \n                    ],  \n                    [  \n                        103.0,  \n                        1.0  \n                    ],  \n                    [  \n                        104.0,  \n                        0.0  \n                    ],  \n                    [  \n                        105.0,  \n                        1.0  \n                    ]  \n                ]  \n            }  \n        }  \n    ],  \n    \"schoolImpacted\": [  \n        \"Lyc\\u00e9e Massena\",  \n        \"Universit\\u00e9 Campus Saint Jean\"  \n    ],  \n    \"startDate\": \"2020-03-17T08:45:00Z\",  \n    \"stationImpacted\": [  \n        {  \n            \"stationType\": \"bus\",  \n            \"stationId\": [  \n                \"urn:ngsi-ld:station:L205-S13\",  \n                \"urn:ngsi-ld:station:L205-S14\"  \n            ]  \n        },  \n        {  \n            \"stationType\": \"tram\",  \n            \"stationId\": [  \n                \"L01-S12\",  \n                \"L01-S19\"  \n            ]  \n        }  \n    ],  \n    \"territorialArea\": \"subwaypole Nice\",  \n    \"tramwayImpacted\": [  \n        {  \n            \"lineImpacted\": \"TramWayLine:L01\",  \n            \"segmentImpacted\": [  \n                \"urn:ngsi-ld:TramWaySegment:L01-12\",  \n                \"urn:ngsi-ld:TramWaySegment:L01-19\"  \n            ]  \n        },  \n        {  \n            \"lineImpacted\": \"TramWayLine:L03\",  \n            \"segmentImpacted\": [  \n                \"urn:ngsi-ld:TramWaySegment:L03-19\"  \n            ]  \n        }  \n    ],  \n    \"typeOfInterventionRequest\": \"authorizationRequest\",  \n    \"workDate\": \"2020-03-17T08:45:00Z/2020-04-22T18:45:00Z\",  \n    \"workDisposition\": [  \n        {  \n            \"disposition\": \"laneReduction\",  \n            \"startDate\": \"2020-05-11T08:00:00Z\",  \n            \"endDate\": \"2020-05-15T18:30:00Z\",  \n            \"dayOfWeek\": [  \n                \"Monday\",  \n                \"Tuesday\",  \n                \"Wednesday\",  \n                \"Thursday\",  \n                \"Friday\"  \n            ],  \n            \"comment\": \"Switching from 2 lanes to 1 lane - BusCorridor not available\"  \n        },  \n        {  \n            \"disposition\": \"sidewalkReduction\",  \n            \"startDate\": \"2020-05-12T00:00:00Z\",  \n            \"endDate\": \"2020-05-14T24:00:00Z\",  \n            \"dayOfWeek\": [  \n                \"Monday\",  \n                \"Tuesday\",  \n                \"Wednesday\",  \n                \"Thursday\",  \n                \"Friday\"  \n            ]  \n        },  \n        {  \n            \"disposition\": \"alternatingLights\",  \n            \"startDate\": \"2020-05-11T08:00:00Z\",  \n            \"endDate\": \"2020-05-15T18:30:00Z\",  \n            \"dayOfWeek\": [  \n                \"Monday\",  \n                \"Tuesday\",  \n                \"Wednesday\",  \n                \"Thursday\",  \n                \"Friday\"  \n            ]  \n        },  \n        {  \n            \"disposition\": \"speedReduction\",  \n            \"startDate\": \"2020-05-12T00:00:00Z\",  \n            \"dayOfWeek\": [  \n                \"Monday\",  \n                \"Tuesday\",  \n                \"Wednesday\",  \n                \"Thursday\",  \n                \"Friday\",  \n                \"Saturday\",  \n                \"Sunday\"  \n            ],  \n            \"comment\": \"Speed Switching from 2 lanes to 1 lane\"  \n        }  \n    ],  \n    \"workLastDateUpdate\": \"2020-03-17T08:45:00Z\",  \n    \"workLevel\": [  \n        \"ground\",  \n        \"underground\"  \n    ],  \n    \"workNature\": [  \n        \"landFill\",  \n        \"repair\",  \n        \"tonnageExemption\",  \n        \"securingPerimeter\",  \n        \"trenchOpening\",  \n        \"tarring\"  \n    ],  \n    \"workNumber\": \"CW2020Q2-006\",  \n    \"workOtherImpact\": [  \n        \"layingCablesOnGround\",  \n        \"shopsTerrace\"  \n    ],  \n    \"workReason\": [  \n        \"sagging\",  \n        \"powerCut\"  \n    ],  \n    \"workState\": \"open\",  \n    \"workTarget\": [  \n        \"roads\",  \n        \"pavement\",  \n        \"electricityNetworks\",  \n        \"opticalFibers\",  \n        \"videoNetworks\",  \n        \"vrd\"  \n    ],  \n    \"workZone\": [  \n        \"road\",  \n        \"sideWalk\",  \n        \"busCorridor\",  \n        \"tramwayLine\"  \n    ],  \n    \"@context\": [  \n        \"https://smartdatamodels.org/context\",  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Transportation/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### CityWork NGSI-LD normalized Example    \n\rHere is an example of a CityWork in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:CityWork:CityWork:MNCA-CW-2020Q2-006\",  \n    \"type\": \"CityWork\",  \n    \"alternateName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"AirPort global Observation\"  \n    },  \n    \"areaServed\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice Aeroport\"  \n    },  \n    \"contactPoint\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Service des AO\"  \n    },  \n    \"contractingAuthority\": {  \n        \"type\": \"Property\",  \n        \"value\": \"MNCA - subwaypole Nice Cote d'Azur\"  \n    },  \n    \"dateLastReported\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2020-04-02T10:30:00Z\"  \n        }  \n    },  \n    \"decrees\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"https://MNCA/CityWork/Decree/CW-2020Q2-006\",  \n            \"CW-2020Q2-006\",  \n            \"CW-2020Q2-006-Av-001\",  \n            \"CW-2020Q2-006-Av-002\"  \n        ]  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Widening work on access roads and installation of a new electrical and digital network for the connection of T1 & T2 terminals\"  \n    },  \n    \"encroachment\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"private\",  \n            \"public\"  \n        ]  \n    },  \n    \"endDate\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2020-04-22T18:45:00Z\"  \n    },  \n    \"infrastructureFunction\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"collection\",  \n            \"distribution\"  \n        ]  \n    },  \n    \"location\": {  \n        \"type\": \"Geoproperty\",  \n        \"value\": {  \n            \"type\": \"Polygon\",  \n            \"coordinates\": [  \n                [  \n                    43.20315,  \n                    7.20186  \n                ],  \n                [  \n                    43.20384,  \n                    7.20372  \n                ],  \n                [  \n                    43.20388,  \n                    7.20493  \n                ],  \n                [  \n                    43.19938,  \n                    7.20312  \n                ],  \n                [  \n                    43.20045,  \n                    7.20152  \n                ],  \n                [  \n                    43.20315,  \n                    7.20186  \n                ]  \n            ]  \n        }  \n    },  \n    \"mainContractingCompany\": {  \n        \"type\": \"Property\",  \n        \"value\": \"XRP - NICOLSPA\"  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nce-Airport-CW2020Q2-006\"  \n    },  \n    \"openingHoursSpecification\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            {  \n                \"dayOfWeek\": \"Monday\",  \n                \"Opens\": \"07.00\",  \n                \"closes\": \"20.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Tuesday\",  \n                \"Opens\": \"07.00\",  \n                \"closes\": \"20.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Wednesday\",  \n                \"Opens\": \"07.00\",  \n                \"closes\": \"20.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Thursday\",  \n                \"Opens\": \"07.00\",  \n                \"closes\": \"20.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Friday\",  \n                \"Opens\": \"07.00\",  \n                \"closes\": \"20.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Saturday\",  \n                \"Opens\": \"08.30\",  \n                \"closes\": \"17.00\"  \n            }  \n        ]  \n    },  \n    \"othersContractingCompany\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"VRD - Terrassement Nicois\",  \n            \"ELEC - Electricite de Nice\",  \n            \"NUM - Consortium operateur\"  \n        ]  \n    },  \n    \"startDate\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2020-03-17T08:45:00Z\"  \n    },  \n    \"territorialArea\": {  \n        \"type\": \"Property\",  \n        \"value\": \"subwaypole Nice\"  \n    },  \n    \"typeOfInteventionRequest\": {  \n        \"type\": \"Property\",  \n        \"value\": \"authorizationRequest\"  \n    },  \n    \"workDate\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2020-03-17T08:45:00Z/2020-04-22T18:45:00Z\"  \n    },  \n    \"workDisposition\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            {  \n                \"disposition\": \"laneReduction\",  \n                \"startDate\": \"2020-05-11T08:00:00Z\",  \n                \"endDate\": \"2020-05-15T18:30:00Z\",  \n                \"dayOfWeek\": [  \n                    \"Monday\",  \n                    \"Tuesday\",  \n                    \"Wednesday\",  \n                    \"Thursday\",  \n                    \"Friday\"  \n                ],  \n                \"comment\": \"Switching from 2 lanes to 1 lane - BusCorridor not available\"  \n            },  \n            {  \n                \"disposition\": \"sidewalkReduction\",  \n                \"startDate\": \"2020-05-12T00:00:00Z\",  \n                \"endDate\": \"2020-05-14T24:00:00Z\",  \n                \"dayOfWeek\": [  \n                    \"Monday\",  \n                    \"Tuesday\",  \n                    \"Wednesday\",  \n                    \"Thursday\",  \n                    \"Friday\",  \n                    \"Saturday\",  \n                    \"Sunday\"  \n                ]  \n            },  \n            {  \n                \"disposition\": \"alternatingLights\",  \n                \"startDate\": \"2020-05-11T08:00:00Z\",  \n                \"endDate\": \"2020-05-15T18:30:00Z\",  \n                \"dayOfWeek\": [  \n                    \"Monday\",  \n                    \"Tuesday\",  \n                    \"Wednesday\",  \n                    \"Thursday\",  \n                    \"Friday\"  \n                ]  \n            },  \n            {  \n                \"disposition\": \"speedReduction\",  \n                \"startDate\": \"2020-05-12T00:00:00Z\",  \n                \"dayOfWeek\": [  \n                    \"Monday\",  \n                    \"Tuesday\",  \n                    \"Wednesday\",  \n                    \"Thursday\",  \n                    \"Friday\",  \n                    \"Saturday\",  \n                    \"Sunday\"  \n                ],  \n                \"comment\": \"Speed Switching from 2 lanes to 1 lane\"  \n            }  \n        ],  \n        \"workOtherImpact\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                \"layingCablesOnGround\",  \n                \"shopsTerrace\"  \n            ]  \n        },  \n        \"isMobile\": {  \n            \"type\": \"Property\",  \n            \"value\": false  \n        },  \n        \"countOfDerogation\": {  \n            \"type\": \"Property\",  \n            \"value\": 2  \n        },  \n        \"derogation\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                {  \n                    \"derogationType\": \"Work Nigth during Workday\",  \n                    \"startDate\": \"2020-05-11T20:30:00Z\",  \n                    \"endDate\": \"2020-05-15T23:30:00\",  \n                    \"dayOfWeek\": [  \n                        \"Monday\",  \n                        \"Tuesday\",  \n                        \"Wednesday\",  \n                        \"Thursday\",  \n                        \"Friday\",  \n                        \"Saturday\",  \n                        \"Sunday\"  \n                    ]  \n                },  \n                {  \n                    \"derogationType\": \"BRH\",  \n                    \"startDate\": \"2020-05-13T20:30:00Z \",  \n                    \"endDate\": \"2020-05-13T23:30:00Z\",  \n                    \"dayOfWeek\": \"Wednesday\"  \n                }  \n            ]  \n        },  \n        \"isMainRoadImpactedHTR\": {  \n            \"type\": \"Property\",  \n            \"value\": true  \n        },  \n        \"countOfRoadImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": 3  \n        },  \n        \"roadImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                {  \n                    \"roadId\": \"urn:ngsi-ld:Road:N202\",  \n                    \"segmentId\": [  \n                        \"urn:ngsi-ld:RoadSegment:N202-12\",  \n                        \"urn:ngsi-ld:RoadSegment:N202-13\"  \n                    ]  \n                },  \n                {  \n                    \"roadId\": \"Road:D021\",  \n                    \"segmentName\": [  \n                        \"N\\u00ba 12\",  \n                        \"N\\u00ba 13\",  \n                        \"N\\u00ba 14\"  \n                    ]  \n                },  \n                {  \n                    \"roadId\": \"urn:ngsi-ld:Road:D032\",  \n                    \"segmentLocation\": [  \n                        {  \n                            \"type\": \"LineString\",  \n                            \"coordinates\": [  \n                                [  \n                                    102.0,  \n                                    0.0  \n                                ],  \n                                [  \n                                    103.0,  \n                                    1.0  \n                                ],  \n                                [  \n                                    104.0,  \n                                    0.0  \n                                ],  \n                                [  \n                                    105.0,  \n                                    1.0  \n                                ]  \n                            ]  \n                        },  \n                        {  \n                            \"type\": \"Point\",  \n                            \"coordinates\": [  \n                                43.655675,  \n                                7.161232  \n                            ]  \n                        }  \n                    ]  \n                },  \n                {  \n                    \"roadLocation\": {  \n                        \"type\": \"Point\",  \n                        \"coordinates\": [  \n                            43.67428,  \n                            7.161589  \n                        ]  \n                    }  \n                }  \n            ]  \n        },  \n        \"allowedVehicle\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                \"companiesTrucks\",  \n                \"emergencyVehicle\",  \n                \"firefighters\",  \n                \"police\"  \n            ]  \n        },  \n        \"maxAuthorizedTonnage\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                {  \n                    \"roadImpacted\": \"urn:ngsi-ld:Road:N202\",  \n                    \"maxTonnage\": 30  \n                },  \n                {  \n                    \"roadImpacted\": \"Road:D021\",  \n                    \"maxTonnage\": 20  \n                },  \n                {  \n                    \"roadImpacted\": \"urn:ngsi-ld:Road:D032\",  \n                    \"maxTonnage\": 15.2  \n                }  \n            ]  \n        },  \n        \"countOfBusLineImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": 1  \n        },  \n        \"busImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                {  \n                    \"lineImpacted\": \"urn:ngsi-ld:BusLine:L205\"  \n                }  \n            ]  \n        },  \n        \"countOfTramwayLineImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": 2  \n        },  \n        \"tramwayImpacted\": {  \n            \"type\": \"Property \",  \n            \"value\": [  \n                {  \n                    \"lineImpacted\": \"TramWayLine:L01\",  \n                    \"segmentImpacted\": [  \n                        \"urn:ngsi-ld:TramWaySegment:L01-12\",  \n                        \"urn:ngsi-ld:TramWaySegment:L01-19\"  \n                    ]  \n                },  \n                {  \n                    \"lineImpacted\": \"TramWayLine:L03\",  \n                    \"segmentImpacted\": [  \n                        \"urn:ngsi-ld:TramWaySegment:L03-19\"  \n                    ]  \n                }  \n            ]  \n        },  \n        \"countOfRailwayLineImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": 1  \n        },  \n        \"railwayImpacted\": {  \n            \"type\": \"Property \",  \n            \"value\": [  \n                {  \n                    \"lineImpacted\": \"Nice-Grasse\",  \n                    \"segmentImpact\": [  \n                        \"Nice Saint Augustin section\"  \n                    ]  \n                }  \n            ]  \n        },  \n        \"countOfSchoolImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": 2  \n        },  \n        \"schoolImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                \"Lyc\\u00e9e Massena\",  \n                \"Universit\\u00e9 Campus Saint Jean\"  \n            ]  \n        },  \n        \"countOfStationImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": 4  \n        },  \n        \"stationImpacted\": {  \n            \"type\": \"Property \",  \n            \"value\": [  \n                {  \n                    \"stationType\": \"bus\",  \n                    \"stationId\": [  \n                        \"urn:ngsi-ld:station:L205-S13\",  \n                        \"urn:ngsi-ld:station:L205-S14\"  \n                    ]  \n                },  \n                {  \n                    \"stationType\": \"tram\",  \n                    \"stationId\": [  \n                        \"L01-S12\",  \n                        \"L01-S19\"  \n                    ]  \n                }  \n            ]  \n        },  \n        \"countOfEventImpacted\": {  \n            \"type\": \"Property\",  \n            \"value\": 2  \n        },  \n        \"eventsImpact\": {  \n            \"type\": \"Property\",  \n            \"value\": [  \n                \"urn:ngsi-ld:events:MNCA-EV-JazzCimiez\",  \n                \"NiceMarathon\"  \n            ]  \n        },  \n        \"@context\": [  \n            \"https://smartdatamodels.org/ld/context\",  \n            \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n        ]  \n    },  \n    \"workLastDateUpdate\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2020-03-17T08:45:00Z\"  \n    },  \n    \"workLevel\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"ground\",  \n            \"underGround\"  \n        ]  \n    },  \n    \"workNature\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"landFill\",  \n            \"repair\",  \n            \"securingPerimeter\",  \n            \"tarring\",  \n            \"tonnageExemption\",  \n            \"trenchOpening\"  \n        ]  \n    },  \n    \"workNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": \"CW2020Q2-006\"  \n    },  \n    \"workReason\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"powerCut\",  \n            \"sagging\"  \n        ]  \n    },  \n    \"workState\": {  \n        \"type\": \"Property\",  \n        \"value\": \"open\"  \n    },  \n    \"workTarget\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"electricityNetworks\",  \n            \"opticalFibers\",  \n            \"pavement\",  \n            \"roads\",  \n            \"videoNetworks\",  \n            \"vrd\"  \n        ]  \n    },  \n    \"workZone\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"busCorridor\",  \n            \"road\",  \n            \"sideWalk\",  \n            \"tramwayLine\"  \n        ]  \n    }  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: CrowdFlowObserved
        - MODEL_DESCRIPTION: CrowdFlowObserved
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Las Rozas Innova, comments: null, description: null, mail: jpena@lasrozasinnova.es,
              organization: Municipality of Las Rozas (Spain), project: 'https://lasrozasinnova.es/cosmos-plataforma-de-ciudad-inteligente-de-las-rozas/',
              startDate: 1-1-2022}
            description: This is a compilation list of the current adopters of the data model
              CrowdFlowObserved of the Subject dataModel.Transportation.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: CrowdFlowObserved  \n=========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/CrowdFlowObserved/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **CrowdFlowObserved**  \n\rversion: 0.0.2  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `averageCrowdSpeed`: Average speed of the crowd transiting during the observation period  \r- `averageHeadwayTime`: Average headway time. Headway time is the time  \n    elapsed between two consecutive persons  \r- `congested`: Flags whether there was a crowd congestion during the observation period in the referred walkway. The absence of this attribute means no crowd congestion  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObserved`: The date and time of this observation in ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval. As a workaround for the lack of support of Orion Context Broker for datetime intervals, it can be used two separate attributes: `dateObservedFrom`, `dateObservedTo`  \r- `dateObservedFrom`: Observation period start date and time. See `dateObserved`.  \r- `dateObservedTo`: Observation period end date and time. See `dateObserved`.  \r- `description`: A description of this item  \r- `direction`: Usual direction of travel in the walkway referred by this observation with respect to the city center. Enum:'inbound, outbound'  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `occupancy`: Fraction of the observation time where a person has been occupying the observed walkway  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `peopleCount`: Total number of people detected during this observation.  \r- `refRoadSegment`: Concerned road segment on which the observation has been made  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be CrowdFlowObserved  \r  \n\rRequired properties  \n- `dateObserved`  \r- `id`  \r- `type`  \r  \n\rAn observation related to the movement of people at a certain place and time.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nCrowdFlowObserved:    \n  description: CrowdFlowObserved    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    averageCrowdSpeed:    \n      description: 'Average speed of the crowd transiting during the observation period'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Kilometer per hour (Km/h).'    \n    averageHeadwayTime:    \n      description: |-    \n        Average headway time. Headway time is the time    \n            elapsed between two consecutive persons    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'second (s)'    \n    congested:    \n      description: 'Flags whether there was a crowd congestion during the observation period in the referred walkway. The absence of this attribute means no crowd congestion'    \n      type: boolean    \n      x-ngsi:    \n        model: https://schema.org/Boolean.    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObserved:    \n      description: 'The date and time of this observation in ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval. As a workaround for the lack of support of Orion Context Broker for datetime intervals, it can be used two separate attributes: `dateObservedFrom`, `dateObservedTo`'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL.    \n        type: Property    \n    dateObservedFrom:    \n      description: 'Observation period start date and time. See `dateObserved`.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateObservedTo:    \n      description: 'Observation period end date and time. See `dateObserved`.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime.    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    direction:    \n      description: 'Usual direction of travel in the walkway referred by this observation with respect to the city center. Enum:''inbound, outbound'''    \n      enum:    \n        - inbound    \n        - outbound    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    id:    \n      anyOf: &crowdflowobserved_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    occupancy:    \n      description: 'Fraction of the observation time where a person has been occupying the observed walkway'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number)    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *crowdflowobserved_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    peopleCount:    \n      description: 'Total number of people detected during this observation.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    refRoadSegment:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Concerned road segment on which the observation has been made'    \n      x-ngsi:    \n        model: https://schema.org/URL.    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be CrowdFlowObserved'    \n      enum:    \n        - CrowdFlowObserved    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - dateObserved    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Transportation/blob/master/CrowdFlowObserved/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Transportation/CrowdFlowObserved/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### CrowdFlowObserved NGSI-v2 key-values Example    \n\rHere is an example of a CrowdFlowObserved in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CrowdFlowObserved:Valladolid_1\",  \n  \"type\": \"CrowdFlowObserved\",  \n  \"dateObserved\": \"2018-08-07T11:10:00/2018-08-07T11:15:00\",  \n  \"dateObservedFrom\": \"2018-08-07T11:10:00Z\",  \n  \"dateObservedTo\": \"2018-08-07T11:15:00Z\",  \n  \"peopleCount\": 100,  \n  \"averageHeadwayTime\": 5,  \n  \"congested\": false,  \n  \"direction\": \"inbound\",  \n  \"location\": {  \n    \"type\": \"LineString\",  \n    \"coordinates\": [  \n      [-4.73735395519672, 41.6538181849672],  \n      [-4.73414858659993, 41.6600594193478],  \n      [-4.73447575302641, 41.659585195093]  \n    ]  \n  }  \n}  \n```  \n\r#### CrowdFlowObserved NGSI-v2 normalized Example    \n\rHere is an example of a CrowdFlowObserved in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CrowdFlowObserved:Valladolid_1\",  \n  \"type\": \"CrowdFlowObserved\",  \n  \"dateObserved\": {  \n    \"value\": \"2018-08-07T11:10:00/2018-08-07T11:15:00\"  \n  },  \n  \"direction\": {  \n    \"value\": \"inbound\"  \n  },  \n  \"dateObservedFrom\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-08-07T11:10:00Z\"  \n  },  \n  \"peopleCount\": {  \n    \"value\": 100  \n  },  \n  \"averageHeadwayTime\": {  \n    \"value\": 5  \n  },  \n  \"dateObservedTo\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-08-07T11:15:00Z\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"LineString\",  \n      \"coordinates\": [  \n        [-4.73735395519672, 41.6538181849672],  \n        [-4.73414858659993, 41.6600594193478],  \n        [-4.73447575302641, 41.659585195093]  \n      ]  \n    }  \n  },  \n  \"congested\": {  \n    \"value\": false  \n  }  \n}  \n```  \n\r#### CrowdFlowObserved NGSI-LD key-values Example    \n\rHere is an example of a CrowdFlowObserved in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:CrowdFlowObserved:Valladolid_1\",  \n    \"type\": \"CrowdFlowObserved\",  \n    \"averageHeadwayTime\": {  \n        \"type\": \"Property\",  \n        \"value\": 5  \n    },  \n    \"congested\": {  \n        \"type\": \"Property\",  \n        \"value\": false  \n    },  \n    \"dateObserved\": {  \n        \"type\": \"Property\",  \n        \"value\": \"2018-08-07T11:10:00/2018-08-07T11:15:00\"  \n    },  \n    \"dateObservedFrom\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2018-08-07T11:10:00Z\"  \n        }  \n    },  \n    \"dateObservedTo\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2018-08-07T11:15:00Z\"  \n        }  \n    },  \n    \"direction\": {  \n        \"type\": \"Property\",  \n        \"value\": \"inbound\"  \n    },  \n    \"location\": {  \n        \"type\": \"GeoProperty\",  \n        \"value\": {  \n            \"type\": \"LineString\",  \n            \"coordinates\": [  \n                [  \n                    -4.73735395519672,  \n                    41.6538181849672  \n                ],  \n                [  \n                    -4.73414858659993,  \n                    41.6600594193478  \n                ],  \n                [  \n                    -4.73447575302641,  \n                    41.659585195093  \n                ]  \n            ]  \n        }  \n    },  \n    \"peopleCount\": {  \n        \"type\": \"Property\",  \n        \"value\": 100  \n    },  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Transportation/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### CrowdFlowObserved NGSI-LD normalized Example    \n\rHere is an example of a CrowdFlowObserved in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:CrowdFlowObserved:Valladolid_1\",  \n    \"type\": \"CrowdFlowObserved\",  \n    \"averageHeadwayTime\": 5,  \n    \"congested\": false,  \n    \"dateObserved\": \"2018-08-07T11:10:00/2018-08-07T11:15:00\",  \n    \"dateObservedFrom\": {  \n        \"@type\": \"DateTime\",  \n        \"@value\": \"2018-08-07T11:10:00Z\"  \n    },  \n    \"dateObservedTo\": {  \n        \"@type\": \"DateTime\",  \n        \"@value\": \"2018-08-07T11:15:00Z\"  \n    },  \n    \"direction\": \"inbound\",  \n    \"location\": {  \n        \"coordinates\": [  \n            [  \n                -4.73735395519672,  \n                41.6538181849672  \n            ],  \n            [  \n                -4.73414858659993,  \n                41.6600594193478  \n            ],  \n            [  \n                -4.73447575302641,  \n                41.659585195093  \n            ]  \n        ],  \n        \"type\": \"LineString\"  \n    },  \n    \"peopleCount\": 100,  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: EVChargingStation
        - MODEL_DESCRIPTION: EV Charging Station
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A Data Model for Electric Vehicle Charging
                Stations., mail: null, organization: null, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              EVChargingStation of the Subject dataModel.Transportation.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: EVChargingStation  \n=========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/EVChargingStation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **EV Charging Station**  \n\rversion: 0.1.0  \n\n\r## List of properties  \n\n\r- `acceptedPaymentMethod`: Type(s) of charge when using this station. Enum:'ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'  \r- `address`: The mailing address  \r- `allowedVehicleType`: Vehicle type(s) which can be charged. Enum:'bicycle, bus, car, caravan, motorcycle, motorscooter, truck'   \r- `alternateName`: An alternative name for this item  \r- `amountCollected`: Amount collected towards the service corresponding to this observation.  \r- `amperage`: The total amperage offered by the charging station.  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `availableCapacity`: The number of vehicles which currently can be charged. It must lower or equal than `capacity`.  \r- `capacity`: The total number of vehicles which can be charged at the same time. The total number of sockets can be higher.   \r- `chargeType`: Type(s) of charge when using this station. Enum:'annualPayment, flat, free, monthlyPayment, other'  \r- `chargingUnitId`: The Id of the charging point in the EV charging station corresponding to this observation.  \r- `contactPoint`: The details to contact with the item.  \r- `dataDescriptor`: URI pointing to the data-descriptor entity  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `endDateTime`: Reported end time corresponding to this observation.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `network`: The name of the Network, with that the operator cooperates.   \r- `observationDateTime`: Last reported time of observation.  \r- `openingHours`: Opening hours of the charging station.   \r- `operator`: Charging station's operator.   \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `powerConsumption`: Power consumed by the entity corresponding to this observation.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `socketNumber`: The total number of sockets offered by this charging station  \r- `socketType`: The type of sockets offered by this station. Enum:'Caravan_Mains_Socket, CHAdeMO, CCS/SAE, Dual_CHAdeMO, Dual_J-1772, Dual_Mennekes, J-1772, Mennekes, Other, Tesla, Type2, Type3, Wall_Euro'  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `startDateTime`: Reported start time corresponding to this observation.  \r- `stationName`: The name station corresponding to this observation. It can be the name of bike docking station, charging station, etc.  \r- `status`: Status of the charging station. Enum:'almostEmpty, almostFull, empty, full, outOfService, withIncidence, working'. Or any other application-specific.  \r- `taxAmountCollected`: The amount of tax levied on the products, things and services which includes sales tax, value-added tax, service tax, Good and Service tax, customs duty, etc.  \r- `transactionId`: Unique transaction Id of the entity corresponding to this observation.  \r- `transactionType`: Type of the transaction based on the mode of payment (For eg. mobile/UPI, card, etc) or mode of service (For eg. Issue, ReIssue, Entry, Exit etc.) corresponding to this observation.  \r- `type`: NGSI Entity type. It has to be EVChargingStation  \r- `vehicleType`: Type of vehicle from the point of view of its structural characteristics. This is different than the vehicle category . Enum:'agriculturalVehicle, ambulance, anyVehicle, articulatedVehicle, autorickshaw, bicycle, binTrolley, BRT bus, BRT minibus, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, cleaningTrolley, compactor, constructionOrMaintenanceVehicle, dumper, e-moped, e-scooter, e-motorcycle,fire tender, fourWheelDrive, highSidedVehicle, hopper, lorry, minibus, moped, motorcycle, motorcycleWithSideCar, motorscooter, police van, sweepingMachine, tanker, tempo, threeWheeledVehicle, tipper, trailer, tram, twoWheeledVehicle, trolley, van, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'. The following values defined by _VehicleTypeEnum_ and _VehicleTypeEnum2_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/_static/umlmodel/v2.3/index.htm)  \r- `voltage`: The total voltage offered by the charging station  \r  \n\rRequired properties  \n- `allowedVehicleType`  \r- `capacity`  \r- `id`  \r- `socketType`  \r- `type`  \r  \n\rA public charging station supplying energy to electrical vehicles. The charge time depends on the maximum power output of the station, the number of vehicles currently charging and the current battery level.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nEVChargingStation:    \n  description: 'EV Charging Station'    \n  properties:    \n    acceptedPaymentMethod:    \n      description: 'Type(s) of charge when using this station. Enum:''ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'''    \n      items:    \n        enum:    \n          - ByBankTransferInAdvance    \n          - ByInvoice    \n          - Cash    \n          - CheckInAdvance    \n          - COD    \n          - DirectDebit    \n          - GoogleCheckout    \n          - PayPal    \n          - PaySwarm    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    allowedVehicleType:    \n      description: 'Vehicle type(s) which can be charged. Enum:''bicycle, bus, car, caravan, motorcycle, motorscooter, truck'' '    \n      items:    \n        enum:    \n          - bicycle    \n          - bus    \n          - car    \n          - caravan    \n          - motorcycle    \n          - motorscooter    \n          - truck    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    amountCollected:    \n      description: 'Amount collected towards the service corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    amperage:    \n      description: 'The total amperage offered by the charging station.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n        units: 'Ampers (A)'    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    availableCapacity:    \n      description: 'The number of vehicles which currently can be charged. It must lower or equal than `capacity`.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    capacity:    \n      description: 'The total number of vehicles which can be charged at the same time. The total number of sockets can be higher. '    \n      minimum: 1    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    chargeType:    \n      description: 'Type(s) of charge when using this station. Enum:''annualPayment, flat, free, monthlyPayment, other'''    \n      items:    \n        enum:    \n          - annualPayment    \n          - flat    \n          - free    \n          - monthlyPayment    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    chargingUnitId:    \n      description: 'The Id of the charging point in the EV charging station corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    contactPoint:    \n      description: 'The details to contact with the item.'    \n      properties:    \n        areaServed:    \n          description: 'Property. The geographic area where a service or offered item is provided. Supersedes serviceArea.'    \n          type: string    \n        availabilityRestriction:    \n          anyOf:    \n            - description: 'Property. Array of identifiers format of any NGSI entity.'    \n              items:    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              type: array    \n            - description: 'Property. Array of identifiers format of any NGSI entity.'    \n              items:    \n                format: uri    \n                type: string    \n              type: array    \n          description: 'Relationship. Model:''http://schema.org/hoursAvailable''. This property links a contact point to information about when the contact point is not available. The details are provided using the Opening Hours Specification class.'    \n        availableLanguage:    \n          anyOf:    \n            - anyOf:    \n                - type: string    \n                - items:    \n                    type: string    \n                  type: array    \n          description: 'Property. Model:''http://schema.org/availableLanguage''. A language someone may use with or at the item, service or place. Please use one of the language codes from the IETF BCP 47 standard. It is implemented the Text option but it could be also Language'    \n        contactOption:    \n          anyOf:    \n            - type: string    \n            - items:    \n                type: string    \n              type: array    \n          description: 'Property. Model:''http://schema.org/contactOption''. An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).'    \n        contactType:    \n          description: 'Property. Contact type of this item.'    \n          type: string    \n        email:    \n          description: 'Property. Email address of owner.'    \n          format: idn-email    \n          type: string    \n        faxNumber:    \n          description: 'Property. Model:''http://schema.org/Text''. The fax number.'    \n          type: string    \n        name:    \n          description: 'Property. The name of this item.'    \n          type: string    \n        productSupported:    \n          description: 'Property. Model:''http://schema.org/Text''. The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. \"iPhone\") or a general category of products or services (e.g. \"smartphones\").'    \n          type: string    \n        telephone:    \n          description: 'Property. Telephone of this contact.'    \n          type: string    \n        url:    \n          description: 'Property. URL which provides a description or further information about this item.'    \n          format: uri    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/ContactPoint    \n        type: Property    \n    dataDescriptor:    \n      description: 'URI pointing to the data-descriptor entity'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    endDateTime:    \n      description: 'Reported end time corresponding to this observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &evchargingstation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    network:    \n      description: 'The name of the Network, with that the operator cooperates. '    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    openingHours:    \n      description: 'Opening hours of the charging station. '    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/openingHours    \n        type: Property    \n    operator:    \n      description: 'Charging station''s operator. '    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *evchargingstation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    powerConsumption:    \n      description: 'Power consumed by the entity corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    socketNumber:    \n      description: 'The total number of sockets offered by this charging station'    \n      minimum: 1    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number.    \n        type: Property    \n    socketType:    \n      description: 'The type of sockets offered by this station. Enum:''Caravan_Mains_Socket, CHAdeMO, CCS/SAE, Dual_CHAdeMO, Dual_J-1772, Dual_Mennekes, J-1772, Mennekes, Other, Tesla, Type2, Type3, Wall_Euro'''    \n      items:    \n        enum:    \n          - Caravan_Mains_Socket    \n          - CHAdeMO    \n          - CCS/SAE    \n          - Dual_CHAdeMO    \n          - Dual_J-1772    \n          - Dual_Mennekes    \n          - J-1772    \n          - Mennekes    \n          - Other    \n          - Tesla    \n          - Type2    \n          - Type3    \n          - Wall_Euro    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    startDateTime:    \n      description: 'Reported start time corresponding to this observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stationName:    \n      description: 'The name station corresponding to this observation. It can be the name of bike docking station, charging station, etc.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    status:    \n      description: 'Status of the charging station. Enum:''almostEmpty, almostFull, empty, full, outOfService, withIncidence, working''. Or any other application-specific.'    \n      enum:    \n        - almostEmpty    \n        - almostFull    \n        - empty    \n        - full    \n        - outOfService    \n        - withIncidence    \n        - working    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    taxAmountCollected:    \n      description: 'The amount of tax levied on the products, things and services which includes sales tax, value-added tax, service tax, Good and Service tax, customs duty, etc.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    transactionId:    \n      description: 'Unique transaction Id of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    transactionType:    \n      description: 'Type of the transaction based on the mode of payment (For eg. mobile/UPI, card, etc) or mode of service (For eg. Issue, ReIssue, Entry, Exit etc.) corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be EVChargingStation'    \n      enum:    \n        - EVChargingStation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    vehicleType:    \n      description: 'Type of vehicle from the point of view of its structural characteristics. This is different than the vehicle category . Enum:''agriculturalVehicle, ambulance, anyVehicle, articulatedVehicle, autorickshaw, bicycle, binTrolley, BRT bus, BRT minibus, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, cleaningTrolley, compactor, constructionOrMaintenanceVehicle, dumper, e-moped, e-scooter, e-motorcycle,fire tender, fourWheelDrive, highSidedVehicle, hopper, lorry, minibus, moped, motorcycle, motorcycleWithSideCar, motorscooter, police van, sweepingMachine, tanker, tempo, threeWheeledVehicle, tipper, trailer, tram, twoWheeledVehicle, trolley, van, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other''. The following values defined by _VehicleTypeEnum_ and _VehicleTypeEnum2_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/_static/umlmodel/v2.3/index.htm)'    \n      enum:    \n        - agriculturalVehicle    \n        - ambulance    \n        - articulatedVehicle    \n        - autorickshaw    \n        - bicycle    \n        - binTrolley    \n        - 'BRT bus'    \n        - 'BRT minibus'    \n        - bus    \n        - car    \n        - caravan    \n        - carOrLightVehicle    \n        - carWithCaravan    \n        - carWithTrailer    \n        - cleaningTrolley    \n        - compactor    \n        - constructionOrMaintenanceVehicle    \n        - dumper    \n        - e-moped    \n        - e-scooter    \n        - e-motorcycle    \n        - 'fire tender'    \n        - fourWheelDrive    \n        - highSidedVehicle    \n        - hopper    \n        - lorry    \n        - minibus    \n        - moped    \n        - motorcycle    \n        - motorcycleWithSideCar    \n        - motorscooter    \n        - 'police van'    \n        - sweepingMachine    \n        - tanker    \n        - tempo    \n        - threeWheeledVehicle    \n        - tipper    \n        - trailer    \n        - tram    \n        - twoWheeledVehicle    \n        - trolley    \n        - van    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    voltage:    \n      description: 'The total voltage offered by the charging station'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n        units: 'Volts (V)'    \n  required:    \n    - id    \n    - type    \n    - socketType    \n    - capacity    \n    - allowedVehicleType    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Transportation/blob/master/EVChargingStation/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Transportation/EVChargingStation/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.1.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### EVChargingStation NGSI-v2 key-values Example    \n\rHere is an example of a EVChargingStation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:EVChargingStation:ValladolI+D_Covaresa\",  \n  \"type\": \"EVChargingStation\",  \n  \"name\": \"Agencia de Innovaci\u00f3n\",  \n  \"location\": {  \n    \"coordinates\": [-4.747901, 41.618265],  \n    \"type\": \"Point\"  \n  },  \n  \"capacity\": 2,  \n  \"socketType\": [\"Wall_Euro\"],  \n  \"address\": {  \n    \"streetAddress\": \"Paseo de Zorrilla, 191\",  \n    \"addressLocality\": \"Valladolid\",  \n    \"addressCountry\": \"Espa\u00f1a\"  \n  },  \n  \"contactPoint\": {  \n    \"email\": \"vehiculoelectrico@ava.es\"  \n  },  \n  \"operator\": \"Iberdrola\",  \n  \"allowedVehicleType\": [\"car\"],  \n  \"chargeType\": [\"free\"],  \n  \"source\": \"https://openchargemap.org/\",  \n   \"powerConsumption\": 10.0,  \n  \"chargingUnitId\": \"PZEV01-DeltaBharatAC001-SCTLGandhiPark001\",  \n  \"transactionId\": \"84068784\",  \n  \"transactionType\": \"RFID\",  \n  \"stationName\": \"SmartCityTvmGandhiParkOne\",  \n  \"amountCollected\": 0.08,  \n  \"taxAmountCollected\": 0.0,  \n  \"endDateTime\": \"2022-06-28T20:28:41+05:30\",  \n  \"startDateTime\": \"2022-06-28T20:27:27+05:30\",  \n  \"vehicleType\": \"e-motorcycle\",  \n  \"observationDateTime\": \"2022-06-28T20:27:29+05:30\"  \n}  \n```  \n\r#### EVChargingStation NGSI-v2 normalized Example    \n\rHere is an example of a EVChargingStation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:EVChargingStation:ValladolI+D_Covaresa\",  \n  \"type\": \"EVChargingStation\",  \n  \"socketType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"Wall_Euro\"  \n    ]  \n  },  \n  \"capacity\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Agencia de Innovaci\\u00f3n\"  \n  },  \n  \"allowedVehicleType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"https://openchargemap.org/\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.747901,  \n        41.618265  \n      ]  \n    }  \n  },  \n  \"chargeType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"free\"  \n    ]  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressLocality\": \"Valladolid\",  \n      \"addressCountry\": \"Espa\\u00f1a\",  \n      \"streetAddress\": \"Paseo de Zorrilla, 191\"  \n    }  \n  },  \n  \"operator\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Iberdrola\"  \n  },  \n  \"contactPoint\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"email\": \"vehiculoelectrico@ava.es\"  \n    }  \n  },  \n  \"powerConsumption\": {  \n    \"type\": \"number\",  \n    \"value\": 10.0  \n  },  \n  \"chargingUnitId\": {  \n    \"type\": \"string\",  \n    \"value\": \"PZEV01-DeltaBharatAC001-SCTLGandhiPark001\"  \n  },  \n  \"transactionId\": {  \n    \"type\": \"string\",  \n    \"value\": \"84068784\"  \n  },  \n  \"transactionType\": {  \n    \"type\": \"string\",  \n    \"value\": \"RFID\"  \n  },  \n  \"stationName\": {  \n    \"type\": \"string\",  \n    \"value\": \"SmartCityTvmGandhiParkOne\"  \n  },  \n  \"amountCollected\": {  \n    \"type\": \"number\",  \n    \"value\": 0.08  \n  },  \n  \"taxAmountCollected\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.0  \n  },  \n  \"endDateTime\": {  \n    \"format\": \"date-time\",  \n    \"type\": \"string\",  \n    \"value\": \"2022-06-28T20:28:41+05:30\"  \n  },  \n  \"startDateTime\": {  \n    \"format\": \"date-time\",  \n    \"type\": \"string\",  \n    \"value\": \"2022-06-28T20:27:27+05:30\"  \n  },  \n  \"vehicleType\": {  \n    \"type\": \"string\",  \n    \"value\": \"e-motorcycle\"  \n  },  \n  \"observationDateTime\": {  \n    \"format\": \"date-time\",  \n    \"type\": \"string\",  \n    \"value\": \"2022-06-28T20:27:29+05:30\"  \n  }  \n}  \n```  \n\r#### EVChargingStation NGSI-LD key-values Example    \n\rHere is an example of a EVChargingStation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:EVChargingStation:ValladolI+D_Covaresa\",  \n  \"type\": \"EVChargingStation\",  \n  \"name\": \"Agencia de Innovaci\u00f3n\",  \n  \"location\": {  \n    \"coordinates\": [  \n      -4.747901,  \n      41.618265  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"capacity\": 2,  \n  \"socketType\": [  \n    \"Wall_Euro\"  \n  ],  \n  \"address\": {  \n    \"streetAddress\": \"Paseo de Zorrilla, 191\",  \n    \"addressLocality\": \"Valladolid\",  \n    \"addressCountry\": \"Espa\u00f1a\"  \n  },  \n  \"contactPoint\": {  \n    \"email\": \"vehiculoelectrico@ava.es\"  \n  },  \n  \"operator\": \"Iberdrola\",  \n  \"allowedVehicleType\": [  \n    \"car\"  \n  ],  \n  \"chargeType\": [  \n    \"free\"  \n  ],  \n  \"source\": \"https://openchargemap.org/\",  \n  \"powerConsumption\": 10.0,  \n  \"chargingUnitId\": \"PZEV01-DeltaBharatAC001-SCTLGandhiPark001\",  \n  \"transactionId\": \"84068784\",  \n  \"transactionType\": \"RFID\",  \n  \"stationName\": \"SmartCityTvmGandhiParkOne\",  \n  \"amountCollected\": 0.08,  \n  \"taxAmountCollected\": 0.0,  \n  \"endDateTime\": \"2022-06-28T20:28:41+05:30\",  \n  \"startDateTime\": \"2022-06-28T20:27:27+05:30\",  \n  \"vehicleType\": \"e-motorcycle\",  \n  \"observationDateTime\": \"2022-06-28T20:27:29+05:30\",  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Transportation/context.jsonld\",  \n    \"iudx:EVChargingStation\"  \n  ]  \n}  \n```  \n\r#### EVChargingStation NGSI-LD normalized Example    \n\rHere is an example of a EVChargingStation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:EVChargingStation:ValladolI+D_Covaresa\",  \n  \"type\": \"EVChargingStation\",  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"Espa\\u00f1a\",  \n      \"addressLocality\": \"Valladolid\",  \n      \"streetAddress\": \"Paseo de Zorrilla, 191\"  \n    }  \n  },  \n  \"allowedVehicleType\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"capacity\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"chargeType\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"free\"  \n    ]  \n  },  \n  \"contactPoint\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"email\": \"vehiculoelectrico@ava.es\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"coordinates\": [  \n        -4.747901,  \n        41.618265  \n      ],  \n      \"type\": \"Point\"  \n    }  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Agencia de Innovaci\\u00f3n\"  \n  },  \n  \"operator\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Iberdrola\"  \n  },  \n  \"socketType\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Wall_Euro\"  \n    ]  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://openchargemap.org/\"  \n  },  \n  \"powerConsumption\": {  \n    \"type\": \"Property\",  \n    \"value\": 10.0  \n  },  \n  \"chargingUnitId\": {  \n    \"type\": \"string\",  \n    \"value\": \"PZEV01-DeltaBharatAC001-SCTLGandhiPark001\"  \n  },  \n  \"transactionId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"84068784\"  \n  },  \n  \"transactionType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"RFID\"  \n  },  \n  \"stationName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SmartCityTvmGandhiParkOne\"  \n  },  \n  \"amountCollected\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.08  \n  },  \n  \"taxAmountCollected\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.0  \n  },  \n  \"endDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"2022-06-28T20:28:41+05:30\"  \n    }  \n  },  \n  \"startDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"2022-06-28T20:27:27+05:30\"  \n    }  \n  },  \n  \"vehicleType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"e-motorcycle\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"2022-06-28T20:27:29+05:30\"  \n    }  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Transportation/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: FareCollectionSystem
        - MODEL_DESCRIPTION: A public transit fare collection system Data Model
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A public transit fare collection system
                Data Model., mail: null, organization: IUDX, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              FareCollectionSystem of the Subject Transportation.

        - MODEL_DOCUMENTATION: "Entity: FareCollectionSystem  \n============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/FareCollectionSystem/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A public transit fare collection system Data Model**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `cardId`: Unique ticket Id of the transaction or Id of the smart card used in the transaction.  \r- `currentTripCount`: The current count of trips made by the vehicle corresponding to this observation on the given day of operation.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `destinationStopCategory`: Type of the destination bus stop corresponding to this observation.  \r- `destinationStopId`: Unique Id of the bus stop at which the passenger deboards from the bus corresponding to this observation.  \r- `destinationStopName`: The name of the destination bus stop corresponding to this observation.  \r- `direction_id`: Indicates the direction of travel of the vehicle corresponding to this observation, can be referenced from the GTFS static feed trips.txt. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `entryAreaCode`: Area code of the passenger boarding stop (used by the fare collection agency). For example, whether the stop is city-bus-service stop or brts stop or other service type stop etc.  \r- `equipmentCompanyCode`: Company/Agency code for the transaction equipment (used by fare collection agency). For example, 103 - CBS (city bus service),102 - BRTS etc.  \r- `equipmentId`: Unique Id of the equipment corresponding to this observation.  \r- `equipmentSequenceNumber`: Sequence number for the given equipment.  \r- `equipmentStopId`: Stop Id (BRTS) at which the equipment corresponding to this transaction is installed.  \r- `equipmentType`: Type of equipment or the name of the equipment corresponding to this observation.  \r- `equipmentTypeCode`: Unique code indicating the type of equipment used in the transaction (used by fare collection agency).ENUM [1B, 42, 02, 08, 41] 1B - POS, 42 - HTT, 02- Mobile, 08- Fare Gate, 41- Pole Validator  \r- `exitAreaCode`: Area code of the passenger alighting stop (used by the fare collection agency). For example, whether the stop is city-bus-service stop or BRTS stop or other service type stop etc.  \r- `fareForAdult`: The fare for an adult in the journey corresponding to this observation.  \r- `fareForChild`: The fare for a child in the journey corresponding to this observation.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `occupancyLevel`: Occupancy level in the public transit bus corresponding to this observation. 'Red' indicates the congestion level in the bus is HIGH, 'Yellow' indicates the congestion level in the bus is MODERATE and 'Green' indicates the congestion level in the bus is LOW.  \r- `originDestinationCode`: The code for the origin and destination stops corresponding to this observation.  \r- `originStopCategory`: Type of the origin bus stop corresponding to this observation.  \r- `originStopId`: Unique Id of the bus stop at which the passenger boards into the bus corresponding to this observation.  \r- `originStopName`: The name of the origin bus stop corresponding to this observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `passengerCount`: Number of passengers travelling in the public transit bus corresponding to this observation. This count is computed based on the realtime ticketing transactions in the public transit bus.  \r- `route_id`: Route Id assigned to the route on which the bus/vehicle corresponding to the bus in this observation is currently plying on. SameAs: 'route_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `shiftOfOperation`: Shift of operation of the public transit vehicle operated by the fare collection agency/ public transit agency or the employee corresponding to this observation. Indicated as '1' when the vehicle operates in the first shift, '2' when the vehicle operates in the second shift and '3' when the vehicle operates in the third shift.  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `stage`: Total number of stages from the origin bus stop to the destination bus stop.  \r- `ticketTypeCode`: Unique ticket type code of the corresponding trip.  \r- `transactionDateTime`: Date-time of the transaction corresponding to this observation.  \r- `transactionType`: Type of the transaction corresponding to this observation. For Eg - Issue, ReIssue, Entry, Exit etc.  \r- `transactionTypeDescription`: Description of the transaction type. Explanation of various transactionTypeId codes used in the data.  \r- `transactionVehicleNum`: Code used by fare collection agency for the vehicle number corresponding to the transaction.  \r- `travelDistance`: The distance between the origin bus stop and the destination bus stop corresponding to this observation.  \r- `trip_id`: Trip Id/Trip name alloted to the bus corresponding to this observation, in consideration to the time of the day and the direction of the trip on the given routeId. SameAs: 'trip_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `type`: NGSI entity type. It has to be FareCollectionSystem  \r- `vehicle_label`: User visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle. SameAs: 'label' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)  \r  \n\rRequired properties  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nFareCollectionSystem:    \n  description: 'A public transit fare collection system Data Model'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    cardId:    \n      description: 'Unique ticket Id of the transaction or Id of the smart card used in the transaction.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    currentTripCount:    \n      description: 'The current count of trips made by the vehicle corresponding to this observation on the given day of operation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    destinationStopCategory:    \n      description: 'Type of the destination bus stop corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    destinationStopId:    \n      description: 'Unique Id of the bus stop at which the passenger deboards from the bus corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    destinationStopName:    \n      description: 'The name of the destination bus stop corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    direction_id:    \n      description: \"Indicates the direction of travel of the vehicle corresponding to this observation, can be referenced from the GTFS static feed trips.txt. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    entryAreaCode:    \n      description: 'Area code of the passenger boarding stop (used by the fare collection agency). For example, whether the stop is city-bus-service stop or brts stop or other service type stop etc.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    equipmentCompanyCode:    \n      description: 'Company/Agency code for the transaction equipment (used by fare collection agency). For example, 103 - CBS (city bus service),102 - BRTS etc.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    equipmentId:    \n      description: 'Unique Id of the equipment corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    equipmentSequenceNumber:    \n      description: 'Sequence number for the given equipment.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    equipmentStopId:    \n      description: 'Stop Id (BRTS) at which the equipment corresponding to this transaction is installed.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    equipmentType:    \n      description: 'Type of equipment or the name of the equipment corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    equipmentTypeCode:    \n      description: 'Unique code indicating the type of equipment used in the transaction (used by fare collection agency).ENUM [1B, 42, 02, 08, 41] 1B - POS, 42 - HTT, 02- Mobile, 08- Fare Gate, 41- Pole Validator'    \n      enum:    \n        - 1B    \n        - 42    \n        - 02    \n        - 08    \n        - 41    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    exitAreaCode:    \n      description: 'Area code of the passenger alighting stop (used by the fare collection agency). For example, whether the stop is city-bus-service stop or BRTS stop or other service type stop etc.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    fareForAdult:    \n      description: 'The fare for an adult in the journey corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    fareForChild:    \n      description: 'The fare for a child in the journey corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    id:    \n      anyOf: &farecollectionsystem_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    occupancyLevel:    \n      description: 'Occupancy level in the public transit bus corresponding to this observation. ''Red'' indicates the congestion level in the bus is HIGH, ''Yellow'' indicates the congestion level in the bus is MODERATE and ''Green'' indicates the congestion level in the bus is LOW.'    \n      enum:    \n        - Red    \n        - Yellow    \n        - Green    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    originDestinationCode:    \n      description: 'The code for the origin and destination stops corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    originStopCategory:    \n      description: 'Type of the origin bus stop corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    originStopId:    \n      description: 'Unique Id of the bus stop at which the passenger boards into the bus corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    originStopName:    \n      description: 'The name of the origin bus stop corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *farecollectionsystem_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    passengerCount:    \n      description: 'Number of passengers travelling in the public transit bus corresponding to this observation. This count is computed based on the realtime ticketing transactions in the public transit bus.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    route_id:    \n      description: \"Route Id assigned to the route on which the bus/vehicle corresponding to the bus in this observation is currently plying on. SameAs: 'route_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    shiftOfOperation:    \n      description: 'Shift of operation of the public transit vehicle operated by the fare collection agency/ public transit agency or the employee corresponding to this observation. Indicated as ''1'' when the vehicle operates in the first shift, ''2'' when the vehicle operates in the second shift and ''3'' when the vehicle operates in the third shift.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stage:    \n      description: 'Total number of stages from the origin bus stop to the destination bus stop.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    ticketTypeCode:    \n      description: 'Unique ticket type code of the corresponding trip.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    transactionDateTime:    \n      description: 'Date-time of the transaction corresponding to this observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    transactionType:    \n      description: 'Type of the transaction corresponding to this observation. For Eg - Issue, ReIssue, Entry, Exit etc.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    transactionTypeDescription:    \n      description: 'Description of the transaction type. Explanation of various transactionTypeId codes used in the data.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    transactionVehicleNum:    \n      description: 'Code used by fare collection agency for the vehicle number corresponding to the transaction.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    travelDistance:    \n      description: 'The distance between the origin bus stop and the destination bus stop corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    trip_id:    \n      description: \"Trip Id/Trip name alloted to the bus corresponding to this observation, in consideration to the time of the day and the direction of the trip on the given routeId. SameAs: 'trip_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be FareCollectionSystem'    \n      enum:    \n        - FareCollectionSystem    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    vehicle_label:    \n      description: \"User visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle. SameAs: 'label' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)\"    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n  required: []    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### FareCollectionSystem NGSI-v2 key-values Example    \n\rHere is an example of a FareCollectionSystem in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:FareCollectionSystem:id:RJSB:34513580\",  \n  \"type\": \"FareCollectionSystem\",  \n  \"address\": {  \n    \"addressCountry\": \"France\",  \n    \"addressLocality\": \"Nice\",  \n    \"addressRegion\": \"Provenza-Alpes-Costa Azul\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"postalCode\": \"06000\",  \n    \"streetAddress\": \"Av. Nicolas II\"  \n  },  \n  \"alternateName\": \"\",  \n  \"areaServed\": \"Nice\",  \n  \"cardId\": \"987201910\",  \n  \"currentTripCount\": 12,  \n  \"dataProvider\": \"\",  \n  \"dateCreated\": \"2020-11-02T06:16:42Z\",  \n  \"dateModified\": \"2020-12-27T15:13:17Z\",  \n  \"description\": \"Fare collection system Nize for regional routes\",  \n  \"destinationStopCategory\": \"Airport\",  \n  \"destinationStopId\": \"Nice-Airport\",  \n  \"destinationStopName\": \"Hour risk somebody deal system discussion other plan. Stage the film occur.\",  \n  \"direction_id\": 1,  \n  \"entryAreaCode\": \"city-bus-service\",  \n  \"equipmentCompanyCode\": \"103\",  \n  \"equipmentId\": \"S23\",  \n  \"equipmentSequenceNumber\": 2,  \n  \"equipmentStopId\": \"BRTS-Sen-23\",  \n  \"equipmentType\": \"Entry sensor\",  \n  \"equipmentTypeCode\": \"42\",  \n  \"exitAreaCode\": \"city-bus-service\",  \n  \"fareForAdult\": 4.5,  \n  \"fareForChild\": 3.6,  \n  \"location\": {  \n    \"coordinates\": [  \n      43.7034,  \n      7.2663  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"name\": \"Fare collection system Nize\",  \n  \"observationDateTime\": \"1988-12-24T07:06:19Z\",  \n  \"occupancyLevel\": \"Green\",  \n  \"originDestinationCode\": \"23\",  \n  \"originStopCategory\": \"Bus stop\",  \n  \"originStopId\": \"9\",  \n  \"originStopName\": \"Vauban\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:FareCollectionSystem:items:XMXR:79897582\",  \n    \"urn:ngsi-ld:FareCollectionSystem:items:SKAX:98192518\"  \n  ],  \n  \"passengerCount\": 6,  \n  \"route_id\": \"4\",  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:FareCollectionSystem:items:VSVS:72352464\",  \n    \"urn:ngsi-ld:FareCollectionSystem:items:VMFR:36424993\"  \n  ],  \n  \"shiftOfOperation\": \"2\",  \n  \"source\": \"\",  \n  \"stage\": 4,  \n  \"ticketTypeCode\": \"Normal\",  \n  \"transactionDateTime\": \"2021-08-20T15:45:22Z\",  \n  \"transactionType\": \"Issue\",  \n  \"transactionTypeDescription\": \"Regular Fare.\",  \n  \"transactionTypeId\": \"2401\",  \n  \"transactionVehicleNum\": 23,  \n  \"travelDistance\": 7.5,  \n  \"trip_id\": \"4A\",  \n  \"vehicle_label\": \"5821JZS\"  \n}  \n```  \n\rNot available the example of a FareCollectionSystem in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r#### FareCollectionSystem NGSI-LD key-values Example    \n\rHere is an example of a FareCollectionSystem in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:FareCollectionSystem:id:RJSB:34513580\",  \n  \"type\": \"FareCollectionSystem\",  \n  \"address\": {  \n    \"addressCountry\": \"France\",  \n    \"addressLocality\": \"Nice\",  \n    \"addressRegion\": \"Provenza-Alpes-Costa Azul\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"postalCode\": \"06000\",  \n    \"streetAddress\": \"Av. Nicolas II\"  \n  },  \n  \"alternateName\": \"\",  \n  \"areaServed\": \"Nice\",  \n  \"cardId\": \"987201910\",  \n  \"currentTripCount\": 12,  \n  \"dataProvider\": \"\",  \n  \"dateCreated\": \"2020-11-02T06:16:42Z\",  \n  \"dateModified\": \"2020-12-27T15:13:17Z\",  \n  \"description\": \"Fare collection system Nize for regional routes\",  \n  \"destinationStopCategory\": \"Airport\",  \n  \"destinationStopId\": \"Nice-Airport\",  \n  \"destinationStopName\": \"Hour risk somebody deal system discussion other plan. Stage the film occur.\",  \n  \"direction_id\": 1,  \n  \"entryAreaCode\": \"city-bus-service\",  \n  \"equipmentCompanyCode\": \"103\",  \n  \"equipmentId\": \"S23\",  \n  \"equipmentSequenceNumber\": 2,  \n  \"equipmentStopId\": \"BRTS-Sen-23\",  \n  \"equipmentType\": \"Entry sensor\",  \n  \"equipmentTypeCode\": \"42\",  \n  \"exitAreaCode\": \"city-bus-service\",  \n  \"fareForAdult\": 4.5,  \n  \"fareForChild\": 3.6,  \n  \"location\": {  \n    \"coordinates\": [  \n      43.7034,  \n      7.2663  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"name\": \"Fare collection system Nize\",  \n  \"observationDateTime\": \"1988-12-24T07:06:19Z\",  \n  \"occupancyLevel\": \"Green\",  \n  \"originDestinationCode\": \"23\",  \n  \"originStopCategory\": \"Bus stop\",  \n  \"originStopId\": \"9\",  \n  \"originStopName\": \"Vauban\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:FareCollectionSystem:items:XMXR:79897582\",  \n    \"urn:ngsi-ld:FareCollectionSystem:items:SKAX:98192518\"  \n  ],  \n  \"passengerCount\": 6,  \n  \"route_id\": \"4\",  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:FareCollectionSystem:items:VSVS:72352464\",  \n    \"urn:ngsi-ld:FareCollectionSystem:items:VMFR:36424993\"  \n  ],  \n  \"shiftOfOperation\": \"2\",  \n  \"source\": \"\",  \n  \"stage\": 4,  \n  \"ticketTypeCode\": \"Normal\",  \n  \"transactionDateTime\": \"2021-08-20T15:45:22Z\",  \n  \"transactionType\": \"Issue\",  \n  \"transactionTypeDescription\": \"Regular Fare.\",  \n  \"transactionTypeId\": \"2401\",  \n  \"transactionVehicleNum\": 23,  \n  \"travelDistance\": 7.5,  \n  \"trip_id\": \"4A\",  \n  \"vehicle_label\": \"5821JZS\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### FareCollectionSystem NGSI-LD normalized Example    \n\rHere is an example of a FareCollectionSystem in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:FareCollectionSystem:id:RJSB:34513580\",  \n  \"type\": \"FareCollectionSystem\",  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-11-02T06:16:42Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-12-27T15:13:17Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Fare collection system Nize\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Fare collection system Nize for regional routes\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:FareCollectionSystem:items:XMXR:79897582\",  \n      \"urn:ngsi-ld:FareCollectionSystem:items:SKAX:98192518\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:FareCollectionSystem:items:VSVS:72352464\",  \n      \"urn:ngsi-ld:FareCollectionSystem:items:VMFR:36424993\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        43.7034,  \n        7.2663  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"Av. Nicolas II\",  \n      \"addressLocality\": \"Nice\",  \n      \"addressRegion\": \"Provenza-Alpes-Costa Azul\",  \n      \"addressCountry\": \"France\",  \n      \"postalCode\": \"06000\",  \n      \"postOfficeBoxNumber\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice\"  \n  },  \n  \"destinationStopName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Hour risk somebody deal system discussion other plan. Stage the film occur.\"  \n  },  \n  \"occupancyLevel\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Green\"  \n  },  \n  \"travelDistance\": {  \n    \"type\": \"Property\",  \n    \"value\": 7.5  \n  },  \n  \"passengerCount\": {  \n    \"type\": \"Property\",  \n    \"value\": 6  \n  },  \n  \"transactionType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Issue\"  \n  },  \n  \"ticketTypeCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Normal\"  \n  },  \n  \"originStopName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Vauban\"  \n  },  \n  \"entryAreaCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"city-bus-service\"  \n  },  \n  \"cardId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"987201910\"  \n  },  \n  \"transactionTypeId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"2401\"  \n  },  \n  \"stage\": {  \n    \"type\": \"Property\",  \n    \"value\": 4  \n  },  \n  \"equipmentId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"S23\"  \n  },  \n  \"direction_id\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"equipmentSequenceNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"shiftOfOperation\": {  \n    \"type\": \"Property\",  \n    \"value\": \"2\"  \n  },  \n  \"route_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"4\"  \n  },  \n  \"trip_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"4A\"  \n  },  \n  \"originStopCategory\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Bus stop\"  \n  },  \n  \"vehicle_label\": {  \n    \"type\": \"Property\",  \n    \"value\": \"5821JZS\"  \n  },  \n  \"fareForChild\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.6  \n  },  \n  \"transactionDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-08-20T15:45:22Z\"  \n    }  \n  },  \n  \"destinationStopId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice-Airport\"  \n  },  \n  \"originDestinationCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"23\"  \n  },  \n  \"currentTripCount\": {  \n    \"type\": \"Property\",  \n    \"value\": 12  \n  },  \n  \"equipmentTypeCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"42\"  \n  },  \n  \"destinationStopCategory\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Airport\"  \n  },  \n  \"transactionVehicleNum\": {  \n    \"type\": \"Property\",  \n    \"value\": 23  \n  },  \n  \"fareForAdult\": {  \n    \"type\": \"Property\",  \n    \"value\": 4.5  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1988-12-24T07:06:19Z\"  \n    }  \n  },  \n  \"equipmentCompanyCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"103\"  \n  },  \n  \"transactionTypeDescription\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Regular Fare.\"  \n  },  \n  \"exitAreaCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"city-bus-service\"  \n  },  \n  \"equipmentType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Entry sensor\"  \n  },  \n  \"equipmentStopId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"BRTS-Sen-23\"  \n  },  \n  \"originStopId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"9\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: ItemFlowObserved
        - MODEL_DESCRIPTION: The data model intended to measure an observation linked to the movement of an item at a certain location and over a given period. This Data Model proposes an evolution of two Data Model by merging them and integrating all the attributes of the initial version of [TrafficFlowObserved] and [CrowFlowObserved] and by extension any type of item that we want to analyze the movements. Attributes `vehicleType` and `vehicleSubType` are removed from the initial data Model in order to become generic `itemType` and `itemSubType` of possible values. (people, Type of vehicle, Type of boat, Type of plane, ...).
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              ItemFlowObserved of the Subject [].

        - MODEL_DOCUMENTATION: "Entity: ItemFlowObserved  \n========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/ItemFlowObserved/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The data model intended to measure an observation linked to the movement of an item at a certain location and over a given period. This Data Model proposes an evolution of two Data Model by merging them and integrating all the attributes of the initial version of [TrafficFlowObserved] and [CrowFlowObserved] and by extension any type of item that we want to analyze the movements. Attributes `vehicleType` and `vehicleSubType` are removed from the initial data Model in order to become generic `itemType` and `itemSubType` of possible values. (people, Type of vehicle, Type of boat, Type of plane, ...).**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `averageGapDistance`: Average gap distance between consecutive 2 detected items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter.  \r- `averageHeadwayTime`: Average headway time. Head away time is the time elapsed between two consecutive items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **SEC** represents Second.  \r- `averageLength`: Average length of detected items transiting during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter.  \r- `averageSpeed`: Average speed of detected items transiting during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . Depending the type of Flow, the value can be **KMH** f(vehicule, pedestrian, etc.) represents Kilometer per hour (km/h) or **KNT** represents Knot (Boat).  \r- `congested`: Flags whether there was a crowd congestion during the observation period in the referred walkway. The absence of this attribute means no crowd congestion  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObserved`: Date of the observed entity defined by the user.  \r- `dateObservedFrom`: Observation period : Start date and time in an ISO8601 UTC format.  \r- `dateObservedTo`: Observation period : End date and time in an ISO8601 UTC format.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `intensity`: Total number of items detected during this observation period  \r- `itemSubType`: Reference to an identifier of an existing 'subType' attribute of an NGSI entity (Vehicle / BoatType / Person ) or of a future entity listing an item 'subType' to be counted.  \r- `itemType`: Reference to an identifier of an existing 'Type' attribute of an NGSI entity (Vehicle / BoatType / Person) or of a future entity listing an item 'Type' to be counted. Enum:'people, ship, vehicle, yacht'  \r- `laneDirection`: Usual direction of travel in the lane referred by this observation. This attribute is useful when the observation is not referencing any road segment, allowing to know the direction of travel of the traffic flow observed. See RoadSegment for a description of the semantics of these values.  \r- `laneId`: Lane identifier. Lane identification is done using the conventions defined by RoadSegment entity which are based on [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Forward_%26_backward,_left_%26_right).  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `occupancy`: Fraction of the observation time where a item has been occupying the observed lane  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `refDevice`: The device or devices used to obtain the data expressed by this record  \r- `refRoadSegment`: Concerned road segment on which the observation has been made  \r- `reversedLane`: Flags whether traffic in the lane was reversed during the observation period. The absence of this attribute means no lane reversion  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `speedMax`: Maximum speed detected during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . Depending the type of Flow, the value can be **KMH** (vehicule, pedestrian, ...) represents Kilometer per hour (km/h) or **KNT** represents Knot (Boat).  \r- `speedMin`: Minimum speed detected during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . Depending the type of Flow, the value can be **KMH** (vehicule, pedestrian, ...) represents Kilometer per hour (km/h) or **KNT** represents Knot (Boat).  \r- `type`: NGSI Entity type. It has to be ItemFlowObserved  \r  \n\rRequired properties  \n- `dateObserved`  \r- `id`  \r- `laneId`  \r- `location`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nItemFlowObserved:    \n  description: 'The data model intended to measure an observation linked to the movement of an item at a certain location and over a given period. This Data Model proposes an evolution of two Data Model by merging them and integrating all the attributes of the initial version of [TrafficFlowObserved] and [CrowFlowObserved] and by extension any type of item that we want to analyze the movements. Attributes `vehicleType` and `vehicleSubType` are removed from the initial data Model in order to become generic `itemType` and `itemSubType` of possible values. (people, Type of vehicle, Type of boat, Type of plane, ...).'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    averageGapDistance:    \n      description: 'Average gap distance between consecutive 2 detected items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    averageHeadwayTime:    \n      description: 'Average headway time. Head away time is the time elapsed between two consecutive items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **SEC** represents Second.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    averageLength:    \n      description: 'Average length of detected items transiting during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . For instance, **MTR** represents Meter.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    averageSpeed:    \n      description: 'Average speed of detected items transiting during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . Depending the type of Flow, the value can be **KMH** f(vehicule, pedestrian, etc.) represents Kilometer per hour (km/h) or **KNT** represents Knot (Boat).'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    congested:    \n      description: 'Flags whether there was a crowd congestion during the observation period in the referred walkway. The absence of this attribute means no crowd congestion'    \n      type: boolean    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObserved:    \n      description: 'Date of the observed entity defined by the user.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObservedFrom:    \n      description: 'Observation period : Start date and time in an ISO8601 UTC format.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObservedTo:    \n      description: 'Observation period : End date and time in an ISO8601 UTC format.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &itemflowobserved_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    intensity:    \n      description: 'Total number of items detected during this observation period'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    itemSubType:    \n      description: 'Reference to an identifier of an existing ''subType'' attribute of an NGSI entity (Vehicle / BoatType / Person ) or of a future entity listing an item ''subType'' to be counted.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    itemType:    \n      description: 'Reference to an identifier of an existing ''Type'' attribute of an NGSI entity (Vehicle / BoatType / Person) or of a future entity listing an item ''Type'' to be counted. Enum:''people, ship, vehicle, yacht'''    \n      enum:    \n        - people    \n        - ship    \n        - vehicle    \n        - yacht    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    laneDirection:    \n      description: 'Usual direction of travel in the lane referred by this observation. This attribute is useful when the observation is not referencing any road segment, allowing to know the direction of travel of the traffic flow observed. See RoadSegment for a description of the semantics of these values.'    \n      enum:    \n        - forward    \n        - backward    \n        - inbound    \n        - outbound    \n        - right    \n        - left    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    laneId:    \n      description: 'Lane identifier. Lane identification is done using the conventions defined by RoadSegment entity which are based on [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Forward_%26_backward,_left_%26_right).'    \n      min: 1    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    occupancy:    \n      description: 'Fraction of the observation time where a item has been occupying the observed lane'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *itemflowobserved_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'The device or devices used to obtain the data expressed by this record'    \n      x-ngsi:    \n        type: Relationship    \n    refRoadSegment:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Concerned road segment on which the observation has been made'    \n      x-ngsi:    \n        type: Relationship    \n    reversedLane:    \n      description: 'Flags whether traffic in the lane was reversed during the observation period. The absence of this attribute means no lane reversion'    \n      type: boolean    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    speedMax:    \n      description: 'Maximum speed detected during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . Depending the type of Flow, the value can be **KMH** (vehicule, pedestrian, ...) represents Kilometer per hour (km/h) or **KNT** represents Knot (Boat).'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    speedMin:    \n      description: 'Minimum speed detected during the observation period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes) . Depending the type of Flow, the value can be **KMH** (vehicule, pedestrian, ...) represents Kilometer per hour (km/h) or **KNT** represents Knot (Boat).'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be ItemFlowObserved'    \n      enum:    \n        - ItemFlowObserved    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateObserved    \n    - laneId    \n  type: object    \n```  \n</details>    \n\r## Example payloads    \n\r#### ItemFlowObserved NGSI-v2 key-values Example    \n\rHere is an example of a ItemFlowObserved in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"FlowObserved:BFO-NCE-MNCA-SP-001\",  \n  \"type\": \"ItemFlowObserved\",  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Port Lympia\"  \n  },  \n  \"areaServed\": \"Nice Harbor\",  \n  \"averageGapDistance\": 35.28,  \n  \"averageHeadwayTime\": 156,  \n  \"averageLength\": 7.44,  \n  \"averageSpeed\": 2.7,  \n  \"congested\": false,  \n  \"dateObserved\": \"2020-03-20T16:30:00Z\",  \n  \"dateObservedFrom\": \"2020-03-20T16:30:00Z\",  \n  \"dateObservedTo\": \"2020-03-20T22:30:00Z\",  \n  \"description\": \"Boat Flow Observed from Nice Harbor.\",  \n  \"itemSubType\": \"monoHull\",  \n  \"itemType\": \"yacht\",  \n  \"intensity\": 12,  \n  \"laneDirection\": \"outbound\",  \n  \"laneId\": 1,  \n  \"location\": {  \n    \"coordinates\": [  \n      7.196545,  \n      43.664809  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"maxSpeed\": 3.8,  \n  \"minSpeed\": 2.6,  \n  \"name\": \"BFO-NCE-MNCA-SP-001\",  \n  \"occupancy\": 0.1562,  \n  \"refDevice\": \"Device:BFO-NCE-MNCA-SP-001-Dev-02\",  \n  \"reverseLane\": false  \n}  \n```  \n\r#### ItemFlowObserved NGSI-v2 normalized Example    \n\rHere is an example of a ItemFlowObserved in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"FlowObserved:BFO-NCE-MNCA-SP-001\",  \n  \"type\": \"ItemFlowObserved\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"BFO-NCE-MNCA-SP-001\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Boat Flow Observed from Nice Harbor.\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        7.196545,  \n        43.664809  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"Port Lympia\",  \n      \"addressLocality\": \"Nice\",  \n      \"addressCountry\": \"FR\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Nice Harbor\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-20T16:30:00Z\"  \n  },  \n  \"dateObservedFrom\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-20T16:30:00Z\"  \n  },  \n  \"dateObservedTo\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-20T22:30:00Z\"  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"Device:BFO-NCE-MNCA-SP-001-Dev-02\"  \n  },  \n  \"itemType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"yacht\"  \n  },  \n  \"itemSubType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"monoHull\"  \n  },  \n  \"laneId\": {  \n    \"type\": \"Integer\",  \n    \"value\": 1  \n  },  \n  \"laneDirection\": {  \n    \"type\": \"Text\",  \n    \"value\": \"outbound\"  \n  },  \n  \"reverseLane\": {  \n    \"type\": \"Boolean\",  \n    \"value\": false  \n  },  \n  \"intensity\": {  \n    \"type\": \"Number\",  \n    \"value\": 12  \n  },  \n  \"occupancy\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.1562  \n  },  \n  \"congested\": {  \n    \"type\": \"Boolean\",  \n    \"value\": false  \n  },  \n  \"averageSpeed\": {  \n    \"type\": \"Number\",  \n    \"value\": 2.7  \n  },  \n  \"averageLength\": {  \n    \"type\": \"Number\",  \n    \"value\": 7.44  \n  },  \n  \"averageHeadwayTime\": {  \n    \"type\": \"Number\",  \n    \"value\": 156  \n  },  \n  \"averageGapDistance\": {  \n    \"type\": \"Number\",  \n    \"value\": 35.28  \n  },  \n  \"minSpeed\": {  \n    \"type\": \"Number\",  \n    \"value\": 2.6  \n  },  \n  \"maxSpeed\": {  \n    \"type\": \"Number\",  \n    \"value\": 3.8  \n  }  \n}  \n```  \n\r#### ItemFlowObserved NGSI-LD key-values Example    \n\rHere is an example of a ItemFlowObserved in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"itemFlowObserved:BFO-NCE-MNCA-SP-001\",  \n  \"type\": \"ItemFlowObserved\",  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Port Lympia\"  \n  },  \n  \"areaServed\": \"Nice Harbor\",  \n  \"averageGapDistance\": 35.28,  \n  \"averageHeadwayTime\": 156,  \n  \"averageLength\": 7.44,  \n  \"averageSpeed\": 2.7,  \n  \"congested\": false,  \n  \"dateObserved\": \"2020-03-20T16:30:00Z\",  \n  \"dateObservedFrom\": \"2020-03-20T16:30:00Z\",  \n  \"dateObservedTo\": \"2020-03-20T22:30:00Z\",  \n  \"description\": \"Boat Flow Observed from Nice Harbor.\",  \n  \"intensity\": 12,  \n  \"itemType\": \"yacht\",  \n  \"itemSubtype\": \"monoHull\",  \n  \"laneDirection\": \"outbound\",  \n  \"laneId\": 1,  \n  \"location\": {  \n    \"coordinates\": [  \n      7.196545,  \n      43.664809  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"maxSpeed\": 3.8,  \n  \"minSpeed\": 2.6,  \n  \"name\": \"BFO-NCE-MNCA-SP-001\",  \n  \"occupancy\": 0.1562,  \n  \"refDevice\": \"Device:BFO-NCE-MNCA-SP-001-Dev-02\",  \n  \"reverseLane\": false,  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### ItemFlowObserved NGSI-LD normalized Example    \n\rHere is an example of a ItemFlowObserved in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"FlowObserved:BFO-NCE-MNCA-SP-001\",  \n  \"type\": \"ItemFlowObserved\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"BFO-NCE-MNCA-SP-001\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Boat Flow Observed from Nice Harbor.\"  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        7.196545,  \n        43.664809  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"Port Lympia\",  \n      \"addressLocality\": \"Nice\",  \n      \"addressCountry\": \"FR\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Harbor\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-03-20T16:30:00Z\"  \n    }  \n  },  \n  \"dateObservedFrom\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-03-20T16:30:00Z\"  \n    }  \n  },  \n  \"dateObservedTo\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-03-20T22:30:00Z\"  \n    }  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Device:BFO-NCE-MNCA-SP-001-Dev-02\"  \n  },  \n  \"itemType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"yatching\"  \n  },  \n  \"itemSubType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"monoHull\"  \n  },  \n  \"laneId\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"laneDirection\": {  \n    \"type\": \"Property\",  \n    \"value\": \"outbound\"  \n  },  \n  \"reverseLane\": {  \n    \"type\": \"Property\",  \n    \"value\": false  \n  },  \n  \"intensity\": {  \n    \"type\": \"Property\",  \n    \"value\": 12  \n  },  \n  \"occupancy\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.1562  \n  },  \n  \"congested\": {  \n    \"type\": \"Property\",  \n    \"value\": false  \n  },  \n  \"averageSpeed\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.7,  \n    \"unitCode\": \"KNT\"  \n  },  \n  \"averageLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 7.44,  \n    \"unitCode\": \"MTR\"  \n  },  \n  \"averageHeadwayTime\": {  \n    \"type\": \"Property\",  \n    \"value\": 156,  \n    \"unitCode\": \"SEC\"  \n  },  \n  \"averageGapDistance\": {  \n    \"type\": \"Property\",  \n    \"value\": 35.28,  \n    \"unitCode\": \"MTR\"  \n  },  \n  \"minSpeed\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.6,  \n    \"unitCode\": \"KNT\"  \n  },  \n  \"maxSpeed\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.8,  \n    \"unitCode\": \"KNT\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: RoadSegment
        - MODEL_DESCRIPTION: This entity contains a harmonised geographic and contextual description of a road segment. A collection of road segments are used to describe a Road.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Gert Van de Wouwer, comments: Can be used to model the effect of bridge
                or lock openings on traffic that runs over them., description: Extra attributes
                status and statusDescription to allow modelling temporary road closures., mail: Gert.VandeWouwer@gmail.com,
              organization: Digipolis Antwerpen, project: null, startDate: '2022-01-15'}
            - {adopter: IUDX, comments: null, description: A Data Model for road segments in the
                cities., mail: null, organization: null, project: null, startDate: '2022-08-17'}
            description: This is a compilation list of the current adopters of the data model
              RoadSegment of the Subject dataModel.Transportation.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: RoadSegment  \n===================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/RoadSegment/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised geographic and contextual description of a road segment. A collection of road segments are used to describe a Road.**  \n\rversion: 0.4.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `agency_name`: The agency_name field contains the full name of the agency or organisation responsible for maintenance of the entity under consideration. SameAs: 'agency_name' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `allowedVehicleType`: Vehicle type(s) allowed to transit through this road segment. Enum:'agriculturalVehicle, bicycle, bus, car, caravan, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, trailer, van, anyVehicle'. Allowed values: The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/):  \r- `alternateName`: An alternative name for this item  \r- `annotations`: Annotations about the item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `bridgeCount`: Number of bridges in the road segment corresponding to this observation. Takes 0 (zero) as the value when the road segment has no bridges.  \r- `carriagewayLength`: Total length of the carriage way of the road segment corresponding to this observation.  \r- `carriagewayWidth`: Total width of the carriage way of the road segment corresponding to this observation.  \r- `category`: Allows to convey extra characteristics of a road segment. Enum:'oneway, toll, link'.  `oneway`: Flags whether the road segment can only be used in one direction. If not present it means road segment can be used in both directions (forwards and backwards). See also [http://wiki.openstreetmap.org/wiki/Key:oneway](http://wiki.openstreetmap.org/wiki/Key:oneway). `toll` : Flags whether the road segment is under toll fees. `link` : Flags whether this road segment is an auxiliary link segment for exiting or entering a road. See [https://wiki.openstreetmap.org/wiki/Tag:highway%3Dmotorway_link](https://wiki.openstreetmap.org/wiki/Tag:highway%3Dmotorway_link). Any other value meaningful to an application.  \r- `color`: The color of the product  \r- `culvertCount`: Number of culverts prevalent in the trace of the road corresponding to this observation.  \r- `cyclePathLeftHeight`: Height of the cycle track on the left edge of the road corresponding to this observation.  \r- `cyclePathLeftWidth`: Width of the cycle track on the left edge of the road corresponding to this observation.  \r- `cyclePathMaterial`: Construction material used for laying the cycle path on the sides of the road corresponding to this observation.  \r- `cyclePathPlacement`: Describes the placement of cycle track along the road segment corresponding to this observation. Enum:' ['RIGHT, LEFT, BOTH, NOT_AVAILABLE'  \r- `cyclePathRightHeight`: Height of the cycle track on the right edge of the road corresponding to this observation.  \r- `cyclePathRightWidth`: Width of the cycle track on the right edge of the road corresponding to this observation.  \r- `dataDescriptor`: URI pointing to the data-descriptor entity  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `endKilometer`: The kilometer number (measured from the road's start point) where this road segment ends.   \r- `endPoint`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `id`: Unique identifier of the entity  \r- `image`: An image of the item  \r- `laneInfo`: Describes the aspects of lanes of the road corresponding to this observation.  \r- `laneUsage`: This attribute can be used to convey specific parameters describing each lane. It must contain a string per road segment lane. The element 0 of the array must contain the information of lane 1, and so on. Format of the referred string must be: <lane_direction>, <lane_minimumAllowedSpeed>, <lane_maximumAllowedSpeed>, <lane_maximumAllowedHeight>, <lane_maximumAllowedWeight>. <lane_direction> is a text string with the following allowed values: `forward`. The lane is currently used in the `forwards` direction. `backward`. The lane is currently used in the `backwards` direction. The only mandatory parameter is `lane_direction`. If not specified, the rest of parameters can be assumed to be equal to those specified at entity level.  \r- `length`: Total length of this road segment in kilometers  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maximumAllowedHeight`: Maximum allowed height for vehicles transiting this road segment  \r- `maximumAllowedSpeed`: Maximum allowed speed plying the road segment. More restrictive limits might be applied to specific vehicle types (trucks, caravans, etc.)  \r- `maximumAllowedWeight`: Maximum allowed weight for vehicles transiting this road segment  \r- `maximumAllowedWidth`: Maximum allowed width for vehicles using the entity corresponding to this observation.  \r- `medianHeight`: Height of the median or central reservation in the road corresponding to this observation.  \r- `medianLength`: Length of the median or central reservation in the road corresponding to this observation.  \r- `medianWidth`: Width of the median or central reservation in the road corresponding to this observation.  \r- `minimumAllowedSpeed`: Minimum allowed speed while transiting this road segment  \r- `municipalityInfo`: Municipality information corresponding to this observation.  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `pedestrianPathLeftHeight`: Height of the walkway placed on the left edge of the road corresponding to this observation.  \r- `pedestrianPathLeftWidth`: Width of the walkway placed on the left edge of the road corresponding to this observation.  \r- `pedestrianPathMaterial`: Construction material used for laying the walkway / footpath on the sides of the road corresponding to this observation.  \r- `pedestrianPathPlacement`: Describes the presence and placement of pedestrian along the road segment corresponding to this observation. Enum:'RIGHT, LEFT, BOTH, NOT_AVAILABLE'  \r- `pedestrianPathRightHeight`: Height of the walkway placed on the right edge of the road corresponding to this observation.  \r- `pedestrianPathRightWidth`: Width of the walkway placed on the right edge of the road corresponding to this observation.  \r- `refRoad`: Road to which this road segment belongs to.  \r- `rightOfWayWidth`: Right of Way (RoW) is the total land area available for the roadway. Its width accommodates for carriages way + other necessities + future extension, along the road's alignment.  \r- `roadClass`: The type of road corresponding to this observation. Enum: [OTHER_PUBLIC_ROAD, PRIVATE_ROAD, MINOR_CITY_ROAD, MAJOR_DISTRICT_ROAD, MAJOR_CITY_ROAD, NATIONAL_HIGHWAY, SERVICE_ROAD, STATE_HIGHWAY, OTHER_DISTRICT_ROAD, PORT_ROAD].  \r- `roadDirection`: Represents the direction the road is heading to. Enum:' ['N, S, E, W'. The values N,S,E,W represent North,South,East,West respectively.  \r- `roadId`: Unique internal representation of the road corresponding to this observation.  \r- `roadMaterial`: The construction material used for laying the carriageway corresponding to this observation. For eg. concrete, earthen, tar etc.  \r- `roadName`: The name of the road corresponding to this observation.  \r- `roadWork`: Reasons for the road work in case of urgent intervention. A combination of these values. Enum:'COLLAPSE, DERAILMENT, FIRE, FLOOD, GASLEAK, LANDSLIDE, OTHER, POWERCUT, ROCKFALL, SAGGING, WATERLEAK'.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `startKilometer`: The kilometer number (measured from the road's start point) where this road segment starts.   \r- `startPoint`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `status`: Specific driving conditions on the roadsegment. Use statusDescription for additional information. Enum: \u2018open, closed, limited\u2019.  `open`: the roadsegment can be used in full intended capacity, `closed`: no traffic is possible, e.g. due to roadworks, an open bridge or lock, or any other event preventing traffic. `limited`: traffic is possible, but not in the full capacity.  \r- `statusDescription`: Additional information to the status attribute.  \r- `totalCyclePathWidth`: Total width of the cycle track present in the road corresponding to this observation.  \r- `totalLaneNumber`: Total number of lanes offered by this road segment  \r- `totalPedestrianPathLength`: Total length of the walkway present in the road corresponding to this observation.  \r- `totalPedestrianPathWidth`: Total width of the walkway present in the road corresponding to this observation.  \r- `type`: NGSI Entity type. It has to be RoadSegment  \r- `width`: Road's segment width.  \r  \n\rRequired properties  \n- `allowedVehicleType`  \r- `endPoint`  \r- `id`  \r- `name`  \r- `refRoad`  \r- `startPoint`  \r- `type`  \r  \n\rRoad segments can include several lanes. This data model allows to convey road segments made up of heterogeneous lanes (different in their usage, speed, height, etc.). Lanes are identified by using integer numbers between 1 and n, being number 1 the lane to the right when going forwards. The forward direction is the direction denoted by the vector which goes from the segment\"s start point to the segment\"s end point. This is the same convention as the one used by OpenStreetMap. This entity is primarily associated with the Automotive and Smart City vertical segments and related IoT applications. This data model has been developed in cooperation with mobile operators and the GSMA.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nRoadSegment:    \n  description: 'This entity contains a harmonised geographic and contextual description of a road segment. A collection of road segments are used to describe a Road.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    agency_name:    \n      description: \"The agency_name field contains the full name of the agency or organisation responsible for maintenance of the entity under consideration. SameAs: 'agency_name' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    allowedVehicleType:    \n      description: 'Vehicle type(s) allowed to transit through this road segment. Enum:''agriculturalVehicle, bicycle, bus, car, caravan, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, trailer, van, anyVehicle''. Allowed values: The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/):'    \n      items:    \n        enum:    \n          - agriculturalVehicle    \n          - bicycle    \n          - bus    \n          - car    \n          - caravan    \n          - carWithCaravan    \n          - carWithTrailer    \n          - constructionOrMaintenanceVehicle    \n          - lorry    \n          - moped    \n          - motorcycle    \n          - motorcycleWithSideCar    \n          - motorscooter    \n          - tanker    \n          - trailer    \n          - van    \n          - anyVehicle    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    annotations:    \n      description: 'Annotations about the item'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    bridgeCount:    \n      description: 'Number of bridges in the road segment corresponding to this observation. Takes 0 (zero) as the value when the road segment has no bridges.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    carriagewayLength:    \n      description: 'Total length of the carriage way of the road segment corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    carriagewayWidth:    \n      description: 'Total width of the carriage way of the road segment corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    category:    \n      description: 'Allows to convey extra characteristics of a road segment. Enum:''oneway, toll, link''.  `oneway`: Flags whether the road segment can only be used in one direction. If not present it means road segment can be used in both directions (forwards and backwards). See also [http://wiki.openstreetmap.org/wiki/Key:oneway](http://wiki.openstreetmap.org/wiki/Key:oneway). `toll` : Flags whether the road segment is under toll fees. `link` : Flags whether this road segment is an auxiliary link segment for exiting or entering a road. See [https://wiki.openstreetmap.org/wiki/Tag:highway%3Dmotorway_link](https://wiki.openstreetmap.org/wiki/Tag:highway%3Dmotorway_link). Any other value meaningful to an application.'    \n      items:    \n        enum:    \n          - oneway    \n          - toll    \n          - link    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    color:    \n      description: 'The color of the product'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/color    \n        type: Property    \n    culvertCount:    \n      description: 'Number of culverts prevalent in the trace of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    cyclePathLeftHeight:    \n      description: 'Height of the cycle track on the left edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    cyclePathLeftWidth:    \n      description: 'Width of the cycle track on the left edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    cyclePathMaterial:    \n      description: 'Construction material used for laying the cycle path on the sides of the road corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    cyclePathPlacement:    \n      description: 'Describes the placement of cycle track along the road segment corresponding to this observation. Enum:'' [''RIGHT, LEFT, BOTH, NOT_AVAILABLE'''    \n      enum:    \n        - BOTH    \n        - LEFT    \n        - NOT_AVAILABLE    \n        - RIGHT    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    cyclePathRightHeight:    \n      description: 'Height of the cycle track on the right edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    cyclePathRightWidth:    \n      description: 'Width of the cycle track on the right edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    dataDescriptor:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'URI pointing to the data-descriptor entity'    \n      x-ngsi:    \n        type: Relationship    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    endKilometer:    \n      description: 'The kilometer number (measured from the road''s start point) where this road segment ends. '    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    endPoint:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf: &roadsegment_-_properties_-_location_-_oneof    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    id:    \n      anyOf: &roadsegment_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    image:    \n      description: 'An image of the item'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    laneInfo:    \n      description: 'Describes the aspects of lanes of the road corresponding to this observation.'    \n      properties:    \n        laneDirection:    \n          description: 'Property. Describes the direction in which vehicles are plying on the lane corresponding to this observation. Enum:''FORWARD, BACKWARD, INBOUND, OUTBOUND, RIGHT, LEFT'''    \n          enum:    \n            - BACKWARD    \n            - FORWARD    \n            - INBOUND    \n            - LEFT    \n            - OUTBOUND    \n            - RIGHT    \n          laneLength:    \n            description: 'Property. Length of the lane corresponding to this observation.'    \n            type: number    \n          laneWidth:    \n            description: 'Property. Width of the lane corresponding to this observation.'    \n            type: number    \n          type: string    \n        laneId:    \n          description: 'Property. Unique identification number of the lane corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    laneUsage:    \n      description: 'This attribute can be used to convey specific parameters describing each lane. It must contain a string per road segment lane. The element 0 of the array must contain the information of lane 1, and so on. Format of the referred string must be: <lane_direction>, <lane_minimumAllowedSpeed>, <lane_maximumAllowedSpeed>, <lane_maximumAllowedHeight>, <lane_maximumAllowedWeight>. <lane_direction> is a text string with the following allowed values: `forward`. The lane is currently used in the `forwards` direction. `backward`. The lane is currently used in the `backwards` direction. The only mandatory parameter is `lane_direction`. If not specified, the rest of parameters can be assumed to be equal to those specified at entity level.'    \n      items:    \n        enum:    \n          - forward    \n          - backward    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    length:    \n      description: 'Total length of this road segment in kilometers'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/length    \n        type: Property    \n        units: 'Kilometer (Km)'    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf: *roadsegment_-_properties_-_location_-_oneof    \n      x-ngsi:    \n        type: Geoproperty    \n    maximumAllowedHeight:    \n      description: 'Maximum allowed height for vehicles transiting this road segment'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/height    \n        type: Property    \n        units: 'Meter (m)'    \n    maximumAllowedSpeed:    \n      description: 'Maximum allowed speed plying the road segment. More restrictive limits might be applied to specific vehicle types (trucks, caravans, etc.)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Kilometer per hour (Km/h)'    \n    maximumAllowedWeight:    \n      description: 'Maximum allowed weight for vehicles transiting this road segment'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/weight    \n        type: Property    \n        units: 'Kilogram (Kg)'    \n    maximumAllowedWidth:    \n      description: 'Maximum allowed width for vehicles using the entity corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    medianHeight:    \n      description: 'Height of the median or central reservation in the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    medianLength:    \n      description: 'Length of the median or central reservation in the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    medianWidth:    \n      description: 'Width of the median or central reservation in the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    minimumAllowedSpeed:    \n      description: 'Minimum allowed speed while transiting this road segment'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Kilometer per hour (Km/h)'    \n    municipalityInfo:    \n      description: 'Municipality information corresponding to this observation.'    \n      properties:    \n        cityId:    \n          description: 'Property. Model:''https://schema.org/Text''. City ID corresponding to this observation.'    \n          type: string    \n        cityName:    \n          description: 'Property. Model:''https://schema.org/Text''. City name corresponding to this observation'    \n          type: string    \n        district:    \n          description: 'Property. Model:''https://schema.org/Text''. District name corresponding to this observation.'    \n          type: string    \n        stateName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the state corresponding to this observation.'    \n          type: string    \n        ulbName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the Urban Local Body corresponding to this observation.'    \n          type: string    \n        wardId:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward ID corresponding to this observation.'    \n          type: string    \n        wardName:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward name corresponding to this observation.'    \n          type: string    \n        wardNum:    \n          description: 'Property. Model:''https://schema.org/Number''. Ward number corresponding to this observation.'    \n          type: number    \n        zoneId:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone ID corresponding to this observation.'    \n          type: string    \n        zoneName:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone name corresponding to this observation.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *roadsegment_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    pedestrianPathLeftHeight:    \n      description: 'Height of the walkway placed on the left edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    pedestrianPathLeftWidth:    \n      description: 'Width of the walkway placed on the left edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    pedestrianPathMaterial:    \n      description: 'Construction material used for laying the walkway / footpath on the sides of the road corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    pedestrianPathPlacement:    \n      description: 'Describes the presence and placement of pedestrian along the road segment corresponding to this observation. Enum:''RIGHT, LEFT, BOTH, NOT_AVAILABLE'''    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    pedestrianPathRightHeight:    \n      description: 'Height of the walkway placed on the right edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    pedestrianPathRightWidth:    \n      description: 'Width of the walkway placed on the right edge of the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    refRoad:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Road to which this road segment belongs to.'    \n      x-ngsi:    \n        type: Relationship    \n    rightOfWayWidth:    \n      description: 'Right of Way (RoW) is the total land area available for the roadway. Its width accommodates for carriages way + other necessities + future extension, along the road''s alignment.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    roadClass:    \n      description: 'The type of road corresponding to this observation. Enum: [OTHER_PUBLIC_ROAD, PRIVATE_ROAD, MINOR_CITY_ROAD, MAJOR_DISTRICT_ROAD, MAJOR_CITY_ROAD, NATIONAL_HIGHWAY, SERVICE_ROAD, STATE_HIGHWAY, OTHER_DISTRICT_ROAD, PORT_ROAD].'    \n      enum:    \n        - MAJOR_DISTRICT_ROAD    \n        - MAJOR_CITY_ROAD    \n        - MINOR_CITY_ROAD    \n        - NATIONAL_HIGHWAY    \n        - OTHER_DISTRICT_ROAD    \n        - OTHER_PUBLIC_ROAD    \n        - PORT_ROAD    \n        - PRIVATE_ROAD    \n        - SERVICE_ROAD    \n        - STATE_HIGHWAY    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    roadDirection:    \n      description: 'Represents the direction the road is heading to. Enum:'' [''N, S, E, W''. The values N,S,E,W represent North,South,East,West respectively.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    roadId:    \n      description: 'Unique internal representation of the road corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    roadMaterial:    \n      description: 'The construction material used for laying the carriageway corresponding to this observation. For eg. concrete, earthen, tar etc.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    roadName:    \n      description: 'The name of the road corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    roadWork:    \n      description: 'Reasons for the road work in case of urgent intervention. A combination of these values. Enum:''COLLAPSE, DERAILMENT, FIRE, FLOOD, GASLEAK, LANDSLIDE, OTHER, POWERCUT, ROCKFALL, SAGGING, WATERLEAK''.'    \n      enum:    \n        - COLLAPSE    \n        - DERAILMENT    \n        - FIRE    \n        - FLOOD    \n        - GASLEAK    \n        - LANDSLIDE    \n        - OTHER    \n        - POWERCUT    \n        - ROCKFALL    \n        - SAGGING    \n        - WATERLEAK    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    startKilometer:    \n      description: 'The kilometer number (measured from the road''s start point) where this road segment starts. '    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    startPoint:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf: *roadsegment_-_properties_-_location_-_oneof    \n      x-ngsi:    \n        type: Geoproperty    \n    status:    \n      description: 'Specific driving conditions on the roadsegment. Use statusDescription for additional information. Enum: \u2018open, closed, limited\u2019.  `open`: the roadsegment can be used in full intended capacity, `closed`: no traffic is possible, e.g. due to roadworks, an open bridge or lock, or any other event preventing traffic. `limited`: traffic is possible, but not in the full capacity.'    \n      items:    \n        enum:    \n          - open    \n          - closed    \n          - limited    \n        type: string    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    statusDescription:    \n      description: 'Additional information to the status attribute.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    totalCyclePathWidth:    \n      description: 'Total width of the cycle track present in the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    totalLaneNumber:    \n      description: 'Total number of lanes offered by this road segment'    \n      minimum: 1    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    totalPedestrianPathLength:    \n      description: 'Total length of the walkway present in the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    totalPedestrianPathWidth:    \n      description: 'Total width of the walkway present in the road corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be RoadSegment'    \n      enum:    \n        - RoadSegment    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    width:    \n      description: 'Road''s segment width.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Meter (m)'    \n  required:    \n    - id    \n    - name    \n    - type    \n    - refRoad    \n    - startPoint    \n    - endPoint    \n    - allowedVehicleType    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Transportation/blob/master/RoadSegment/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Transportation/RoadSegment/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.4.1    \n```  \n</details>    \n\rThe properties `laneUsage` and those which convey the maximum allowed parameters can be dynamic, for instance, a lane direction can be temporarily changed to improve traffic conditions.  \n\r## Example payloads    \n\r#### RoadSegment NGSI-v2 key-values Example    \n\rHere is an example of a RoadSegment in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"Spain-RoadSegment-A62-osm-24702186\",  \n  \"type\": \"RoadSegment\",  \n  \"name\": \"Valladolid-Due\u00f1as\",  \n  \"category\": [  \n    \"oneway\"  \n  ],  \n  \"refRoad\": \"Spain-Road-A62\",  \n  \"totalLaneNumber\": 2,  \n  \"maximumAllowedSpeed\": 120,  \n  \"minimumAllowedSpeed\": 60,  \n  \"startPoint\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.7299180606009,  \n      41.6844918725019  \n    ]  \n  },  \n  \"endPoint\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.55167335377909,  \n      41.8570461783071  \n    ]  \n  },  \n  \"allowedVehicleType\": [  \n    \"car\",  \n    \"bus\",  \n    \"lorry\",  \n    \"trailer\",  \n    \"tanker\",  \n    \"van\",  \n    \"caravan\"  \n  ],  \n  \"location\": {  \n    \"type\": \"LineString\",  \n    \"coordinates\": [  \n      [  \n        -4.7299180606009,  \n        41.6844918725019  \n      ],  \n      [  \n        -4.72855890957602,  \n        41.6860596957855  \n      ],  \n      [  \n        -4.5520357341647,  \n        41.8569278186523  \n      ],  \n      [  \n        -4.55167335377909,  \n        41.8570461783071  \n      ]  \n    ]  \n  },  \n  \"laneUsage\": [  \n    \"forward\",  \n    \"forward\"  \n  ],  \n  \"source\": \"http://wwww.openstreetmap.org\",  \n  \"status\": \"open\",  \n  \"statusDescription\": \"Bridge state = DOWN\",  \n  \"cyclePathMaterial\": \"ASPHALT\",  \n  \"carriagewayLength\": 0.095454461114818,  \n  \"totalPedestrianPathWidth\": 7,  \n  \"bridgeCount\": 1,  \n  \"pedestrianPathLeftHeight\": 2,  \n  \"maximumAllowedHeight\": 72,  \n  \"totalPedestrianPathLength\": 0.09,  \n  \"culvertCount\": 0,  \n  \"roadName\": \"GREEN VILLA ROAD TO CHAITHRAM HOUSE\",  \n  \"roadClass\": \"OTHER_PUBLIC_ROAD\",  \n  \"medianHeight\": 3.6,  \n  \"roadWork\": \"OTHER\",  \n  \"roadID\": \"5272\",  \n  \"cyclePathRightWidth\": 2.5,  \n  \"roadMaterial\": \"TAR\",  \n  \"medianWidth\": 1.5,  \n  \"carriagewayWidth\": 3,  \n  \"cyclePathRightHeight\": 1,  \n  \"roadDirection\": \"N\",  \n  \"medianLength\": 0.09,  \n  \"pedestrianPathMaterial\": \"PAVEMENT BLOCK\",  \n  \"cyclePathLeftWidth\": 2.5,  \n  \"maximumAllowedWidth\": 74,  \n  \"rightOfWayWidth\": 4,  \n  \"cyclePathLeftHeight\": 1,  \n  \"maximumAllowedWeight\": 109,  \n  \"pedestrianPathRightWidth\": 3.5,  \n  \"pedestrianPathLeftWidth\": 3.5,  \n  \"pedestrianPathPlacement\": \"NOT_AVAILABLE\",  \n  \"pedestrianPathRightHeight\": 2,  \n  \"cyclePathPlacement\": \"NOT_AVAILABLE\",  \n  \"totalCyclePathWidth\": 5,  \n  \"agency_name\": \"CORPORATION\",  \n  \"municipalityInfo\": {  \n    \"ulbName\": \"KANNUR MUNICIPAL CORPORATION\"  \n  }  \n}  \n```  \n\r#### RoadSegment NGSI-v2 normalized Example    \n\rHere is an example of a RoadSegment in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"Spain-RoadSegment-A62-osm-24702186\",  \n  \"type\": \"RoadSegment\",  \n  \"category\": {  \n    \"value\": [  \n      \"oneway\"  \n    ]  \n  },  \n  \"endPoint\": {  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.55167335377909,  \n        41.8570461783071  \n      ]  \n    }  \n  },  \n  \"name\": {  \n    \"value\": \"Valladolid-Due\u00f1as\"  \n  },  \n  \"startPoint\": {  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.7299180606009,  \n        41.6844918725019  \n      ]  \n    }  \n  },  \n  \"allowedVehicleType\": {  \n    \"value\": [  \n      \"car\",  \n      \"bus\",  \n      \"lorry\",  \n      \"trailer\",  \n      \"tanker\",  \n      \"van\",  \n      \"caravan\"  \n    ]  \n  },  \n  \"source\": {  \n    \"value\": \"http://wwww.openstreetmap.org\"  \n  },  \n  \"totalLaneNumber\": {  \n    \"value\": 2  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"LineString\",  \n      \"coordinates\": [  \n        [  \n          -4.7299180606009,  \n          41.6844918725019  \n        ],  \n        [  \n          -4.72855890957602,  \n          41.6860596957855  \n        ],  \n        [  \n          -4.5520357341647,  \n          41.8569278186523  \n        ],  \n        [  \n          -4.55167335377909,  \n          41.8570461783071  \n        ]  \n      ]  \n    }  \n  },  \n  \"minimumAllowedSpeed\": {  \n    \"value\": 60  \n  },  \n  \"refRoad\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"Spain-Road-A62\"  \n  },  \n  \"maximumAllowedSpeed\": {  \n    \"value\": 120  \n  },  \n  \"laneUsage\": {  \n    \"value\": [  \n      \"forward\",  \n      \"forward\"  \n    ]  \n  },  \n  \"status\": {  \n    \"value\": \"open\"  \n  },  \n  \"statusDescription\": {  \n    \"value\": \"Bridge state = DOWN\"  \n  },  \n  \"cyclePathMaterial\": \"ASPHALT\",  \n  \"carriagewayLength\": {  \n    \"type\": \"number\",  \n    \"value\": 0.095454461114818  \n  },  \n  \"totalPedestrianPathWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 7  \n  },  \n  \"bridgeCount\": {  \n    \"type\": \"number\",  \n    \"value\": 1  \n  },  \n  \"pedestrianPathLeftHeight\": {  \n    \"type\": \"number\",  \n    \"value\": 2  \n  },  \n  \"maximumAllowedHeight\": {  \n    \"type\": \"number\",  \n    \"value\": 72  \n  },  \n  \"totalPedestrianPathLength\": {  \n    \"type\": \"number\",  \n    \"value\": 0.09  \n  },  \n  \"culvertCount\": {  \n    \"type\": \"number\",  \n    \"value\": 0  \n  },  \n  \"roadName\": {  \n    \"type\": \"string\",  \n    \"value\": \"GREEN VILLA ROAD TO CHAITHRAM HOUSE\"  \n  },  \n  \"roadClass\": {  \n    \"type\": \"string\",  \n    \"value\": \"OTHER_PUBLIC_ROAD\"  \n  },  \n  \"medianHeight\": {  \n    \"type\": \"number\",  \n    \"value\": 3.6  \n  },  \n  \"roadWork\": {  \n    \"type\": \"string\",  \n    \"value\": \"OTHER\"  \n  },  \n  \"roadID\": {  \n    \"type\": \"string\",  \n    \"value\": \"5272\"  \n  },  \n  \"cyclePathRightWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 2.5  \n  },  \n  \"roadMaterial\": {  \n    \"type\": \"string\",  \n    \"value\": \"TAR\"  \n  },  \n  \"medianWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 1.5  \n  },  \n  \"carriagewayWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 3  \n  },  \n  \"cyclePathRightHeight\": {  \n    \"type\": \"number\",  \n    \"value\": 1  \n  },  \n  \"roadDirection\": {  \n    \"type\": \"string\",  \n    \"value\": \"N\"  \n  },  \n  \"medianLength\": {  \n    \"type\": \"number\",  \n    \"value\": 0.09  \n  },  \n  \"pedestrianPathMaterial\": {  \n    \"type\": \"string\",  \n    \"value\": \"PAVEMENT BLOCK\"  \n  },  \n  \"cyclePathLeftWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 2.5  \n  },  \n  \"maximumAllowedWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 74  \n  },  \n  \"rightOfWayWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 4  \n  },  \n  \"cyclePathLeftHeight\": {  \n    \"type\": \"number\",  \n    \"value\": 1  \n  },  \n  \"maximumAllowedWeight\": {  \n    \"type\": \"number\",  \n    \"value\": 109  \n  },  \n  \"pedestrianPathRightWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 3.5  \n  },  \n  \"pedestrianPathLeftWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 3.5  \n  },  \n  \"pedestrianPathPlacement\": {  \n    \"type\": \"string\",  \n    \"value\": \"NOT_AVAILABLE\"  \n  },  \n  \"pedestrianPathRightHeight\": {  \n    \"type\": \"number\",  \n    \"value\": 2  \n  },  \n  \"cyclePathPlacement\": {  \n    \"type\": \"string\",  \n    \"value\": \"NOT_AVAILABLE\"  \n  },  \n  \"totalCyclePathWidth\": {  \n    \"type\": \"number\",  \n    \"value\": 5  \n  },  \n  \"agency_name\": {  \n    \"type\": \"string\",  \n    \"value\": \"CORPORATION\"  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"ulbName\": \"KANNUR MUNICIPAL CORPORATION\"  \n    }  \n  }  \n}  \n```  \n\r#### RoadSegment NGSI-LD key-values Example    \n\rHere is an example of a RoadSegment in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RoadSegment:Spain-RoadSegment-A62-osm-24702186\",  \n  \"type\": \"RoadSegment\",  \n  \"allowedVehicleType\": [  \n    \"car\",  \n    \"bus\",  \n    \"lorry\",  \n    \"trailer\",  \n    \"tanker\",  \n    \"van\",  \n    \"caravan\"  \n  ],  \n  \"category\": [  \n    \"oneway\"  \n  ],  \n  \"endPoint\": {  \n    \"coordinates\": [  \n      -4.55167335377909,  \n      41.8570461783071  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"laneUsage\": [  \n    \"forward\",  \n    \"forward\"  \n  ],  \n  \"location\": {  \n    \"coordinates\": [  \n      [  \n        -4.7299180606009,  \n        41.6844918725019  \n      ],  \n      [  \n        -4.72855890957602,  \n        41.6860596957855  \n      ],  \n      [  \n        -4.5520357341647,  \n        41.8569278186523  \n      ],  \n      [  \n        -4.55167335377909,  \n        41.8570461783071  \n      ]  \n    ],  \n    \"type\": \"LineString\"  \n  },  \n  \"maximumAllowedSpeed\": 120,  \n  \"minimumAllowedSpeed\": 60,  \n  \"name\": \"Valladolid-Due\u00c3\u00b1as\",  \n  \"refRoad\": \"urn:ngsi-ld:Road:Spain-Road-A62\",  \n  \"source\": \"http://wwww.openstreetmap.org\",  \n  \"startPoint\": {  \n    \"coordinates\": [  \n      -4.7299180606009,  \n      41.6844918725019  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"totalLaneNumber\": 2,  \n  \"status\": \"open\",  \n  \"statusDescription\": \"Bridge state = DOWN\",  \n  \"cyclePathMaterial\": \"ASPHALT\",  \n  \"carriagewayLength\": 0.095454461114818,  \n  \"totalPedestrianPathWidth\": 7,  \n  \"bridgeCount\": 1,  \n  \"pedestrianPathLeftHeight\": 2,  \n  \"maximumAllowedHeight\": 72,  \n  \"totalPedestrianPathLength\": 0.09,  \n  \"culvertCount\": 0,  \n  \"roadName\": \"GREEN VILLA ROAD TO CHAITHRAM HOUSE\",  \n  \"roadClass\": \"OTHER_PUBLIC_ROAD\",  \n  \"medianHeight\": 3.6,  \n  \"roadWork\": \"OTHER\",  \n  \"roadID\": \"5272\",  \n  \"cyclePathRightWidth\": 2.5,  \n  \"roadMaterial\": \"TAR\",  \n  \"medianWidth\": 1.5,  \n  \"carriagewayWidth\": 3,  \n  \"cyclePathRightHeight\": 1,  \n  \"roadDirection\": \"N\",  \n  \"medianLength\": 0.09,  \n  \"pedestrianPathMaterial\": \"PAVEMENT BLOCK\",  \n  \"cyclePathLeftWidth\": 2.5,  \n  \"maximumAllowedWidth\": 74,  \n  \"rightOfWayWidth\": 4,  \n  \"cyclePathLeftHeight\": 1,  \n  \"maximumAllowedWeight\": 109,  \n  \"pedestrianPathRightWidth\": 3.5,  \n  \"pedestrianPathLeftWidth\": 3.5,  \n  \"pedestrianPathPlacement\": \"NOT_AVAILABLE\",  \n  \"pedestrianPathRightHeight\": 2,  \n  \"cyclePathPlacement\": \"NOT_AVAILABLE\",  \n  \"totalCyclePathWidth\": 5,  \n  \"agency_name\": \"CORPORATION\",  \n  \"municipalityInfo\": {  \n    \"ulbName\": \"KANNUR MUNICIPAL CORPORATION\"  \n  },  \n  \"@context\": [  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### RoadSegment NGSI-LD normalized Example    \n\rHere is an example of a RoadSegment in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n\t\"id\": \"urn:ngsi-ld:RoadSegment:Spain-RoadSegment-A62-osm-24702186\",  \n\t\"type\": \"RoadSegment\",  \n\t\"allowedVehicleType\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [  \n\t\t\t\"car\",  \n\t\t\t\"bus\",  \n\t\t\t\"lorry\",  \n\t\t\t\"trailer\",  \n\t\t\t\"tanker\",  \n\t\t\t\"van\",  \n\t\t\t\"caravan\"  \n\t\t]  \n\t},  \n\t\"category\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [  \n\t\t\t\"oneway\"  \n\t\t]  \n\t},  \n\t\"endPoint\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": {  \n\t\t\t\"type\": \"Point\",  \n\t\t\t\"coordinates\": [  \n\t\t\t\t-4.55167335377909,  \n\t\t\t\t41.8570461783071  \n\t\t\t]  \n\t\t}  \n\t},  \n\t\"laneUsage\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": [  \n\t\t\t\"forward\",  \n\t\t\t\"forward\"  \n\t\t]  \n\t},  \n\t\"location\": {  \n\t\t\"type\": \"GeoProperty\",  \n\t\t\"value\": {  \n\t\t\t\"type\": \"LineString\",  \n\t\t\t\"coordinates\": [  \n\t\t\t\t[  \n\t\t\t\t\t-4.7299180606009,  \n\t\t\t\t\t41.6844918725019  \n\t\t\t\t],  \n\t\t\t\t[  \n\t\t\t\t\t-4.72855890957602,  \n\t\t\t\t\t41.6860596957855  \n\t\t\t\t],  \n\t\t\t\t[  \n\t\t\t\t\t-4.5520357341647,  \n\t\t\t\t\t41.8569278186523  \n\t\t\t\t],  \n\t\t\t\t[  \n\t\t\t\t\t-4.55167335377909,  \n\t\t\t\t\t41.8570461783071  \n\t\t\t\t]  \n\t\t\t]  \n\t\t}  \n\t},  \n\t\"maximumAllowedSpeed\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 120  \n\t},  \n\t\"minimumAllowedSpeed\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 60  \n\t},  \n\t\"name\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"Valladolid-Due\u00c3\u00b1as\"  \n\t},  \n\t\"refRoad\": {  \n\t\t\"type\": \"Relationship\",  \n\t\t\"object\": \"urn:ngsi-ld:Road:Spain-Road-A62\"  \n\t},  \n\t\"source\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"http://wwww.openstreetmap.org\"  \n\t},  \n\t\"startPoint\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": {  \n\t\t\t\"type\": \"Point\",  \n\t\t\t\"coordinates\": [  \n\t\t\t\t-4.7299180606009,  \n\t\t\t\t41.6844918725019  \n\t\t\t]  \n\t\t}  \n\t},  \n\t\"totalLaneNumber\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": 2  \n\t},  \n\t\"status\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"open\"  \n\t},  \n\t\"statusDescription\": {  \n\t\t\"type\": \"Property\",  \n\t\t\"value\": \"Bridge state = DOWN\"  \n\t},  \n\t\"carriagewayLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.095454461114818  \n  },  \n  \"totalPedestrianPathWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 7  \n  },  \n  \"bridgeCount\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"pedestrianPathLeftHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"maximumAllowedHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 72  \n  },  \n  \"totalPedestrianPathLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.09  \n  },  \n  \"culvertCount\": {  \n    \"type\": \"Property\",  \n    \"value\": 0  \n  },  \n  \"roadName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"GREEN VILLA ROAD TO CHAITHRAM HOUSE\"  \n  },  \n  \"roadClass\": {  \n    \"type\": \"Property\",  \n    \"value\": \"OTHER_PUBLIC_ROAD\"  \n  },  \n  \"medianHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.6  \n  },  \n  \"roadWork\": {  \n    \"type\": \"Property\",  \n    \"value\": \"OTHER\"  \n  },  \n  \"roadID\": {  \n    \"type\": \"Property\",  \n    \"value\": \"5272\"  \n  },  \n  \"cyclePathRightWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.5  \n  },  \n  \"roadMaterial\": {  \n    \"type\": \"Property\",  \n    \"value\": \"TAR\"  \n  },  \n  \"medianWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 1.5  \n  },  \n  \"carriagewayWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 3  \n  },  \n  \"cyclePathRightHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"roadDirection\": {  \n    \"type\": \"Property\",  \n    \"value\": \"N\"  \n  },  \n  \"medianLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.09  \n  },  \n  \"pedestrianPathMaterial\": {  \n    \"type\": \"Property\",  \n    \"value\": \"PAVEMENT BLOCK\"  \n  },  \n  \"cyclePathLeftWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.5  \n  },  \n  \"maximumAllowedWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 74  \n  },  \n  \"rightOfWayWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 4  \n  },  \n  \"cyclePathLeftHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"maximumAllowedWeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 109  \n  },  \n  \"pedestrianPathRightWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.5  \n  },  \n  \"pedestrianPathLeftWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.5  \n  },  \n  \"pedestrianPathPlacement\": {  \n    \"type\": \"Property\",  \n    \"value\": \"NOT_AVAILABLE\"  \n  },  \n  \"pedestrianPathRightHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"cyclePathPlacement\": {  \n    \"type\": \"Property\",  \n    \"value\": \"NOT_AVAILABLE\"  \n  },  \n  \"totalCyclePathWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"agency_name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"CORPORATION\"  \n  },  \n \"municipalityInfo\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"ulbName\": \"KANNUR MUNICIPAL CORPORATION\"  \n    }  \n  },  \n\t\"@context\": [  \n\t\t\"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n\t\t\"https://raw.githubusercontent.com/smart-data-models/dataModel.Transportation/master/context.jsonld\"  \n\t]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: TrafficViolation
        - MODEL_DESCRIPTION: A Data Model for Traffic Violations registered and E-Challans generated in Cities.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: Data Model for Traffic Violations registered
                and E-Challans generated in Cities., mail: null, organization: null, project: null,
              startDate: null}
            description: This is a compilation list of the current adopters of the data model
              TrafficViolation of the Subject datamodel.Trasnportation.

        - MODEL_DOCUMENTATION: "Entity: TrafficViolation  \n========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/TrafficViolation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A Data Model for Traffic Violations registered and E-Challans generated in Cities.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `amountCollected`: Amount collected towards the service corresponding to this observation.  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `equipmentId`: Unique Id of the equipment corresponding to this observation.  \r- `equipmentType`: Type of equipment or the name of the equipment corresponding to this observation.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `mediaURL`: URL providing further information of any image(s) or media of the complaint or place.  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `paymentStatus`:  The payment status of the fine or violation or challan corresponding to this observation. Enum:'Paid, Unpaid'.  \r- `reportId`: Unique Id assigned for the issue or report or feedback or transaction corresponding to this observation.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `titleCode`: The code assigned to the title corresponding to this observation.  \r- `type`: NGSI entity type. It has to be TrafficViolation.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nTrafficViolation:    \n  description: 'A Data Model for Traffic Violations registered and E-Challans generated in Cities.'    \n  modelTags: IUDX    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    amountCollected:    \n      description: 'Amount collected towards the service corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    equipmentId:    \n      description: 'Unique Id of the equipment corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    equipmentType:    \n      description: 'Type of equipment or the name of the equipment corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    id:    \n      anyOf: &trafficviolation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    mediaURL:    \n      description: 'URL providing further information of any image(s) or media of the complaint or place.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *trafficviolation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    paymentStatus:    \n      description: ' The payment status of the fine or violation or challan corresponding to this observation. Enum:''Paid, Unpaid''.'    \n      enum:    \n        - Paid    \n        - Unpaid    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    reportId:    \n      description: 'Unique Id assigned for the issue or report or feedback or transaction corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    titleCode:    \n      description: 'The code assigned to the title corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be TrafficViolation.'    \n      enum:    \n        - TrafficViolation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### TrafficViolation NGSI-v2 key-values Example    \n\rHere is an example of a TrafficViolation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"ngsi-ld:Trafficviolation:234R:0212\",  \n  \"type\": \"TrafficViolation\",  \n  \"amountCollected\": 10500,  \n  \"mediaURL\": \"https://www.google.com/\",  \n  \"equipmentId\": \"4\",  \n  \"equipmentType\": \"Camera\",  \n  \"titleCode\": \"11\",  \n  \"reportId\": \"182\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"paymentStatus\": \"Paid\"  \n}  \n```  \n\r#### TrafficViolation NGSI-v2 normalized Example    \n\rHere is an example of a TrafficViolation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"ngsi-ld:Trafficviolation:234R:0212\",  \n  \"type\": \"TrafficViolation\",  \n  \"amountCollected\": {  \n    \"type\": \"number\",  \n    \"value\": 10500  \n  },  \n  \"mediaURL\": {  \n    \"type\": \"Text\",  \n    \"value\": \"https://www.google.com/\"  \n  },  \n  \"equipmentId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"4\"  \n  },  \n  \"equipmentType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Camera\"  \n  },  \n  \"titleCode\": {  \n    \"type\": \"Text\",  \n    \"value\": \"11\"  \n  },  \n  \"reportId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"182\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"paymentStatus\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Paid\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### TrafficViolation NGSI-LD key-values Example    \n\rHere is an example of a TrafficViolation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"ngsi-ld:Trafficviolation:234R:0212\",  \n  \"type\": \"TrafficViolation\",  \n  \"amountCollected\": 10500,  \n  \"mediaURL\": \"https://www.google.com/\",  \n  \"equipmentId\": \"4\",  \n  \"equipmentType\": \"Camera\",  \n  \"titleCode\": \"11\",  \n  \"reportId\": \"182\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"paymentStatus\": \"Paid\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### TrafficViolation NGSI-LD normalized Example    \n\rHere is an example of a TrafficViolation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"ngsi-ld:Trafficviolation:234R:0212\",  \n  \"type\": \"TrafficViolation\",  \n  \"amountCollected\": {  \n    \"type\": \"Property\",  \n    \"value\": 10500  \n  },  \n  \"mediaURL\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://www.google.com/\"  \n  },  \n  \"equipmentId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"4\"  \n  },  \n  \"equipmentType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Camera\"  \n  },  \n  \"titleCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"11\"  \n  },  \n  \"reportId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"182\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-03-11T15:51:02+05:30\"  \n    }  \n  },  \n  \"paymentStatus\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Paid\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: TransportStation
        - MODEL_DESCRIPTION: The data model is a general description of urban stations (Metro, Bus, Tram, Heliport, ...) according to the GFTS standard https://developers.google.com/transit/gtfs/reference/#stopstxt, as well the detailed description of these (means of access, platform, assistance, ...).
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              TransportStation of the Subject Transportation.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: TransportStation  \n========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Transportation/blob/master/TransportStation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The data model is a general description of urban stations (Metro, Bus, Tram, Heliport, ...) according to the GFTS standard https://developers.google.com/transit/gtfs/reference/#stopstxt, as well the detailed description of these (means of access, platform, assistance, ...).**  \n\rversion: 0.1.2  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `contactPoint`: The details to contact with the item.  \r- `contractingAuthority`: Name of the contracting authority.  \r- `contractingCompany`: Name of the contracting company responsible for the exploitation of the station.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: A timestamp which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `dimension`: Global dimension. The format is structured by a sub-property of 3 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meters  \r- `id`: Unique identifier of the entity  \r- `installationMode`: Location  relative to the ground reference. Enum:'aerial, ground, underGround, underSea'  \r- `inventory`: General data mapping only for `locationType` = 0, 1, 3, 4. The format is structured by a sub-property of 4 items.  \r- `levelId`: Floor on which the location is located. Numerical index associated with the floor. Indicates the relative position of this stage in relation to the others. The index 0 indicates the ground floor. The floors above ground level are indicated by positive indices, and the underground stages by negative indices.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `locationType`: Link to the GTFS standard repository describing the different location [Location Type]. 0 Stop or platform (place where users get on or off in a public transport vehicle). 1 Station (area or physical structure comprising one or more platforms). 2 Entrance or Exit (place where users can enter / exit a station from the street). 3 Generic intersection (location in a station that doesn't correspond to any other `location_type` value). 4 Boarding area of a specific location on a platform where users can get on / off in a vehicle.  \r- `name`: The name of this item.  \r- `openingHoursSpecification`: A structured value providing information about the opening hours of a place or a certain service inside a place  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `parentStation`: Link to the GTFS standard repository describing the different link between Station and Platform [Parent STATION]. Case '1' location_type = 0 (Stop / platform ), the parent_station field contains the ID of a station. Case '2' location_type = 1  (Station), this field must be empty. Case '3' location_type = 2 (Input / output) or location_type = 3 (generic intersection), the parent_station field contains the ID of a station location_type = 1. Case '4' location_type = 4 (boarding area), the parent_station field contains the ID of a platform.  \r- `platformCode`: Platform identifier for a platform type stop `location_type` = 0 when the stop is in a station.  \r- `refPointOfInterest`: A reference to a point of interest associated to this observation.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `stationConnected`: Connections possible from this station. A structured value from 0 to N occurrences where each items is a string in the format `stationType` : [List of Lines connected, separated by a comma]. Enum:'aerialLift, bus, cableTram, ferry, funicular, monorail, rail, subway, train, tram, trolleybus'  \r- `stationType`: Type of transport station. Enum:'aerialLift, bus, cableTram, ferry, funicular, monorail, rail, subway, trolleybus, tram'  \r- `type`: NGSI Entity type. It has to be TransportStation  \r- `webSite`: Link to the official website for more information..  \r- `wheelChairAccessible`: Access possible for Person with Reduced Mobility. For stops without parents 0 no information is available regarding the accessibility of the stop. 1 some vehicles at this stop can board a PMR user. 2 PRM user cannot board  at this stop. For a stop that is part of a station 0 the stop inherits the wheelchair_boarding behavior of the parent station, if it is filled in. 1 lanes provide wheelchair access to the stop / platform  from outside the station. 2 no lane provides wheelchair access to the stop / platform from outside the station. For station inputs / outputs 0 the station entry inherits the wheelchair_boarding behavior of the main station, if specified. 1 the station entrance is wheelchair accessible. 2 no wheelchair accessible route connects the station entrance to the stops / platforms.  \r- `zoneId`: Pricing zone of the station.  \r  \n\rRequired properties  \n- `dateLastReported`  \r- `dateObserved`  \r- `id`  \r- `location`  \r- `locationType`  \r- `stationType`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nTransportStation:    \n  description: \"The data model is a general description of urban stations (Metro, Bus, Tram, Heliport, ...) according to the GFTS standard https://developers.google.com/transit/gtfs/reference/#stopstxt, as well the detailed description of these (means of access, platform, assistance, ...).\"    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    contactPoint:    \n      description: 'The details to contact with the item.'    \n      properties:    \n        areaServed:    \n          description: 'Property. The geographic area where a service or offered item is provided. Supersedes serviceArea.'    \n          type: string    \n        availabilityRestriction:    \n          anyOf:    \n            - description: 'Property. Array of identifiers format of any NGSI entity.'    \n              items:    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              type: array    \n            - description: 'Property. Array of identifiers format of any NGSI entity.'    \n              items:    \n                format: uri    \n                type: string    \n              type: array    \n          description: 'Relationship. Model:''http://schema.org/hoursAvailable''. This property links a contact point to information about when the contact point is not available. The details are provided using the Opening Hours Specification class.'    \n        availableLanguage:    \n          anyOf:    \n            - anyOf:    \n                - type: string    \n                - items:    \n                    type: string    \n                  type: array    \n          description: 'Property. Model:''http://schema.org/availableLanguage''. A language someone may use with or at the item, service or place. Please use one of the language codes from the IETF BCP 47 standard. It is implemented the Text option but it could be also Language'    \n        contactOption:    \n          anyOf:    \n            - type: string    \n            - items:    \n                type: string    \n              type: array    \n          description: 'Property. Model:''http://schema.org/contactOption''. An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).'    \n        contactType:    \n          description: 'Property. Contact type of this item.'    \n          type: string    \n        email:    \n          description: 'Property. Email address of owner.'    \n          format: idn-email    \n          type: string    \n        faxNumber:    \n          description: 'Property. Model:''http://schema.org/Text''. The fax number.'    \n          type: string    \n        name:    \n          description: 'Property. The name of this item.'    \n          type: string    \n        productSupported:    \n          description: 'Property. Model:''http://schema.org/Text''. The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. \"iPhone\") or a general category of products or services (e.g. \"smartphones\").'    \n          type: string    \n        telephone:    \n          description: 'Property. Telephone of this contact.'    \n          type: string    \n        url:    \n          description: 'Property. URL which provides a description or further information about this item.'    \n          format: uri    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/ContactPoint    \n        type: Property    \n    contractingAuthority:    \n      description: 'Name of the contracting authority.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    contractingCompany:    \n      description: 'Name of the contracting company responsible for the exploitation of the station.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'A timestamp which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dimension:    \n      description: 'Global dimension. The format is structured by a sub-property of 3 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meters'    \n      properties:    \n        depth:    \n          minimum: 0    \n          type: number    \n        height:    \n          minimum: 0    \n          type: number    \n        width:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n        units: meters    \n    id:    \n      anyOf: &transportstation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    installationMode:    \n      description: 'Location  relative to the ground reference. Enum:''aerial, ground, underGround, underSea'''    \n      enum:    \n        - aerial    \n        - ground    \n        - underGround    \n        - underSea    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    inventory:    \n      description: 'General data mapping only for `locationType` = 0, 1, 3, 4. The format is structured by a sub-property of 4 items.'    \n      properties:    \n        PlatformType:    \n          items:    \n            enum:    \n              - lateral    \n              - central    \n            type: string    \n          type: array    \n        nbOfIOPoint:    \n          minimum: 0    \n          type: number    \n        nbOfLane:    \n          minimum: 0    \n          type: number    \n        nbOfPlatform:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    levelId:    \n      description: 'Floor on which the location is located. Numerical index associated with the floor. Indicates the relative position of this stage in relation to the others. The index 0 indicates the ground floor. The floors above ground level are indicated by positive indices, and the underground stages by negative indices.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    locationType:    \n      description: 'Link to the GTFS standard repository describing the different location [Location Type]. 0 Stop or platform (place where users get on or off in a public transport vehicle). 1 Station (area or physical structure comprising one or more platforms). 2 Entrance or Exit (place where users can enter / exit a station from the street). 3 Generic intersection (location in a station that doesn''t correspond to any other `location_type` value). 4 Boarding area of a specific location on a platform where users can get on / off in a vehicle.'    \n      enum:    \n        - 0    \n        - 1    \n        - 2    \n        - 3    \n        - 4    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    openingHoursSpecification:    \n      description: 'A structured value providing information about the opening hours of a place or a certain service inside a place'    \n      items:    \n        properties:    \n          closes:    \n            format: time    \n            pattern: ^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(\\.[0-9]*)?(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$    \n            type: string    \n          dayOfWeek:    \n            anyOf:    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - Monday    \n                  - Tuesday    \n                  - Wednesday    \n                  - Thursday    \n                  - Friday    \n                  - Saturday    \n                  - Sunday    \n                  - PublicHolidays    \n                type: string    \n              - description: 'Property. Array of days of the week.'    \n                enum:    \n                  - https://schema.org/Monday    \n                  - https://schema.org/Tuesday    \n                  - https://schema.org/Wednesday    \n                  - https://schema.org/Thursday    \n                  - https://schema.org/Friday    \n                  - https://schema.org/Saturday    \n                  - https://schema.org/Sunday    \n                  - https://schema.org/PublicHolidays    \n                type: string    \n            description: 'Property. Model:''http://schema.org/dayOfWeek''. The day of the week for which these opening hours are valid. URLs from GoodRelations (http://purl.org/goodrelations/v1) are used (for Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday plus a special entry for PublicHolidays).'    \n            type: string    \n          opens:    \n            format: time    \n            pattern: ^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(\\.[0-9]*)?(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$    \n            type: string    \n          validFrom:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date when the item becomes valid. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n          validThrough:    \n            anyOf:    \n              - description: 'Property. Model:''http://schema.org/Date.'    \n                format: date    \n                type: string    \n              - description: 'Property. Model:''http://schema.org/DateTime.'    \n                format: date-time    \n                type: string    \n            description: 'Property. The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. A date value in the form CCYY-MM-DD or a combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] in ISO 8601 date format.'    \n            type: string    \n        type: object    \n      minItems: 1    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/openingHoursSpecification    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *transportstation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    parentStation:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Link to the GTFS standard repository describing the different link between Station and Platform [Parent STATION]. Case ''1'' location_type = 0 (Stop / platform ), the parent_station field contains the ID of a station. Case ''2'' location_type = 1  (Station), this field must be empty. Case ''3'' location_type = 2 (Input / output) or location_type = 3 (generic intersection), the parent_station field contains the ID of a station location_type = 1. Case ''4'' location_type = 4 (boarding area), the parent_station field contains the ID of a platform.'    \n      x-ngsi:    \n        type: Relationship    \n    platformCode:    \n      description: 'Platform identifier for a platform type stop `location_type` = 0 when the stop is in a station.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A reference to a point of interest associated to this observation.'    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stationConnected:    \n      architect:    \n        type: string    \n      commissioningDate:    \n        format: date-time    \n        type: string    \n      constructionDate:    \n        format: date-time    \n        type: string    \n      currencyAccepted:    \n        items:    \n          enum:    \n            - EUR    \n            - USD    \n          type: string    \n        type: array    \n      description: 'Connections possible from this station. A structured value from 0 to N occurrences where each items is a string in the format `stationType` : [List of Lines connected, separated by a comma]. Enum:''aerialLift, bus, cableTram, ferry, funicular, monorail, rail, subway, train, tram, trolleybus'''    \n      featuredArtist:    \n        items:    \n          anyOf:    \n            - anyOf: *transportstation_-_properties_-_owner_-_items_-_anyof    \n              description: 'Property. Unique identifier of the entity'    \n            - type: string    \n        type: array    \n      items:    \n        properties:    \n          linesConnected:    \n            items:    \n              type: string    \n            type: array    \n          stationType:    \n            enum:    \n              - aerialLift    \n              - bus    \n              - cableTram    \n              - ferry    \n              - funicular    \n              - monorail    \n              - rail    \n              - subway    \n              - train    \n              - tram    \n              - trolleybus    \n            type: string    \n        type: object    \n      paymentAccepted:    \n        items:    \n          enum:    \n            - Cash    \n            - CreditCard    \n            - CryptoCurrency    \n            - other    \n          type: string    \n        type: array    \n      services:    \n        properties:    \n          defibrillator:    \n            type: Boolean    \n          emergencyPhone:    \n            type: Boolean    \n          informationBoardDevice:    \n            type: Boolean    \n          interactiveDevice:    \n            type: Boolean    \n          messageDevice:    \n            type: Boolean    \n          purchaseDevice:    \n            type: Boolean    \n          restBench:    \n            type: Boolean    \n          shelters:    \n            type: Boolean    \n          timetableDevice:    \n            type: Boolean    \n          voiceDevice:    \n            type: Boolean    \n          wheelChairAccessible:    \n            type: Boolean    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    stationType:    \n      description: 'Type of transport station. Enum:''aerialLift, bus, cableTram, ferry, funicular, monorail, rail, subway, trolleybus, tram'''    \n      items:    \n        enum:    \n          - aerialLift    \n          - bus    \n          - cableTram    \n          - ferry    \n          - funicular    \n          - monorail    \n          - rail    \n          - subway    \n          - trolleybus    \n          - tram    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be TransportStation'    \n      enum:    \n        - TransportStation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    webSite:    \n      description: 'Link to the official website for more information..'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    wheelChairAccessible:    \n      description: 'Access possible for Person with Reduced Mobility. For stops without parents 0 no information is available regarding the accessibility of the stop. 1 some vehicles at this stop can board a PMR user. 2 PRM user cannot board  at this stop. For a stop that is part of a station 0 the stop inherits the wheelchair_boarding behavior of the parent station, if it is filled in. 1 lanes provide wheelchair access to the stop / platform  from outside the station. 2 no lane provides wheelchair access to the stop / platform from outside the station. For station inputs / outputs 0 the station entry inherits the wheelchair_boarding behavior of the main station, if specified. 1 the station entrance is wheelchair accessible. 2 no wheelchair accessible route connects the station entrance to the stops / platforms.'    \n      enum:    \n        - 0    \n        - 1    \n        - 2    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    zoneId:    \n      description: 'Pricing zone of the station.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateObserved    \n    - dateLastReported    \n    - stationType    \n    - locationType    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Transportation/blob/master/TransportStation/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/data-models/Transportation/TransportStation/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.1.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### TransportStation NGSI-v2 key-values Example    \n\rHere is an example of a TransportStation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Station:Station:MNCA-STram-L02-AP-T2\",  \n  \"type\": \"TransportStation\",  \n  \"name\": \"NCE-Tram-Station-L02-AP-T2\",  \n  \"alternateName\": \"Nice - Tramway Station Description - L02-AP-T2\",  \n  \"description\": \"Description and services provided in the station\",  \n  \"seeAlso\": \"http://tramway.nice.fr/wp-content/uploads/2019/10/BD_pocket_plan_MAJ03_2019_20082019.pdf\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.664810,  \n      7.196545  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Airport - Terminal 2 - Door A2\"  \n  },  \n  \"areaServed\": \"Nice Airport\",  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"dateObserved\": \"2020-03-17T08:45:00Z\",  \n  \"stationType\": [  \n    \"tram\"  \n  ],  \n  \"locationType\": 1,  \n  \"levelId\": 0,  \n  \"zoneId\": \"B\",  \n  \"wheelChairAccessible\": 1,  \n  \"openingHoursSpecification\": [  \n    {  \n      \"dayOfWeek\": \"Monday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"22:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Tuesday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"22:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Wednesday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"22:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Thursday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"22:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Friday\",  \n      \"opens\": \"07:00:00\",  \n      \"closes\": \"22:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Saturday\",  \n      \"opens\": \"08:00:00\",  \n      \"closes\": \"23:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"Sunday\",  \n      \"opens\": \"08:30:00\",  \n      \"closes\": \"21:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    },  \n    {  \n      \"dayOfWeek\": \"PublicHolidays\",  \n      \"opens\": \"08:30:00\",  \n      \"closes\": \"21:00:00\",  \n      \"validFrom\": \"2021-01-01T00:00:00\",  \n      \"validThrough\": \"2021-12-31T23:59:59\"  \n    }  \n  ],  \n  \"owner\": [  \n    \"uri:ngsi:StreetRetail\"  \n  ],  \n  \"contractingAuthority\": \"MNCA - Metropole Nice Cote d'Azur\",  \n  \"contractingCompagny\": \"R\u00e9gie Ligne d'Azur\",  \n  \"contactPoint\": {  \n    \"url\": \"uri:ngsi:www.lignesdazur.com\"  \n  },  \n  \"webSite\": \"https://tramway.nice.fr/Plan-Station-L02-AP-T2.pdf\",  \n  \"instalationMode\": \"ground\",  \n  \"dimension\": {  \n    \"length\": 300,  \n    \"width\": 25,  \n    \"thickness\": 6.35  \n  },  \n  \"inventory\": {  \n    \"nbOfIOPoint\": 2,  \n    \"nbOfLane\": 1,  \n    \"nbOfPlatform\": 1,  \n    \"PlatformType\": [  \n      \"lateral\"  \n    ]  \n  },  \n  \"stationConnected\": [  \n    {  \n      \"stationType\": \"tram\",  \n      \"linesConnected\": [  \n        \"Tram 2 - CADAM / Nikaia\",  \n        \"Tram 3 - Saint Isidore / Stade Allianz Riviera\"  \n      ]  \n    },  \n    {  \n      \"stationType\": \"train\",  \n      \"linesConnected\": [  \n        \"Gare SNCF Nice Saint Augustin (600m)\"  \n      ]  \n    },  \n    {  \n      \"stationType\": \"bus\",  \n      \"linesConnected\": [  \n        \"L20 - Giono / Les Pugets\",  \n        \"L20 - Centre Commercial St Isidore\",  \n        \"L21 - Le Gu\u00e9 / Polygone Riviera\",  \n        \"L54 - Centre Commercial Cap 3000 - St Jeannet\",  \n        \"L90 - La Bolline\",  \n        \"91 Auron\",  \n        \"L92 - Isola 2000\"  \n      ]  \n    }  \n  ],  \n  \"services\": {  \n    \"purchaseDevice\": true,  \n    \"interactiveDevice\": true,  \n    \"timetableDevice\": true,  \n    \"voiceDevice\": true,  \n    \"informationBoardDevice\": true,  \n    \"messageDevice\": false,  \n    \"shelters\": true,  \n    \"restBench\": false,  \n    \"emergencyPhone\": false,  \n    \"videoSurveillance\": true,  \n    \"defibrillator\": false,  \n    \"wheelChairAccessible\": true  \n  },  \n  \"paymentAccepted\": [  \n    \"Cash\",  \n    \"CreditCard\"  \n  ],  \n  \"currencyAccepted\": [  \n    \"EUR\"  \n  ],  \n  \"constructionDate\": \"2016-19-08\",  \n  \"commissioningDate\": \"2018-09-15\",  \n  \"architect\": \"Nice Architecture\",  \n  \"featuredArtist \": [  \n    \"Leopold\",  \n    \"De Renaiss\"  \n  ]  \n}  \n```  \n\r#### TransportStation NGSI-v2 normalized Example    \n\rHere is an example of a TransportStation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Station:Station:MNCA-STram-L02-AP-T2\",  \n  \"type\": \"Station\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"NCE-Tram-Station-L02-AP-T2\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice - Tramway Station Description - L02-AP-T2\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Description and services provided in the station\"  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": \"http://tramway.nice.fr/wp-content/uploads/2019/10/BD_pocket_plan_MAJ03_2019_20082019.pdf\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"point\",  \n      \"coordinates\": [  \n        43.664810,  \n        7.196545  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"FR\",  \n      \"addressLocality\": \"Nice\",  \n      \"streetAddress\": \"Airport - Terminal 2 - Door A2\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Airport\"  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\"  \n  },  \n  \"stationType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Tram\"  \n  },  \n  \"locationType\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"levelId\": {  \n    \"type\": \"Property\",  \n    \"value\": 0  \n  },  \n  \"zoneId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"B\"  \n  },  \n  \"wheelChairAccessible\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"openingHoursSpecification\": {  \n    \"type\": \"object\",  \n    \"value\": [  \n      {  \n        \"dayOfWeek\": \"Monday, Tuesday, Wednesday, Thursday, Friday\",  \n        \"opens\": \"07.00\",  \n        \"closes\": \"22.00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Saturday\",  \n        \"opens\": \"08.00\",  \n        \"closes\": \"23.00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"Sunday\",  \n        \"opens\": \"8.30\",  \n        \"closes\": \"21.00\"  \n      },  \n      {  \n        \"dayOfWeek\": \"PublicHolidays\",  \n        \"opens\": \"8.00\",  \n        \"closes\": \"21.30\"  \n      }  \n    ],  \n    \"validFrom\": \"-01-01\",  \n    \"validThrough\": \"-31-12\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Street furniture Urbain & Retail\"  \n    ]  \n  },  \n  \"contractingAuthority\": {  \n    \"type\": \"Property\",  \n    \"value\": \"MNCA - Metropole Nice Cote d'Azur\"  \n  },  \n  \"contractingCompany\": {  \n    \"type\": \"Property\",  \n    \"value\": \"R\u00e9gie Ligne d'Azur\"  \n  },  \n  \"contactPoint\": {  \n    \"type\": \"Property\",  \n    \"value\": \"www.lignesdazur.com\"  \n  },  \n  \"webSite\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://tramway.nice.fr/Plan-Station-L02-AP-T2.pdf\"  \n  },  \n  \"installationMode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"ground\"  \n  },  \n  \"dimension\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"length\": 300,  \n      \"width\": 25,  \n      \"thickness\": 6.35  \n    }  \n  },  \n  \"inventory\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"nbOfIOPoint\": 2,  \n      \"nbOfLane\": 1,  \n      \"nbOfPlatform\": 1,  \n      \"PlatformType\": \"lateral\"  \n    }  \n  },  \n  \"stationConnected\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"tram\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n          \"Tram 2 - CADAM / Nikaia\",  \n          \"Tram 3 - Saint Isidore / Stade Allianz Riviera\"  \n        ]  \n      },  \n      \"train\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n          \"Gare SNCF Nice Saint Augustin (600m)\"  \n        ]  \n      },  \n      \"bus\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n          \"L20 - Giono / Les Pugets\",  \n          \"L20 - Centre Commercial St Isidore\",  \n          \"L21 - Le Gu\u00e9 / Polygone Riviera\",  \n          \"L54 - Centre Commercial Cap 3000 - St Jeannet\",  \n          \"L90 - La Bolline\",  \n          \"91 Auron\",  \n          \"L92 - Isola 2000\"  \n        ]  \n      }  \n    }  \n  },  \n  \"services\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"purchaseDevice\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      },  \n      \"interactiveDevice\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      },  \n      \"timetableDevice\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      },  \n      \"voiceDevice\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      },  \n      \"informationBoardDevice\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      },  \n      \"messageDevice\": {  \n        \"type\": \"Property\",  \n        \"value\": false  \n      },  \n      \"shelters\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      },  \n      \"restBench\": {  \n        \"type\": \"Property\",  \n        \"value\": false  \n      },  \n      \"emergencyPhone\": {  \n        \"type\": \"Property\",  \n        \"value\": false  \n      },  \n      \"videoSurveillance\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      },  \n      \"defibrillator\": {  \n        \"type\": \"Property\",  \n        \"value\": false  \n      },  \n      \"wheelChairAccessible\": {  \n        \"type\": \"Property\",  \n        \"value\": true  \n      }  \n    }  \n  },  \n  \"paymentAccepted\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Cash\",  \n      \"CreditCard\"  \n    ]  \n  },  \n  \"currencyAccepted\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"EUR\"  \n    ]  \n  },  \n  \"constructionDate\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2016-19-08\"  \n  },  \n  \"commissioningDate\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-09-15\"  \n  },  \n  \"architect\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Architecture\"  \n  },  \n  \"featuredArtist \": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Leopold\",  \n      \"De Renaiss\"  \n    ]  \n  }  \n}  \n```  \n\r#### TransportStation NGSI-LD key-values Example    \n\rHere is an example of a TransportStation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Station:Station:MNCA-STram-L02-AP-T2\",  \n    \"type\": \"Station\",  \n    \"address\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"addressCountry\": \"FR\",  \n            \"addressLocality\": \"Nice\",  \n            \"streetAddress\": \"Airport - Terminal 2 - Door A2\"  \n        }  \n    },  \n    \"alternateName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice - Tramway Station Description - L02-AP-T2\"  \n    },  \n    \"architecte\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice Architecture\"  \n    },  \n    \"areaServed\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice Airport\"  \n    },  \n    \"commissioningDate\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2018-09-15\"  \n    },  \n    \"constructionDate\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2016-19-08\"  \n    },  \n    \"contactPoint\": {  \n        \"type\": \"Property\",  \n        \"value\": \"www.lignesdazur.com\"  \n    },  \n    \"contractingAuthority\": {  \n        \"type\": \"Property\",  \n        \"value\": \"MNCA - Metropole Nice Cote d'Azur\"  \n    },  \n    \"contractingCompagny\": {  \n        \"type\": \"Property\",  \n        \"value\": \"R\\u00e9gie Ligne d'Azur\"  \n    },  \n    \"currencyAccepted\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"EUR\"  \n        ]  \n    },  \n    \"dateLastReported\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2020-03-17T08:45:00Z\"  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Description and services provided in the station\"  \n    },  \n    \"dimension\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"length\": 300,  \n            \"width\": 25,  \n            \"thickness\": 6.35  \n        }  \n    },  \n    \"featuredArtist \": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"Leopold\",  \n            \"De Renaiss\"  \n        ]  \n    },  \n    \"instalationMode\": {  \n        \"type\": \"Property\",  \n        \"value\": \"ground\"  \n    },  \n    \"inventory\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"nbOfIOPoint\": 2,  \n            \"nbOfLane\": 1,  \n            \"nbOfPlatform\": 1,  \n            \"PlatformType\": \"lateral\"  \n        }  \n    },  \n    \"levelId\": {  \n        \"type\": \"Property\",  \n        \"value\": 0  \n    },  \n    \"location\": {  \n        \"type\": \"GeoProperty\",  \n        \"value\": {  \n            \"type\": \"point\",  \n            \"coordinates\": [  \n                43.66481,  \n                7.196545  \n            ]  \n        }  \n    },  \n    \"locationType\": {  \n        \"type\": \"Property\",  \n        \"value\": 1  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"NCE-Tram-Station-L02-AP-T2\"  \n    },  \n    \"openingHoursSpecification\": {  \n        \"type\": \"object\",  \n        \"value\": [  \n            {  \n                \"dayOfWeek\": \"Monday, Tuesday, Wednesday, Thursday, Friday\",  \n                \"opens\": \"07.00\",  \n                \"closes\": \"22.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Saturday\",  \n                \"opens\": \"08.00\",  \n                \"closes\": \"23.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"Sunday\",  \n                \"opens\": \"8.30\",  \n                \"closes\": \"21.00\"  \n            },  \n            {  \n                \"dayOfWeek\": \"PublicHolidays\",  \n                \"opens\": \"8.00\",  \n                \"closes\": \"21.30\"  \n            }  \n        ],  \n        \"validFrom\": \"-01-01\",  \n        \"validThrough\": \"-31-12\"  \n    },  \n    \"owner\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"Street furniture Urbain & Retail\"  \n        ]  \n    },  \n    \"paymentAccepted\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"Cash\",  \n            \"CreditCard\"  \n        ]  \n    },  \n    \"seeAlso\": {  \n        \"type\": \"Property\",  \n        \"value\": \"http://tramway.nice.fr/wp-content/uploads/2019/10/BD_pocket_plan_MAJ03_2019_20082019.pdf\"  \n    },  \n    \"services\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"purchaseDevice\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            },  \n            \"interactiveDevice\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            },  \n            \"timetableDevice\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            },  \n            \"voiceDevice\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            },  \n            \"informationBoardDevice\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            },  \n            \"messageDevice\": {  \n                \"type\": \"Property\",  \n                \"value\": false  \n            },  \n            \"shelters\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            },  \n            \"restBench\": {  \n                \"type\": \"Property\",  \n                \"value\": false  \n            },  \n            \"emergencyPhone\": {  \n                \"type\": \"Property\",  \n                \"value\": false  \n            },  \n            \"videoSurveillance\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            },  \n            \"defibrillator\": {  \n                \"type\": \"Property\",  \n                \"value\": false  \n            },  \n            \"wheelChairAccessible\": {  \n                \"type\": \"Property\",  \n                \"value\": true  \n            }  \n        }  \n    },  \n    \"stationConnected\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"tram\": {  \n                \"type\": \"Property\",  \n                \"value\": [  \n                    \"Tram 2 - CADAM / Nikaia\",  \n                    \"Tram 3 - Saint Isidore / Stade Allianz Riviera\"  \n                ]  \n            },  \n            \"train\": {  \n                \"type\": \"Property\",  \n                \"value\": [  \n                    \"Gare SNCF Nice Saint Augustin (600m)\"  \n                ]  \n            },  \n            \"bus\": {  \n                \"type\": \"Property\",  \n                \"value\": [  \n                    \"L20 - Giono / Les Pugets\",  \n                    \"L20 - Centre Commercial St Isidore\",  \n                    \"L21 - Le Gu\\u00e9 / Polygone Riviera\",  \n                    \"L54 - Centre Commercial Cap 3000 - St Jeannet\",  \n                    \"L90 - La Bolline\",  \n                    \"91 Auron\",  \n                    \"L92 - Isola 2000\"  \n                ]  \n            }  \n        }  \n    },  \n    \"stationType\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Tram\"  \n    },  \n    \"webSite\": {  \n        \"type\": \"Property\",  \n        \"value\": \"https://tramway.nice.fr/Plan-Station-L02-AP-T2.pdf\"  \n    },  \n    \"wheelChairAccessible\": {  \n        \"type\": \"Property\",  \n        \"value\": 1  \n    },  \n    \"zoneId\": {  \n        \"type\": \"Property\",  \n        \"value\": \"B\"  \n    },  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Transportation/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### TransportStation NGSI-LD normalized Example    \n\rHere is an example of a TransportStation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Station:Station:MNCA-STram-L02-AP-T2\",  \n    \"type\": \"Station\",  \n    \"address\": {  \n        \"addressCountry\": \"FR\",  \n        \"addressLocality\": \"Nice\",  \n        \"streetAddress\": \"Airport - Terminal 2 - Door A2\"  \n    },  \n    \"alternateName\": \"Nice - Tramway Station Description - L02-AP-T2\",  \n    \"architect\": \"Nice Architecture\",  \n    \"areaServed\": \"Nice Airport\",  \n    \"commissioningDate\": \"2018-09-15\",  \n    \"constructionDate\": \"2016-19-08\",  \n    \"contactPoint\": {  \n        \"url\": \"uri:ngsi:www.lignesdazur.com\"  \n    },  \n    \"contractingAuthority\": \"MNCA - Metropole Nice Cote d'Azur\",  \n    \"contractingCompagny\": \"R\\u00e9gie Ligne d'Azur\",  \n    \"currencyAccepted\": [  \n        \"EUR\"  \n    ],  \n    \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n    \"dateObserved\": \"2020-03-17T08:45:00Z\",  \n    \"description\": \"Description and services provided in the station\",  \n    \"dimension\": {  \n        \"length\": 300,  \n        \"width\": 25,  \n        \"thickness\": 6.35  \n    },  \n    \"featuredArtist \": [  \n        \"Leopold\",  \n        \"De Renaiss\"  \n    ],  \n    \"instalationMode\": \"ground\",  \n    \"inventory\": {  \n        \"nbOfIOPoint\": 2,  \n        \"nbOfLane\": 1,  \n        \"nbOfPlatform\": 1,  \n        \"PlatformType\": [  \n            \"lateral\"  \n        ]  \n    },  \n    \"levelId\": 0,  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            43.66481,  \n            7.196545  \n        ]  \n    },  \n    \"locationType\": 1,  \n    \"name\": \"NCE-Tram-Station-L02-AP-T2\",  \n    \"openingHoursSpecification\": [  \n        {  \n            \"dayOfWeek\": \"Monday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"22:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Tuesday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"22:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Wednesday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"22:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Thursday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"22:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Friday\",  \n            \"opens\": \"07:00:00\",  \n            \"closes\": \"22:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Saturday\",  \n            \"opens\": \"08:00:00\",  \n            \"closes\": \"23:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"Sunday\",  \n            \"opens\": \"08:30:00\",  \n            \"closes\": \"21:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        },  \n        {  \n            \"dayOfWeek\": \"PublicHolidays\",  \n            \"opens\": \"08:30:00\",  \n            \"closes\": \"21:00:00\",  \n            \"validFrom\": \"2021-01-01T00:00:00\",  \n            \"validThrough\": \"2021-12-31T23:59:59\"  \n        }  \n    ],  \n    \"owner\": [  \n        \"uri:ngsi:StreetRetail\"  \n    ],  \n    \"paymentAccepted\": [  \n        \"Cash\",  \n        \"CreditCard\"  \n    ],  \n    \"seeAlso\": \"http://tramway.nice.fr/wp-content/uploads/2019/10/BD_pocket_plan_MAJ03_2019_20082019.pdf\",  \n    \"services\": {  \n        \"purchaseDevice\": true,  \n        \"interactiveDevice\": true,  \n        \"timetableDevice\": true,  \n        \"voiceDevice\": true,  \n        \"informationBoardDevice\": true,  \n        \"messageDevice\": false,  \n        \"shelters\": true,  \n        \"restBench\": false,  \n        \"emergencyPhone\": false,  \n        \"videoSurveillance\": true,  \n        \"defibrillator\": false,  \n        \"wheelChairAccessible\": true  \n    },  \n    \"stationConnected\": [  \n        {  \n            \"stationType\": \"tram\",  \n            \"linesConnected\": [  \n                \"Tram 2 - CADAM / Nikaia\",  \n                \"Tram 3 - Saint Isidore / Stade Allianz Riviera\"  \n            ]  \n        },  \n        {  \n            \"stationType\": \"train\",  \n            \"linesConnected\": [  \n                \"Gare SNCF Nice Saint Augustin (600m)\"  \n            ]  \n        },  \n        {  \n            \"stationType\": \"bus\",  \n            \"linesConnected\": [  \n                \"L20 - Giono / Les Pugets\",  \n                \"L20 - Centre Commercial St Isidore\",  \n                \"L21 - Le Gu\\u00e9 / Polygone Riviera\",  \n                \"L54 - Centre Commercial Cap 3000 - St Jeannet\",  \n                \"L90 - La Bolline\",  \n                \"91 Auron\",  \n                \"L92 - Isola 2000\"  \n            ]  \n        }  \n    ],  \n    \"stationType\": [  \n        \"tram\"  \n    ],  \n    \"webSite\": \"https://tramway.nice.fr/Plan-Station-L02-AP-T2.pdf\",  \n    \"wheelChairAccessible\": 1,  \n    \"zoneId\": \"B\",  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: UrbanMobility
      MODELS:
        - MODEL_NAME: TransitManagement
        - MODEL_DESCRIPTION: A public transit system Data Model
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: A Data Model for public transit system.,
              mail: null, organization: null, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              TransitManagement of the Subject.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: TransitManagement  \n=========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.UrbanMobility/blob/master/TransitManagement/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A public transit system Data Model**  \n\rversion: 0.0.3  \n\n\r## List of properties  \n\n\r- `ac_available`: Describes the presence of air conditioning option in the vehicle corresponding to this observation.  \r- `actual_trip_end_time`: This field specifies the time at which service or trip corresponding to this observation is scheduled to end.  \r- `actual_trip_start_time`: This field specifies the time at which service actually began.  This is SameAs: absolute 'time'(StopTimeEvent) in the 'arrival' field of the stop_time_update (StopTimeUpdate) message of the GTFS Realtime message-TripUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)  \r- `address`: The mailing address  \r- `agency_fare_url`: URL of a web page that contains the details of the fares and also could allow to purchase tickets for that agency online. SameAs: 'agency_fare_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `agency_id`: ID that uniquely identifies a transit agency. A transit feed may represent data from more than one agency. The agency_id is dataset unique. This field is optional for transit feeds that only contain data for a single agency. SameAs: 'agency_id' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `agency_lang`: Contains a two-letter ISO 639-1 code for the primary language used by this transit agency. The language code is case-insensitive (both en and EN are accepted). SameAs: 'agency_lang' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `agency_name`: The agency_name field contains the full name of the transit agency. SameAs: 'agency_name' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `agency_timezone`: Timezone field contains the timezone where the transit agency is located. SameAs: 'agency_timezone' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `agency_url`: The agency_url field contains the URL of the transit agency. SameAs: 'agency_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `arrival`: If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate. SameAs: 'arrival' field from GTFS Realtime message-StopTimeUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeupdate)  \r- `arrival_time`: Specifies the arrival time at a specific stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (HH:MM:SS is also accepted, if the hour begins with 0). Note: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. SameAs: 'arrival_time' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)  \r- `bearing`: Gives the vehicle GPS angle measured in a clockwise direction from the True North. SameAs 'bearing' field from GTFS Realtime message-Position(https://developers.google.com/transit/gtfs-realtime/reference#message-position)  \r- `current_status`: Describes the status of the vehicle w.r.t the stop corresponding to this observation ENUM: [INCOMING_AT, STOPPED_AT, IN_TRANSIT_TO]. SameAs:'current_status' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)  \r- `current_stop_sequence`: Gives the stop sequence index of the current stop. This is determined by considering current_status, if current_status is missing IN_TRANSIT_TO is assumed. SameAs:'current_stop_sequence' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)  \r- `dataDescriptor`: URI pointing to the data-descriptor entity  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `departure`: If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate. SameAs: 'departure' field from GTFS Realtime message-StopTimeUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeupdate)  \r- `departure_time`: Specifies the departure time from a specific stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (HH:MM:SS is also accepted, if the hour begins with 0).   \nNote: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. SameAs: 'departure_time' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)  \r- `depot_id`: Describes the unique id of the bus depot corresponding to this observation.  \r- `depot_name`: Describes the depot name of the bus depot corresponding to this observation.  \r- `description`: A description of this item  \r- `deviceInfo`: Information about the device associated with the observations.  \r- `direction_id`: Indicates the direction of travel of the vehicle corresponding to this observation, can be referenced from the GTFS static feed trips.txt. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `entity_id`: Feed unique ID for the entity corressponding to this observation.SameAs:'entity_id' field from GTFS Realtime message-FeedEntity(https://developers.google.com/transit/gtfs-realtime/reference#message-feedentity)  \r- `id`: Unique identifier of the entity  \r- `last_stop_arrival_time`: Specifies the arrival time at the previous stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (H:MM:SS is also accepted, if the hour begins with 0).   \nNote: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. This is SameAs: absolute 'time'(StopTimeEvent) in the 'arrival' field of the stop_time_update (StopTimeUpdate) message of the GTFS Realtime message-TripUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)  \r- `last_stop_id`: Stop ID/Stop name of the previous bus stop corresponding to the bus in this observation. SameAs: 'stop_id' field from GTFS Realtime message-VehiclePosition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)  \r- `last_tracked_time`: Gives the time at which the vehicle was last tracked.  \r- `license_plate`: Gives the License Plate number of the vehicle. SameAs: 'license_plate' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `position`: Describes the current position of the vehicle corresponding to this observation. SameAs: position field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)  \r- `routeStopSequence`: Gives the stop IDs/stop codes or station IDs/station codes in the right sequence for the route or line corresponding to this observation.  \r- `route_color`: If assigned, this field defines a color that corresponds to a route. The color must be provided as a six-character hexadecimal number, for example, 00FFFF. If no color is specified, the default route color is white (FFFFFF). SameAs: 'route_color' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)  \r- `route_desc`: Description of the route. This can include the entire route details including to and from destination and timing information in a text description form. SameAs: 'route_desc' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)  \r- `route_id`: Route ID assigned to the route on which the bus/vehicle corresponding to the bus in this observation is currently plying on. SameAs: 'route_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `route_long_name`: Full name of a route. This name is more descriptive than the routeShortName and often includes the route's destination or stop. This mostly includes the to and from destination names of the route. SameAs: 'route_long_name' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)  \r- `route_short_name`: Short name of a route. This will often be the transit vehicle's board name like '402D',  or 'Green' that riders use to identify a route. SameAs: 'route_short_name' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)  \r- `route_text_color`: This field can be used to specify a legible color to use for text drawn against a background of route_color. The color must be provided as a six-character hexadecimal number, for example, FFD700. If no color is specified, the default text color is black (000000). SameAs: 'route_text_color' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)  \r- `route_type`: Number indicating the type of transport-1 - Subway, Metro. Any underground rail system within a metropolitan area.2 - Rail. Used for intercity or long-distance travel.3 - Bus. Used for short- and long-distance bus routes. SameAs: 'route_type' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)  \r- `route_url`: Contains the URL of a web page about that particular route and is different from the agency_url. SameAs: 'route_url' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)  \r- `schedule_relationship`: Describes if the Route/Trip has been scheduled. SameAs: 'schedule_relationship' field from enumScheduleRelationship (https://developers.google.com/transit/gtfs-realtime/reference#enum-schedulerelationship-2)  \r- `seating_capacity`: Describes the passenger seating capacity of the vehicle corresponding to this observation.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `speed`: Gives the Speed  of the vehicle. SameAs 'speed' field from GTFS Realtime message-Position(https://developers.google.com/transit/gtfs-realtime/reference#message-position)  \r- `standing_capacity`: Describes the passenger standing capacity of the vehicle corresponding to this observation.  \r- `start_date`: Describes the initial scheduled date of the trip corresponding to the vehicle this observation. An example format for this field - YYYYMMDD. SameAs: 'start_date' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `start_time`: Describes the initial scheduled start time of the trip corresponding to the vehicle this observation. An example format for this field - 11:15:35 or 25:15:35. SameAs: 'start_time' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `stop_code`: This field contains short text or a number that uniquely identifies the stop for passengers. Can be same as stop_id if it is for public. SameAs: 'stop_code' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)  \r- `stop_desc`: This field contains a description of a stop. SameAs: 'stop_desc' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)  \r- `stop_headsign`: This field contains the text that appears on a sign that identifies the trip\u2019s destination to passengers. SameAs: 'stop_headsign' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)  \r- `stop_id`: Stop ID/Stop name of the bus stops corresponding to the bus in this observation. SameAs: 'stop_id' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)  \r- `stop_name`: Describes the name of the Bus Stop. SameAs: 'stop_name' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)  \r- `stop_sequence`: Indicates the stop sequence of the vehicle corresponding to this observation, can be referenced from the GTFS static feed stop_times.txt. SameAs: 'stop_sequence' field from GTFS Realtime message-StopTimeUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeupdate)  \r- `stop_sequence_detail`: Describes the stop sequence for a trip in the designated route made by the public transit vehicle.SameAs: 'stop_sequence' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)  \r- `stop_time_update`: Additional information on the vehicle that is serving this trip.  \r- `stop_url`: This field contains the URL of a web page about a particular stop and is different from the agency_url and the route_url fields. SameAs: 'stop_url' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)  \r- `timestamp`: Last reported time of observation from the vehicle. SameAs: 'timestamp' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)  \r- `travelDistance`: The distance between the origin bus stop and the destination bus stop or the total distance travelled corresponding to this observation.  \r- `travelTime`: The time taken to travel between the origin bus stop and the destination bus stop corresponding to this observation in HH:MM:SS format(HH:MM:SS is also accepted, if the hour begins with 0).  \r- `trip`: Describes the trip the vehicle corresponding to this observation is making. SameAs:'trip' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)  \r- `tripDetails`: A descriptor of realtime update on the schedule of a vehicle along a trip.  \r- `tripDirection`: Gives the direction in which the vehicle is travelling in ENUM[UP,DN]  \r- `trip_delay`: This can be positive and negative in seconds and shows how much the vehicle deviates from the planned one. SameAs: 'delay' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent)  \r- `trip_details`: A descriptor of realtime update on the schedule of a vehicle along a trip.  \r- `trip_direction`: Gives the direction in which the vehicle is travelling. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor but is represented in the form of an ENUM[UP,DN] in place of [0,1] as seen in 'direction_id' (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).  \r- `trip_id`: Trip ID/Trip name allotted to the bus corresponding to this observation, in consideration to the time of the day and the direction of the trip on the given routeId. SameAs: 'trip_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)  \r- `trip_update`: Describes the trip information like delay, departures, etc., for a trip made by the vehicle corresponding to this observation.SameAs:'trip_update' field from GTFS Realtime message-FeedEntity(https://developers.google.com/transit/gtfs-realtime/reference#message-feedentity).  \r- `type`: NGSI Entity type. It has to be TransitManagement  \r- `uncertainty`: If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent)  \r- `vehicleDesc`: Describes the additional information of the vehicle corresponding to this observation. SameAs:'vehicle' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)/(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)  \r- `vehicleType`: Describes the type of vehicle corresponding to this observation, could be hopper, compactor, tipper, dumper in case of solid waste management vehicles, BRT mini bus, BRT bus, city bus in case of ITMS vehicles, Ambulance, Fire tender, Police van etc, in case of emergency vehicles and Moped/Scooter, Motor Cycle,  Autorickshaw, Private car/ Jeep car, Tempo, Bus, E-Moped/E-Scooter/E-Motor Cycle, Public motor in case of vehicle registration.  \r- `vehicle_id`: Unique ID assigned to the vehicle corresponding to this observation, used in internal system identification. SameAs: 'id' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)  \r- `vehicle_label`: User visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle. SameAs: 'label' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)  \r- `vehicle_position`: Describes the realtime position of the vehicle corresponding to this observation. SameAs:'vehicle' field from GTFS Realtime message-FeedEntity(https://developers.google.com/transit/gtfs-realtime/reference#message-feedentity)  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nTransitManagement:    \n  description: 'A public transit system Data Model'    \n  properties:    \n    ac_available:    \n      description: 'Describes the presence of air conditioning option in the vehicle corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    actual_trip_end_time:    \n      description: 'This field specifies the time at which service or trip corresponding to this observation is scheduled to end.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    actual_trip_start_time:    \n      description: \"This field specifies the time at which service actually began.  This is SameAs: absolute 'time'(StopTimeEvent) in the 'arrival' field of the stop_time_update (StopTimeUpdate) message of the GTFS Realtime message-TripUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)\"    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    agency_fare_url:    \n      description: \"URL of a web page that contains the details of the fares and also could allow to purchase tickets for that agency online. SameAs: 'agency_fare_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    agency_id:    \n      description: \"ID that uniquely identifies a transit agency. A transit feed may represent data from more than one agency. The agency_id is dataset unique. This field is optional for transit feeds that only contain data for a single agency. SameAs: 'agency_id' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    agency_lang:    \n      description: \"Contains a two-letter ISO 639-1 code for the primary language used by this transit agency. The language code is case-insensitive (both en and EN are accepted). SameAs: 'agency_lang' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    agency_name:    \n      description: \"The agency_name field contains the full name of the transit agency. SameAs: 'agency_name' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    agency_timezone:    \n      description: \"Timezone field contains the timezone where the transit agency is located. SameAs: 'agency_timezone' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    agency_url:    \n      description: \"The agency_url field contains the URL of the transit agency. SameAs: 'agency_url' field from GTFS Static Field Definition - agency.txt (https://developers.google.com/transit/gtfs/reference#agencytxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    arrival:    \n      description: \"If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate. SameAs: 'arrival' field from GTFS Realtime message-StopTimeUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeupdate)\"    \n      properties:    \n        uncertainty:    \n          description: \"Property. If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent).\"    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    arrival_time:    \n      description: \"Specifies the arrival time at a specific stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (HH:MM:SS is also accepted, if the hour begins with 0). Note: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. SameAs: 'arrival_time' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)\"    \n      format: time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    bearing:    \n      description: \"Gives the vehicle GPS angle measured in a clockwise direction from the True North. SameAs 'bearing' field from GTFS Realtime message-Position(https://developers.google.com/transit/gtfs-realtime/reference#message-position)\"    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    current_status:    \n      description: \"Describes the status of the vehicle w.r.t the stop corresponding to this observation ENUM: [INCOMING_AT, STOPPED_AT, IN_TRANSIT_TO]. SameAs:'current_status' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    current_stop_sequence:    \n      description: \"Gives the stop sequence index of the current stop. This is determined by considering current_status, if current_status is missing IN_TRANSIT_TO is assumed. SameAs:'current_stop_sequence' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)\"    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    dataDescriptor:    \n      description: 'URI pointing to the data-descriptor entity'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    departure:    \n      description: \"If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate. SameAs: 'departure' field from GTFS Realtime message-StopTimeUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeupdate)\"    \n      properties:    \n        uncertainty:    \n          description: \"Property. If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent).\"    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    departure_time:    \n      description: \"Specifies the departure time from a specific stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (HH:MM:SS is also accepted, if the hour begins with 0). \\nNote: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. SameAs: 'departure_time' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)\"    \n      format: time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    depot_id:    \n      description: 'Describes the unique id of the bus depot corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    depot_name:    \n      description: 'Describes the depot name of the bus depot corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    deviceInfo:    \n      description: 'Information about the device associated with the observations.'    \n      properties:    \n        deviceBatteryStatus:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the Battery charging status of the reporting device(Connected, Disconnected).'    \n          type: string    \n        deviceID:    \n          description: 'Property. Model:''https://schema.org/Text''. Device ID of the physical sensor/ measurement station corresponding to this observation.'    \n          type: string    \n        deviceModel:    \n          description: 'Property. Model:''https://schema.org/Text''. Describes the information of the device, sensor or system in consideration.'    \n          properties:    \n            brandName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of the brand associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            manufacturerName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of the manufacturer associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            modelName:    \n              description: 'Property. Model:''https://schema.org/Text''. Name of a specific model associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            modelURL:    \n              description: 'Property. Model:''https://schema.org/Text''. URL providing further information of a specific model associated with an entity, e.g., sensor, device etc.'    \n              type: string    \n            observationDateTime:    \n              description: 'Property. Last reported time of observation.'    \n              format: date-time    \n              type: string    \n            trip_update:    \n              description: \"Property. Describes the trip information like delay, departures, etc., for a trip made by the vehicle corresponding to this observation.SameAs:'trip_update' field from GTFS Realtime message-FeedEntity(https://developers.google.com/transit/gtfs-realtime/reference#message-feedentity)\"    \n              properties:    \n                trip:    \n                  description: \"Property. Following the conventions of GTFS trip. Model:'https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor'. \"    \n                  properties:    \n                    direction_id:    \n                      type: number    \n                    route_id:    \n                      type: string    \n                    schedule_relationship:    \n                      enum:    \n                        - SCHEDULED    \n                        - ADDED    \n                        - UNSCHEDULED    \n                        - CANCELED    \n                      type: string    \n                    start_date:    \n                      type: string    \n                    start_time:    \n                      type: string    \n                    trip_id:    \n                      type: string    \n                  type: object    \n              type: object    \n          type: object    \n        deviceName:    \n          description: 'Property. Model:''https://schema.org/Text''. Device Name or Station name of the sensor device/station corresponding to this observation.'    \n          type: string    \n        deviceSimNumber:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the sim number of the device in the waste management vehicle.'    \n          type: string    \n        measurand:    \n          description: 'Property. Model:''https://schema.org/Text''. Property/properties sensed/observed/measured by the device.'    \n          type: string    \n        rfID:    \n          description: 'Property. Model:''https://schema.org/Text''. Gives the ID of the RFID reader.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    direction_id:    \n      description: \"Indicates the direction of travel of the vehicle corresponding to this observation, can be referenced from the GTFS static feed trips.txt. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    entity_id:    \n      description: \"Feed unique ID for the entity corressponding to this observation.SameAs:'entity_id' field from GTFS Realtime message-FeedEntity(https://developers.google.com/transit/gtfs-realtime/reference#message-feedentity)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &transitmanagement_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    last_stop_arrival_time:    \n      description: \"Specifies the arrival time at the previous stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (H:MM:SS is also accepted, if the hour begins with 0). \\nNote: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. This is SameAs: absolute 'time'(StopTimeEvent) in the 'arrival' field of the stop_time_update (StopTimeUpdate) message of the GTFS Realtime message-TripUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)\"    \n      format: time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    last_stop_id:    \n      description: \"Stop ID/Stop name of the previous bus stop corresponding to the bus in this observation. SameAs: 'stop_id' field from GTFS Realtime message-VehiclePosition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    last_tracked_time:    \n      description: 'Gives the time at which the vehicle was last tracked.'    \n      format: time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    license_plate:    \n      description: \"Gives the License Plate number of the vehicle. SameAs: 'license_plate' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *transitmanagement_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    position:    \n      description: \"Describes the current position of the vehicle corresponding to this observation. SameAs: position field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)\"    \n      properties:    \n        bearing:    \n          description: 'Property. Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. This should not be deduced from the sequence of previous positions, which clients can compute from previous data'    \n          type: number    \n        latitude:    \n          description: 'Property. Degrees North, in the WGS-84 coordinate system.'    \n          type: number    \n        longitude:    \n          description: 'Property. Degrees East, in the WGS-84 coordinate system.'    \n          type: number    \n        odometer:    \n          description: 'Property. Odometer value, in meters. Units:''meters'''    \n          type: number    \n        speed:    \n          description: 'Property. Momentary speed measured by the vehicle, in meters per second. Units:''meters per second'''    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: \"https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition\"    \n        type: Property    \n    routeStopSequence:    \n      description: 'Gives the stop IDs/stop codes or station IDs/station codes in the right sequence for the route or line corresponding to this observation.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    route_color:    \n      description: \"If assigned, this field defines a color that corresponds to a route. The color must be provided as a six-character hexadecimal number, for example, 00FFFF. If no color is specified, the default route color is white (FFFFFF). SameAs: 'route_color' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    route_desc:    \n      description: \"Description of the route. This can include the entire route details including to and from destination and timing information in a text description form. SameAs: 'route_desc' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    route_id:    \n      description: \"Route ID assigned to the route on which the bus/vehicle corresponding to the bus in this observation is currently plying on. SameAs: 'route_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    route_long_name:    \n      description: \"Full name of a route. This name is more descriptive than the routeShortName and often includes the route's destination or stop. This mostly includes the to and from destination names of the route. SameAs: 'route_long_name' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    route_short_name:    \n      description: \"Short name of a route. This will often be the transit vehicle's board name like '402D',  or 'Green' that riders use to identify a route. SameAs: 'route_short_name' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    route_text_color:    \n      description: \"This field can be used to specify a legible color to use for text drawn against a background of route_color. The color must be provided as a six-character hexadecimal number, for example, FFD700. If no color is specified, the default text color is black (000000). SameAs: 'route_text_color' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    route_type:    \n      description: \"Number indicating the type of transport-1 - Subway, Metro. Any underground rail system within a metropolitan area.2 - Rail. Used for intercity or long-distance travel.3 - Bus. Used for short- and long-distance bus routes. SameAs: 'route_type' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    route_url:    \n      description: \"Contains the URL of a web page about that particular route and is different from the agency_url. SameAs: 'route_url' field from GTFS Static Field definitions-routes.txt (https://developers.google.com/transit/gtfs/reference#routestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    schedule_relationship:    \n      description: \"Describes if the Route/Trip has been scheduled. SameAs: 'schedule_relationship' field from enumScheduleRelationship (https://developers.google.com/transit/gtfs-realtime/reference#enum-schedulerelationship-2)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    seating_capacity:    \n      description: 'Describes the passenger seating capacity of the vehicle corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    speed:    \n      description: \"Gives the Speed  of the vehicle. SameAs 'speed' field from GTFS Realtime message-Position(https://developers.google.com/transit/gtfs-realtime/reference#message-position)\"    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    standing_capacity:    \n      description: 'Describes the passenger standing capacity of the vehicle corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    start_date:    \n      description: \"Describes the initial scheduled date of the trip corresponding to the vehicle this observation. An example format for this field - YYYYMMDD. SameAs: 'start_date' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    start_time:    \n      description: \"Describes the initial scheduled start time of the trip corresponding to the vehicle this observation. An example format for this field - 11:15:35 or 25:15:35. SameAs: 'start_time' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      format: time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stop_code:    \n      description: \"This field contains short text or a number that uniquely identifies the stop for passengers. Can be same as stop_id if it is for public. SameAs: 'stop_code' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stop_desc:    \n      description: \"This field contains a description of a stop. SameAs: 'stop_desc' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stop_headsign:    \n      description: \"This field contains the text that appears on a sign that identifies the trip\u2019s destination to passengers. SameAs: 'stop_headsign' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stop_id:    \n      description: \"Stop ID/Stop name of the bus stops corresponding to the bus in this observation. SameAs: 'stop_id' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stop_name:    \n      description: \"Describes the name of the Bus Stop. SameAs: 'stop_name' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stop_sequence:    \n      description: \"Indicates the stop sequence of the vehicle corresponding to this observation, can be referenced from the GTFS static feed stop_times.txt. SameAs: 'stop_sequence' field from GTFS Realtime message-StopTimeUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeupdate)\"    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    stop_sequence_detail:    \n      description: \"Describes the stop sequence for a trip in the designated route made by the public transit vehicle.SameAs: 'stop_sequence' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)\"    \n      properties:    \n        stop_id:    \n          description: 'Property. Must be the same as in stops.txt in the corresponding GTFS feed. Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty.'    \n          type: string    \n        stop_sequence:    \n          description: 'Property. Must be the same as in stop_times.txt in the corresponding GTFS feed. Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty. stop_sequence is required for trips that visit the same stop_id more than once (e.g., a loop) to disambiguate which stop the prediction is for.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    stop_time_update:    \n      description: 'Additional information on the vehicle that is serving this trip.'    \n      properties:    \n        arrival:    \n          description: 'Property. If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate - both fields cannot be empty. arrival and departure may both be empty when schedule_relationship is SKIPPED. If schedule_relationship is NO_DATA, arrival and departure must be empty.'    \n          properties:    \n            uncertainty:    \n              description: \"Property. If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent).\"    \n              type: number    \n          type: object    \n        departure:    \n          description: 'Property. If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate - both fields cannot be empty. arrival and departure may both be empty when schedule_relationship is SKIPPED. If schedule_relationship is NO_DATA, arrival and departure must be empty.'    \n          properties:    \n            uncertainty:    \n              description: \"Property. If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent).\"    \n              type: number    \n          type: object    \n        schedule_relationship:    \n          description: 'Property. Enum:''SCHEDULED, SKIPPED, NO_DATA''. SCHEDULED means that the vehicle is proceeding in accordance with its static schedule of stops, although not necessarily according to the times of the schedule. This is the default behavior. At least one of arrival and departure must be provided. SKIPPED means that The stop is skipped, i.e., the vehicle will not stop at this stop. The arrival and departure fields are optional. NO_DATA means that no data is given for this stop. It indicates that there is no realtime information available. When set NO_DATA is propagated through subsequent stops so this is the recommended way of specifying from which stop you do not have realtime information. When NO_DATA is set neither arrival nor departure should be supplied.'    \n          enum:    \n            - SCHEDULED    \n            - SKIPPED    \n            - NO_DATA    \n          type: string    \n        stop_id:    \n          description: 'Property. Must be the same as in stops.txt in the corresponding GTFS feed. Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty.'    \n          type: string    \n        stop_sequence:    \n          description: 'Property. Must be the same as in stop_times.txt in the corresponding GTFS feed. Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty. stop_sequence is required for trips that visit the same stop_id more than once (e.g., a loop) to disambiguate which stop the prediction is for.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    stop_url:    \n      description: \"This field contains the URL of a web page about a particular stop and is different from the agency_url and the route_url fields. SameAs: 'stop_url' field from GTFS Static Field definitions-stops.txt (https://developers.google.com/transit/gtfs/reference#stopstxt)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    timestamp:    \n      description: \"Last reported time of observation from the vehicle. SameAs: 'timestamp' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)\"    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    travelDistance:    \n      description: 'The distance between the origin bus stop and the destination bus stop or the total distance travelled corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    travelTime:    \n      description: 'The time taken to travel between the origin bus stop and the destination bus stop corresponding to this observation in HH:MM:SS format(HH:MM:SS is also accepted, if the hour begins with 0).'    \n      format: time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    trip:    \n      description: \"Describes the trip the vehicle corresponding to this observation is making. SameAs:'trip' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)\"    \n      properties:    \n        direction_id:    \n          description: \"Property. Indicates the direction of travel of the vehicle corresponding to this observation, can be referenced from the GTFS static feed trips.txt. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n          type: number    \n        route_id:    \n          description: \"Property. Route ID assigned to the route on which the bus/vehicle corresponding to the bus in this observation is currently plying on. SameAs: 'route_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n          type: string    \n        schedule_relationship:    \n          description: \"Property. Describes if the Route/Trip has been scheduled. SameAs: 'schedule_relationship' field from enumScheduleRelationship (https://developers.google.com/transit/gtfs-realtime/reference#enum-schedulerelationship-2).\"    \n          type: string    \n        start_date:    \n          description: \"Property. Describes the initial scheduled date of the trip corresponding to the vehicle this observation. An example format for this field - YYYYMMDD. SameAs: 'start_date' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n          type: string    \n        start_time:    \n          description: \"Property. Describes the initial scheduled start time of the trip corresponding to the vehicle this observation. An example format for this field - 11:15:35 or 25:15:35. SameAs: 'start_time' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n          type: string    \n        trip_id:    \n          description: \"Property. Trip ID/Trip name allotted to the bus corresponding to this observation, in consideration to the time of the day and the direction of the trip on the given routeId. SameAs: 'trip_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n          type: string    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    tripDetails:    \n      description: 'A descriptor of realtime update on the schedule of a vehicle along a trip.'    \n      properties:    \n        arrival_time:    \n          description: \"Property.  Specifies the arrival time at a specific stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (HH:MM:SS is also accepted, if the hour begins with 0). Note: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. SameAs: 'arrival_time' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt).\"    \n          format: time    \n          type: string    \n        departure_time:    \n          description: \"Property. Specifies the departure time from a specific stop for a specific trip on a route. Times must be eight digits in HH:MM:SS format (HH:MM:SS is also accepted, if the hour begins with 0). Note: Trips that span multiple dates will have stop times greater than 24:00:00. For example, if a trip begins at 10:30:00 p.m. and ends at 2:15:00 a.m. on the following day, the stop times would be 22:30:00 and 26:15:00. Entering those stop times as 22:30:00 and 02:15:00 would not produce the desired results. SameAs: 'departure_time' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt).\"    \n          format: time    \n          type: string    \n        stop_headsign:    \n          description: \"Property. This field contains the text that appears on a sign that identifies the trip\u2019s destination to passengers. SameAs: 'stop_headsign' field from GTFS Static Field definitions-stop_times.txt (https://developers.google.com/transit/gtfs/reference#stop_timestxt)\"    \n          type: string    \n        stop_id:    \n          description: \"Property. Stop ID/Stop name of the bus stops corresponding to the bus in this observation. SameAs: 'stop_id' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)\"    \n          type: string    \n        stop_sequence:    \n          description: \"Property. Indicates the stop sequence of the vehicle corresponding to this observation, can be referenced from the GTFS static feed stop_times.txt. SameAs: 'stop_sequence' field from GTFS Realtime message-StopTimeUpdate (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeupdate).\"    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    tripDirection:    \n      description: 'Gives the direction in which the vehicle is travelling in ENUM[UP,DN]'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    trip_delay:    \n      description: \"This can be positive and negative in seconds and shows how much the vehicle deviates from the planned one. SameAs: 'delay' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent)\"    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    trip_details:    \n      description: 'A descriptor of realtime update on the schedule of a vehicle along a trip.'    \n      properties:    \n        bearing:    \n          description: 'Property. Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. This should not be deduced from the sequence of previous positions, which clients can compute from previous data'    \n          type: number    \n        odometer:    \n          description: 'Property. Odometer value, in meters. Units:''meters'''    \n          type: number    \n        speed:    \n          description: 'Property. Momentary speed measured by the vehicle, in meters per second. Units:''meters per second'''    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    trip_direction:    \n      description: \"Gives the direction in which the vehicle is travelling. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor but is represented in the form of an ENUM[UP,DN] in place of [0,1] as seen in 'direction_id' (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    trip_id:    \n      description: \"Trip ID/Trip name allotted to the bus corresponding to this observation, in consideration to the time of the day and the direction of the trip on the given routeId. SameAs: 'trip_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    trip_update:    \n      description: \"Describes the trip information like delay, departures, etc., for a trip made by the vehicle corresponding to this observation.SameAs:'trip_update' field from GTFS Realtime message-FeedEntity(https://developers.google.com/transit/gtfs-realtime/reference#message-feedentity).\"    \n      properties:    \n        stop_time_update:    \n          description: 'Property. Additional information on the vehicle that is serving this trip.'    \n          properties:    \n            arrival:    \n              description: 'Property. If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate - both fields cannot be empty. arrival and departure may both be empty when schedule_relationship is SKIPPED. If schedule_relationship is NO_DATA, arrival and departure must be empty.'    \n              properties:    \n                uncertainty:    \n                  description: \"Property. If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent).\"    \n                  type: number    \n              type: object    \n            departure:    \n              description: 'Property. If schedule_relationship is empty or SCHEDULED, either arrival or departure must be provided within a StopTimeUpdate - both fields cannot be empty. arrival and departure may both be empty when schedule_relationship is SKIPPED. If schedule_relationship is NO_DATA, arrival and departure must be empty.'    \n              properties:    \n                uncertainty:    \n                  description: \"Property. If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent).\"    \n                  type: number    \n              type: object    \n            schedule_relationship:    \n              description: 'Property. Enum:''SCHEDULED, SKIPPED, NO_DATA''. SCHEDULED means that the vehicle is proceeding in accordance with its static schedule of stops, although not necessarily according to the times of the schedule. This is the default behavior. At least one of arrival and departure must be provided. SKIPPED means that The stop is skipped, i.e., the vehicle will not stop at this stop. The arrival and departure fields are optional. NO_DATA means that no data is given for this stop. It indicates that there is no realtime information available. When set NO_DATA is propagated through subsequent stops so this is the recommended way of specifying from which stop you do not have realtime information. When NO_DATA is set neither arrival nor departure should be supplied.'    \n              enum:    \n                - SCHEDULED    \n                - SKIPPED    \n                - NO_DATA    \n              type: string    \n            stop_id:    \n              description: 'Property. Must be the same as in stops.txt in the corresponding GTFS feed. Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty.'    \n              type: string    \n            stop_sequence:    \n              description: 'Property. Must be the same as in stop_times.txt in the corresponding GTFS feed. Either stop_sequence or stop_id must be provided within a StopTimeUpdate - both fields cannot be empty. stop_sequence is required for trips that visit the same stop_id more than once (e.g., a loop) to disambiguate which stop the prediction is for.'    \n              type: number    \n          type: object    \n        timestamp:    \n          description: \"Property. Last reported time of observation from the vehicle. SameAs: 'timestamp' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition).\"    \n          format: date-time    \n          type: string    \n        trip:    \n          description: \"Property. Describes the trip the vehicle corresponding to this observation is making. SameAs:'trip' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate).\"    \n          properties:    \n            direction_id:    \n              description: \"Property. Indicates the direction of travel of the vehicle corresponding to this observation, can be referenced from the GTFS static feed trips.txt. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: number    \n            route_id:    \n              description: \"Property. Route ID assigned to the route on which the bus/vehicle corresponding to the bus in this observation is currently plying on. SameAs: 'route_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n            schedule_relationship:    \n              description: \"Property. Describes if the Route/Trip has been scheduled. SameAs: 'schedule_relationship' field from enumScheduleRelationship (https://developers.google.com/transit/gtfs-realtime/reference#enum-schedulerelationship-2).\"    \n              type: string    \n            start_date:    \n              description: \"Property. Describes the initial scheduled date of the trip corresponding to the vehicle this observation. An example format for this field - YYYYMMDD. SameAs: 'start_date' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n            start_time:    \n              description: \"Property. Describes the initial scheduled start time of the trip corresponding to the vehicle this observation. An example format for this field - 11:15:35 or 25:15:35. SameAs: 'start_time' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n            trip_id:    \n              description: \"Property. Trip ID/Trip name allotted to the bus corresponding to this observation, in consideration to the time of the day and the direction of the trip on the given routeId. SameAs: 'trip_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n          type: object    \n        vehicleDesc:    \n          description: \"Property. Describes the additional information of the vehicle corresponding to this observation. SameAs:'vehicle' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)/(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate).\"    \n          properties:    \n            license_plate:    \n              description: \"Property. Gives the License Plate number of the vehice.SameAs: 'license_plate' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n              type: string    \n            vehicle_id:    \n              description: \"Property. Unique ID assigned to the vehicle corresponding to this observation,used in internal system identification.SameAs: 'id' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n              type: string    \n            vehicle_label:    \n              description: \"Property. User visible label,i.e.,something that must be shown to the passenger to help identify the correct vehicle.SameAs: 'label' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n              type: string    \n          type: object    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be TransitManagement'    \n      enum:    \n        - TransitManagement    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    uncertainty:    \n      description: \"If uncertainty is omitted, it is interpreted as unknown. To specify a completely certain prediction, set its uncertainty to 0.SameAs: 'uncertainty' field from GTFS Realtime message-StopTimeEvent (https://developers.google.com/transit/gtfs-realtime/reference#message-stoptimeevent)\"    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    vehicleDesc:    \n      description: \"Describes the additional information of the vehicle corresponding to this observation. SameAs:'vehicle' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)/(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate)\"    \n      properties:    \n        license_plate:    \n          description: \"Property. Gives the License Plate number of the vehice.SameAs: 'license_plate' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n          type: string    \n        vehicle_id:    \n          description: \"Property. Unique ID assigned to the vehicle corresponding to this observation,used in internal system identification.SameAs: 'id' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n          type: string    \n        vehicle_label:    \n          description: \"Property. User visible label,i.e.,something that must be shown to the passenger to help identify the correct vehicle.SameAs: 'label' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n          type: string    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    vehicleType:    \n      description: 'Describes the type of vehicle corresponding to this observation, could be hopper, compactor, tipper, dumper in case of solid waste management vehicles, BRT mini bus, BRT bus, city bus in case of ITMS vehicles, Ambulance, Fire tender, Police van etc, in case of emergency vehicles and Moped/Scooter, Motor Cycle,  Autorickshaw, Private car/ Jeep car, Tempo, Bus, E-Moped/E-Scooter/E-Motor Cycle, Public motor in case of vehicle registration.'    \n      enum:    \n        - agriculturalVehicle    \n        - ambulance    \n        - anyVehicle    \n        - articulatedVehicle    \n        - autorickshaw    \n        - bicycle    \n        - binTrolley    \n        - 'BRT mini bus\u00b7'    \n        - 'BRT bus'    \n        - bus    \n        - car    \n        - caravan    \n        - carOrLightVehicle    \n        - carWithCaravan    \n        - carWithTrailer    \n        - cleaningTrolley    \n        - compactor    \n        - constructionOrMaintenanceVehicle    \n        - dumper    \n        - e-moped    \n        - e-scooter    \n        - e-motorcycle    \n        - fireTender    \n        - fourWheelDrive    \n        - highSidedVehicle    \n        - hopper    \n        - lorry    \n        - minibus    \n        - moped    \n        - motorcycle    \n        - motorcycleWithSideCar    \n        - motorscooter    \n        - policeVan    \n        - publicMotor    \n        - sweepingMachine    \n        - tanker    \n        - tempo    \n        - threeWheeledVehicle    \n        - tipper    \n        - trailer    \n        - tram    \n        - trolley    \n        - twoWheeledVehicle    \n        - van    \n        - vehicleWithoutCatalyticConverter    \n        - vehicleWithCaravan    \n        - vehicleWithTrailer    \n        - withEvenNumberedRegistrationPlates    \n        - withOddNumberedRegistrationPlates    \n        - other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    vehicle_id:    \n      description: \"Unique ID assigned to the vehicle corresponding to this observation, used in internal system identification. SameAs: 'id' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    vehicle_label:    \n      description: \"User visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle. SameAs: 'label' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)\"    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    vehicle_position:    \n      description: \"Describes the realtime position of the vehicle corresponding to this observation. SameAs:'vehicle' field from GTFS Realtime message-FeedEntity(https://developers.google.com/transit/gtfs-realtime/reference#message-feedentity)\"    \n      properties:    \n        current_status:    \n          description: \"Property. Describes the status of the vehicle w.r.t the stop corresponding to this observation ENUM: [INCOMING_AT, STOPPED_AT, IN_TRANSIT_TO]. SameAs:'current_status' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition).\"    \n          type: string    \n        current_stop_sequence:    \n          description: \"Property. Gives the stop sequence index of the current stop. This is determined by considering current_status, if current_status is missing IN_TRANSIT_TO is assumed. SameAs:'current_stop_sequence' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition).\"    \n          type: number    \n        position:    \n          description: \"Property. Describes the current position of the vehicle corresponding to this observation. SameAs: 'position' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition).\"    \n          properties: {}    \n          type: object    \n        stop_id:    \n          description: \"Property. Stop ID/Stop name of the bus stops corresponding to the bus in this observation. SameAs: 'stop_id' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition).\"    \n          type: string    \n        timestamp:    \n          description: \"Property. Last reported time of observation from the vehicle. SameAs:  'timestamp' field from GTFS Realtime message-Vehicleposition (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition).\"    \n          format: date-time    \n          type: string    \n        trip:    \n          description: \"Property. Describes the trip the vehicle corresponding to this observation is making. SameAs:'trip' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate).\"    \n          properties:    \n            direction_id:    \n              description: \"Property. Indicates the direction of travel of the vehicle corresponding to this observation, can be referenced from the GTFS static feed trips.txt. SameAs: 'direction_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: number    \n            route_id:    \n              description: \"Property. Route ID assigned to the route on which the bus/vehicle corresponding to the bus in this observation is currently plying on. SameAs: 'route_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n            schedule_relationship:    \n              description: \"Property. Describes if the Route/Trip has been scheduled. SameAs: 'schedule_relationship' field from enumScheduleRelationship (https://developers.google.com/transit/gtfs-realtime/reference#enum-schedulerelationship-2).\"    \n              type: string    \n            start_date:    \n              description: \"Property. Describes the initial scheduled date of the trip corresponding to the vehicle this observation. An example format for this field - YYYYMMDD. SameAs: 'start_date' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n            start_time:    \n              description: \"Property. Describes the initial scheduled start time of the trip corresponding to the vehicle this observation. An example format for this field - 11:15:35 or 25:15:35. SameAs: 'start_time' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n            trip_id:    \n              description: \"Property. Trip ID/Trip name allotted to the bus corresponding to this observation, in consideration to the time of the day and the direction of the trip on the given routeId. SameAs: 'trip_id' field from GTFS Realtime message-TripDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-tripdescriptor).\"    \n              type: string    \n          type: object    \n        vehicleDesc:    \n          description: \"Property. Describes the additional information of the vehicle corresponding to this observation. SameAs:'vehicle' field from GTFS Realtime message-VehiclePosition(https://developers.google.com/transit/gtfs-realtime/reference#message-vehicleposition)/(https://developers.google.com/transit/gtfs-realtime/reference#message-tripupdate).\"    \n          properties:    \n            license_plate:    \n              description: \"Property. Gives the License Plate number of the vehice.SameAs: 'license_plate' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n              type: string    \n            vehicle_id:    \n              description: \"Property. Unique ID assigned to the vehicle corresponding to this observation,used in internal system identification.SameAs: 'id' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n              type: string    \n            vehicle_label:    \n              description: \"Property. User visible label,i.e.,something that must be shown to the passenger to help identify the correct vehicle.SameAs: 'label' field from GTFS Realtime message - VehicleDescriptor(https: //developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor).\"    \n              type: string    \n          type: object    \n      type: object    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.UrbanMobility/blob/master/TransitManagement/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.UrbanMobility/TransitManagement/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.0.3    \n```  \n</details>    \n\r## Example payloads    \n\r#### TransitManagement NGSI-v2 key-values Example    \n\rHere is an example of a TransitManagement in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n\t\"id\": \"https://smart-data-models.github.io/IUDX/TransitManagement/schema.json\",  \n\t\"type\": \"TransitManagement\",  \n\t\"vehicleType\":\"hopper\",  \n\t\"trip_delay\":11968,  \n\t\"agency_lang\":\"en\",  \n\t\"depot_name\":\"BHESTAN DEPOT\",  \n\t\"travelTime\":\"22:11:14\",  \n\t\"direction_id\":0,  \n\t\"schedule_relationship\":\"SCHEDULED\",  \n\t\"vehicle_id\":\"52TC12\",  \n\t\"agency_fare_url\":\"http://charteredbike.in/surat/?page_id=1021\",  \n\t\"actual_trip_end_time\":\"2021-10-28T08:24:22+05:30\",  \n\t\"last_tracked_time\":\"08:13:22\",  \n\t\"standing_capacity\":20,  \n\t\"last_stop_arrival_time\":\"13:30:12\",  \n\t\"agency_id\":\"agency001\",  \n\t\"current_status\":\"INCOMING_AT\",  \n\t\"route_type\":\"1\",  \n\t\"speed\":28,  \n\t\"route_id\":\"17AD\",  \n\t\"seating_capacity\":70,  \n\t\"vehicle_label\":\"A03\",  \n\t\"timestamp\":\"2021-10-28T08:13:22+05:30\",  \n\t\"arrival_time\":\"22:00:28\",  \n\t\"route_long_name\":\"Baiyappanahalli to Mysuru Road\",  \n\t\"agency_timezone\":\"Asia/Kolkata\",  \n\t\"stop_code\":\"F12\",  \n\t\"agency_name\":\"Chartered Bike Surat\",  \n\t\"route_desc\":\"Phase1-Phase2\",  \n\t\"license_plate\":\"GJ05BX1583\",  \n\t\"stop_id\":\"1016\",  \n\t\"uncertainity\":0,  \n\t\"route_color\":\"00FFFF\",  \n\t\"travelDistance\":9.00174,  \n\t\"actual_trip_start_time\":\"2021-10-28T07:46:51+05:30\",  \n\t\"bearing\":90,  \n\t\"stop_sequence\":24,  \n\t\"start_date\":\"2022-03-01\",  \n\t\"current_stop_sequence\":1001,  \n\t\"start_time\":\"11:15:35\",  \n\t\"trip_id\":\"23952340\",  \n\t\"route_text_color\":\"FFD700\",  \n\t\"ac_available\":\"yes\",  \n\t\"tripDirection\":\"DN\",  \n\t\"agency_url\": \"http://charteredbike.in/surat/\",  \n\t\"routeStopSequence\":[\"10\",\"1001\",\"1002\",\"1003\",\"1004\",\"1005\"],  \n\t\"trip_direction\":\"DN\",  \n\t\"departure_time\":\"22:00:33\",  \n\t\"last_stop_id\":\"4032\",  \n\t\"route_short_name\":\"Purple Line\",  \n\t\"stop_name\":\"DEVASHISH NAGAR MORA BHAGAL\",  \n\t\"depot_id\":\"1\",  \n\t\"observationDateTime\":\"2021-10-28T08:13:22+05:30\"  \n}  \n```  \n\r#### TransitManagement NGSI-v2 normalized Example    \n\rHere is an example of a TransitManagement in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://smart-data-models.github.io/IUDX/TransitManagement/schema.json\",  \n  \"type\": \"TransitManagement\",  \n  \"vehicleType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"hopper\"  \n  },  \n  \"trip_delay\": {  \n    \"type\": \"Number\",  \n    \"value\": 11968  \n  },  \n  \"agency_lang\": {  \n    \"type\": \"Text\",  \n    \"value\": \"en\"  \n  },  \n  \"depot_name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"BHESTAN DEPOT\"  \n  },  \n  \"travelTime\": {  \n    \"type\": \"Time\",  \n    \"value\": \"22:11:14\"  \n  },  \n  \"direction_id\": {  \n    \"type\": \"Boolean\",  \n    \"value\": \"false\"  \n  },  \n  \"schedule_relationship\": {  \n    \"type\": \"Text\",  \n    \"value\": \"SCHEDULED\"  \n  },  \n  \"vehicle_id\": {  \n    \"type\": \"Text\",  \n    \"value\": \"52TC12\"  \n  },  \n  \"agency_fare_url\": {  \n    \"type\": \"URL\",  \n    \"value\": \"http://charteredbike.in/surat/?page_id=1021\"  \n  },  \n  \"actual_trip_end_time\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2021-10-28T08:24:22+05:30\"  \n  },  \n  \"last_tracked_time\": {  \n    \"type\": \"Time\",  \n    \"value\": \"08:13:22\"  \n  },  \n  \"standing_capacity\": {  \n    \"type\": \"Number\",  \n    \"value\": 20  \n  },  \n  \"last_stop_arrival_time\": {  \n    \"type\": \"Text\",  \n    \"value\": \"13:30:12\"  \n  },  \n  \"agency_id\": {  \n    \"type\": \"Text\",  \n    \"value\": \"agency001\"  \n  },  \n  \"current_status\": {  \n    \"type\": \"Text\",  \n    \"value\": \"INCOMING_AT\"  \n  },  \n  \"route_type\": {  \n    \"type\": \"Text\",  \n    \"value\": \"1\"  \n  },  \n  \"speed\": {  \n    \"type\": \"Number\",  \n    \"value\": 28  \n  },  \n  \"route_id\": {  \n    \"type\": \"Text\",  \n    \"value\": \"17AD\"  \n  },  \n  \"seating_capacity\": {  \n    \"type\": \"Number\",  \n    \"value\": 70  \n  },  \n  \"vehicle_label\": {  \n    \"type\": \"Text\",  \n    \"value\": \"A03\"  \n  },  \n  \"timestamp\": {  \n    \"format\": \"Date-Time\",  \n    \"value\": \"2021-10-28T08:13:22+05:30\"  \n  },  \n  \"arrival_time\": {  \n    \"type\": \"Time\",  \n    \"value\": \"22:00:28\"  \n  },  \n  \"route_long_name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Baiyappanahalli to Mysuru Road\"  \n  },  \n  \"agency_timezone\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Asia/Kolkata\"  \n  },  \n  \"stop_code\": {  \n    \"type\": \"Text\",  \n    \"value\": \"F12\"  \n  },  \n  \"agency_name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Chartered Bike Surat\"  \n  },  \n  \"route_desc\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Phase1-Phase2\"  \n  },  \n  \"license_plate\": {  \n    \"type\": \"Text\",  \n    \"value\": \"GJ05BX1583\"  \n  },  \n  \"stop_id\": {  \n    \"type\": \"Text\",  \n    \"value\": \"1016\"  \n  },  \n  \"uncertainity\": {  \n    \"type\": \"Boolean\",  \n    \"value\": \"false\"  \n  },  \n  \"route_color\": {  \n    \"type\": \"Text\",  \n    \"value\": \"00FFFF\"  \n  },  \n  \"travelDistance\": {  \n    \"type\": \"Number\",  \n    \"value\": 9.00174  \n  },  \n  \"actual_trip_start_time\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2021-10-28T07:46:51+05:30\"  \n  },  \n  \"bearing\": {  \n    \"type\": \"Number\",  \n    \"value\": 90  \n  },  \n  \"stop_sequence\": {  \n    \"type\": \"Number\",  \n    \"value\": 24  \n  },  \n  \"start_date\": {  \n    \"type\": \"Date\",  \n    \"value\": \"2022-03-01\"  \n  },  \n  \"current_stop_sequence\": {  \n    \"type\": \"Number\",  \n    \"value\": 1001  \n  },  \n  \"start_time\": {  \n    \"type\": \"Time\",  \n    \"value\": \"11:15:35\"  \n  },  \n  \"trip_id\": {  \n    \"type\": \"Text\",  \n    \"value\": \"23952340\"  \n  },  \n  \"route_text_color\": {  \n    \"type\": \"Text\",  \n    \"value\": \"FFD700\"  \n  },  \n  \"ac_available\": {  \n    \"type\": \"Text\",  \n    \"value\": \"yes\"  \n  },  \n  \"tripDirection\": {  \n    \"type\": \"Text\",  \n    \"value\": \"DN\"  \n  },  \n  \"agency_url\": {  \n    \"type\": \"URL\",  \n    \"value\": \"http://charteredbike.in/surat/\"  \n  },  \n  \"routeStopSequence\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"10\",  \n      \"1001\",  \n      \"1002\",  \n      \"1003\",  \n      \"1004\",  \n      \"1005\"  \n    ]  \n  },  \n  \"trip_direction\": {  \n    \"type\": \"Text\",  \n    \"value\": \"DN\"  \n  },  \n  \"departure_time\": {  \n    \"type\": \"Time\",  \n    \"value\": \"22:00:33\"  \n  },  \n  \"last_stop_id\": {  \n    \"type\": \"Text\",  \n    \"value\": \"4032\"  \n  },  \n  \"route_short_name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Purple Line\"  \n  },  \n  \"stop_name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"DEVASHISH NAGAR MORA BHAGAL\"  \n  },  \n  \"depot_id\": {  \n    \"type\": \"Text\",  \n    \"value\": \"1\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2021-10-28T08:13:22+05:30\"  \n  }  \n}  \n```  \n\r#### TransitManagement NGSI-LD key-values Example    \n\rHere is an example of a TransitManagement in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n\t\"id\": \"https://smart-data-models.github.io/IUDX/TransitManagement/schema.json\",  \n\t\"@context\": \"iudx:TransitManagement\",  \n\t\"type\": \"TransitManagement\",  \n\t\"vehicleType\":\"hopper\",  \n\t\"trip_delay\":11968,  \n\t\"agency_lang\":\"en\",  \n\t\"depot_name\":\"BHESTAN DEPOT\",  \n\t\"travelTime\":\"22:11:14\",  \n\t\"direction_id\":0,  \n\t\"schedule_relationship\":\"SCHEDULED\",  \n\t\"vehicle_id\":\"52TC12\",  \n\t\"agency_fare_url\":\"http://charteredbike.in/surat/?page_id=1021\",  \n\t\"actual_trip_end_time\":\"2021-10-28T08:24:22+05:30\",  \n\t\"last_tracked_time\":\"08:13:22\",  \n\t\"standing_capacity\":20,  \n\t\"last_stop_arrival_time\":\"13:30:12\",  \n\t\"agency_id\":\"agency001\",  \n\t\"current_status\":\"INCOMING_AT\",  \n\t\"route_type\":\"1\",  \n\t\"speed\":28,  \n\t\"route_id\":\"17AD\",  \n\t\"seating_capacity\":70,  \n\t\"vehicle_label\":\"A03\",  \n\t\"timestamp\":\"2021-10-28T08:13:22+05:30\",  \n\t\"arrival_time\":\"22:00:28\",  \n\t\"route_long_name\":\"Baiyappanahalli to Mysuru Road\",  \n\t\"agency_timezone\":\"Asia/Kolkata\",  \n\t\"stop_code\":\"F12\",  \n\t\"agency_name\":\"Chartered Bike Surat\",  \n\t\"route_desc\":\"Phase1-Phase2\",  \n\t\"license_plate\":\"GJ05BX1583\",  \n\t\"stop_id\":\"1016\",  \n\t\"uncertainity\":0,  \n\t\"route_color\":\"00FFFF\",  \n\t\"travelDistance\":9.00174,  \n\t\"actual_trip_start_time\":\"2021-10-28T07:46:51+05:30\",  \n\t\"bearing\":90,  \n\t\"stop_sequence\":24,  \n\t\"start_date\":\"2022-03-01\",  \n\t\"current_stop_sequence\":1001,  \n\t\"start_time\":\"11:15:35\",  \n\t\"trip_id\":\"23952340\",  \n\t\"route_text_color\":\"FFD700\",  \n\t\"ac_available\":\"yes\",  \n\t\"tripDirection\":\"DN\",  \n\t\"agency_url\": \"http://charteredbike.in/surat/\",  \n\t\"routeStopSequence\":[\"10\",\"1001\",\"1002\",\"1003\",\"1004\",\"1005\"],  \n\t\"trip_direction\":\"DN\",  \n\t\"departure_time\":\"22:00:33\",  \n\t\"last_stop_id\":\"4032\",  \n\t\"route_short_name\":\"Purple Line\",  \n\t\"stop_name\":\"DEVASHISH NAGAR MORA BHAGAL\",  \n\t\"depot_id\":\"1\",  \n\t\"observationDateTime\":\"2021-10-28T08:13:22+05:30\"  \n}  \n```  \n\r#### TransitManagement NGSI-LD normalized Example    \n\rHere is an example of a TransitManagement in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://smart-data-models.github.io/IUDX/TransitManagement/schema.json\",  \n  \"type\": \"TransitManagement\",  \n  \"vehicleType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"hopper\"  \n  },  \n  \"trip_delay\": {  \n    \"type\": \"Property\",  \n    \"value\": 11968  \n  },  \n  \"agency_lang\": {  \n    \"type\": \"Property\",  \n    \"value\": \"en\"  \n  },  \n  \"depot_name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"BHESTAN DEPOT\"  \n  },  \n  \"travelTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"22:11:14\"  \n    }  \n  },  \n  \"direction_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"false\"  \n  },  \n  \"schedule_relationship\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SCHEDULED\"  \n  },  \n  \"vehicle_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"52TC12\"  \n  },  \n  \"agency_fare_url\": {  \n    \"type\": \"Property\",  \n    \"value\": \"http://charteredbike.in/surat/?page_id=1021\"  \n  },  \n  \"actual_trip_end_time\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"2021-10-28T08:24:22+05:30\"  \n    }  \n  },  \n  \"last_tracked_time\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"time\",  \n      \"@value\": \"08:13:22\"  \n    }  \n  },  \n  \"standing_capacity\": {  \n    \"type\": \"Property\",  \n    \"value\": 20  \n  },  \n  \"last_stop_arrival_time\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"time\",  \n      \"@value\": \"13:30:12\"  \n    }  \n  },  \n  \"agency_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"agency001\"  \n  },  \n  \"current_status\": {  \n    \"type\": \"Property\",  \n    \"value\": \"INCOMING_AT\"  \n  },  \n  \"route_type\": {  \n    \"type\": \"Property\",  \n    \"value\": \"1\"  \n  },  \n  \"speed\": {  \n    \"type\": \"Property\",  \n    \"value\": 28  \n  },  \n  \"route_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"17AD\"  \n  },  \n  \"seating_capacity\": {  \n    \"type\": \"Property\",  \n    \"value\": 70  \n  },  \n  \"vehicle_label\": {  \n    \"type\": \"Property\",  \n    \"value\": \"A03\"  \n  },  \n  \"timestamp\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"2021-10-28T08:13:22+05:30\"  \n    }  \n  },  \n  \"arrival_time\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"time\",  \n      \"@value\": \"22:00:28\"  \n    }  \n  },  \n  \"route_long_name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Baiyappanahalli to Mysuru Road\"  \n  },  \n  \"agency_timezone\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Asia/Kolkata\"  \n  },  \n  \"stop_code\": {  \n    \"type\": \"Property\",  \n    \"value\": \"F12\"  \n  },  \n  \"agency_name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Chartered Bike Surat\"  \n  },  \n  \"route_desc\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Phase1-Phase2\"  \n  },  \n  \"license_plate\": {  \n    \"type\": \"Property\",  \n    \"value\": \"GJ05BX1583\"  \n  },  \n  \"stop_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"1016\"  \n  },  \n  \"uncertainity\": {  \n    \"type\": \"Property\",  \n    \"value\": \"false\"  \n  },  \n  \"route_color\": {  \n    \"type\": \"Property\",  \n    \"value\": \"00FFFF\"  \n  },  \n  \"travelDistance\": {  \n    \"type\": \"Property\",  \n    \"value\": 9.00174  \n  },  \n  \"actual_trip_start_time\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"2021-10-28T07:46:51+05:30\"  \n    }  \n  },  \n  \"bearing\": {  \n    \"type\": \"Property\",  \n    \"value\": 90  \n  },  \n  \"stop_sequence\": {  \n    \"type\": \"Property\",  \n    \"value\": 24  \n  },  \n  \"start_date\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date\",  \n      \"@value\": \"2022-03-01\"  \n    }  \n  },  \n  \"current_stop_sequence\": {  \n    \"type\": \"Property\",  \n    \"value\": 1001  \n  },  \n  \"start_time\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"11:15:35\"  \n    }  \n  },  \n  \"trip_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"23952340\"  \n  },  \n  \"route_text_color\": {  \n    \"type\": \"Property\",  \n    \"value\": \"FFD700\"  \n  },  \n  \"ac_available\": {  \n    \"type\": \"Property\",  \n    \"value\": \"yes\"  \n  },  \n  \"tripDirection\": {  \n    \"type\": \"Property\",  \n    \"value\": \"DN\"  \n  },  \n  \"agency_url\": {  \n    \"type\": \"Property\",  \n    \"value\": \"http://charteredbike.in/surat/\"  \n  },  \n  \"routeStopSequence\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"10\",  \n      \"1001\",  \n      \"1002\",  \n      \"1003\",  \n      \"1004\",  \n      \"1005\"  \n    ]  \n  },  \n  \"trip_direction\": {  \n    \"type\": \"Property\",  \n    \"value\": \"DN\"  \n  },  \n  \"departure_time\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"time\",  \n      \"@value\": \"22:00:33\"  \n    }  \n  },  \n  \"last_stop_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"4032\"  \n  },  \n  \"route_short_name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Purple Line\"  \n  },  \n  \"stop_name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"DEVASHISH NAGAR MORA BHAGAL\"  \n  },  \n  \"depot_id\": {  \n    \"type\": \"Property\",  \n    \"value\": \"1\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"date-time\",  \n      \"@value\": \"2021-10-28T08:13:22+05:30\"  \n    }  \n  }  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: WasteManagement
      MODELS:
        - MODEL_NAME: WasteContainer
        - MODEL_DESCRIPTION: A waste container
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: Data model for solid waste management
                bins., mail: null, organization: null, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              WasteManagementContainer of the Subject dataModel.WasteManagement. All fields are
              non mandatory. More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: WasteContainer  \n======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WasteManagement/blob/master/WasteContainer/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A waste container**  \n\rversion: 0.3.0  \n\n\r## List of properties  \n\n\r- `RFID`: Gives the ID of the RFID reader.  \r- `actuationHours`: Hours suitable for performing actuations over the container.  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `annotations`: Annotations about the item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `binCapacity`: Total capacity in terms of the volume of waste the bin can hold.  \r- `binColor`: Color of the bin. Could be used for indicating the type of waste. The color coding should follow the conventions applicable to the geographical area the bins are located.  \r- `binFullnessThreshold`: The fullness threshold level of the bin defined as the level (in terms of percentage) when the bin full alert or notification will be generated.  \r- `binId`: Id of the waste carrying bin  \r- `binLoggedTime`: Time when the bin's level was last logged.  \r- `binMaxLoad`: Maximum load (weight) that the waste bin can hold.  \r- `binRecommendedLoad`: Recommended load (weight) that the waste bin corresponding to this observation can hold.  \r- `cargoWeight`: Weight of the container load.  \r- `category`: Enum:' fixed, ground, other, portable, underground'  \r- `color`: The color of the product  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastCleaning`: When the container was cleaned last time.   \r- `dateLastEmptying`: Timestamp which represents when the container was emptied last time.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateServiceStarted`: Date at which the container started giving service.  \r- `description`: A description of this item  \r- `fillingLevel`: Filling level of the container  \r- `id`: Unique identifier of the entity  \r- `image`: An image of the item  \r- `isleId`: Identifier (or name) of the isle where the container is placed. This attribute should be used when entities of type `WasteContainerIsle` are not being modelled specifically. Otherwise, `refWasteContainerIsle` should be used.  \r- `license_plate`: Gives the License Plate number of the vehicle. SameAs: 'license_plate' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `methaneConcentration`: Methane (CH4) concentration inside the container.  \r- `name`: The name of this item.  \r- `nextActuationDeadline`: Deadline for next actuation to be performed (emptying, picking up, etc.).  \r- `nextCleaningDeadline`: Deadline for next cleaning.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `refDevice`: Reference to the device(s) used to monitor this container  \r- `refWasteContainerIsle`: Isle where the container is placed  \r- `refWasteContainerModel`: Container's model  \r- `regulation`: Regulation under which the container is operating  \r- `responsible`: Responsible for the container, i.e. entity in charge of  actuating (emptying, collecting, etc)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `serialNumber`: Serial number of the container.  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `status`: Container's status from the point of view of safety. Enum:'ok , lidOpen , dropped , moved , vandalized , burning , unknown'.  -   `ok`. Container is where it must be and stands properly. `lidOpen`. Container's lid has been opened and not closed after a certain amount of time. `dropped`. Container has been dropped for some reason. `moved`. Container has been moved from its regular position and has not come back. `vandalized`. Container has been damaged or destroyed due to vandalism. `burning`. Container is burning and an immediate action has to be taken. `unknown`. The status of the container is not known to the system.  \r- `storedWasteCode`: Depend on the target regulation. For Europe, check [Europe's List of Waste](http://ec.europa.eu/environment/waste/framework/list.htm).  \r- `storedWasteKind`: Kind/s of waste stored by the container. Enum:'organic, inorganic, glass, oil, plastic, metal, paper, batteries, electronics, hazardous, other'. Or any other value which does not fit within the former.   \r- `storedWasteOrigin`: Origin of the waste stored. Enum:'household, municipal, industrial, construction, hostelry, agriculture, other'   \r- `temperature`: Temperature inside the container  \r- `timeInstant`: Timestamp of the payload . There can be production environments where the attribute type is equal to the `ISO8601` string. If so, it must be considered as a synonym of `DateTime`. This attribute is kept for backwards compatibility with old FIWARE reference implementations.  \r- `type`: NGSI Entity Type: It has to be WasteContainer  \r- `wardId`: Ward Id of the entity corresponding to this observation.  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWasteContainer:    \n  description: 'A waste container'    \n  properties:    \n    RFID:    \n      description: 'Gives the ID of the RFID reader.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    actuationHours:    \n      description: 'Hours suitable for performing actuations over the container.'    \n      type: string    \n      x-ngsi:    \n        model: openingHours    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    annotations:    \n      description: 'Annotations about the item'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    binCapacity:    \n      description: 'Total capacity in terms of the volume of waste the bin can hold.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    binColor:    \n      description: 'Color of the bin. Could be used for indicating the type of waste. The color coding should follow the conventions applicable to the geographical area the bins are located.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    binFullnessThreshold:    \n      description: 'The fullness threshold level of the bin defined as the level (in terms of percentage) when the bin full alert or notification will be generated.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    binId:    \n      description: 'Id of the waste carrying bin'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    binLoggedTime:    \n      description: 'Time when the bin''s level was last logged.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    binMaxLoad:    \n      description: 'Maximum load (weight) that the waste bin can hold.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    binRecommendedLoad:    \n      description: 'Recommended load (weight) that the waste bin corresponding to this observation can hold.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    cargoWeight:    \n      description: 'Weight of the container load.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    category:    \n      description: 'Enum:'' fixed, ground, other, portable, underground'''    \n      items:    \n        enum:    \n          - fixed    \n          - ground    \n          - other    \n          - portable    \n          - underground    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: 'https://schema.org/Text Containers category'    \n        type: Property    \n    color:    \n      description: 'The color of the product'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/color    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastCleaning:    \n      description: 'When the container was cleaned last time. '    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateLastEmptying:    \n      description: 'Timestamp which represents when the container was emptied last time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateServiceStarted:    \n      description: 'Date at which the container started giving service.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Date    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    fillingLevel:    \n      description: 'Filling level of the container'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    id:    \n      anyOf: &wastecontainer_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    image:    \n      description: 'An image of the item'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    isleId:    \n      description: 'Identifier (or name) of the isle where the container is placed. This attribute should be used when entities of type `WasteContainerIsle` are not being modelled specifically. Otherwise, `refWasteContainerIsle` should be used.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    license_plate:    \n      description: \"Gives the License Plate number of the vehicle. SameAs: 'license_plate' field from GTFS Realtime message-VehicleDescriptor (https://developers.google.com/transit/gtfs-realtime/reference#message-vehicledescriptor)\"    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    methaneConcentration:    \n      description: 'Methane (CH4) concentration inside the container.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    nextActuationDeadline:    \n      description: 'Deadline for next actuation to be performed (emptying, picking up, etc.).'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    nextCleaningDeadline:    \n      description: 'Deadline for next cleaning.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *wastecontainer_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refDevice:    \n      description: 'Reference to the device(s) used to monitor this container'    \n      items:    \n        anyOf: *wastecontainer_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    refWasteContainerIsle:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Isle where the container is placed'    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    refWasteContainerModel:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Container''s model'    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    regulation:    \n      description: 'Regulation under which the container is operating'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    responsible:    \n      description: 'Responsible for the container, i.e. entity in charge of  actuating (emptying, collecting, etc)'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    serialNumber:    \n      description: 'Serial number of the container.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/serialNumber    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    status:    \n      description: 'Container''s status from the point of view of safety. Enum:''ok , lidOpen , dropped , moved , vandalized , burning , unknown''.  -   `ok`. Container is where it must be and stands properly. `lidOpen`. Container''s lid has been opened and not closed after a certain amount of time. `dropped`. Container has been dropped for some reason. `moved`. Container has been moved from its regular position and has not come back. `vandalized`. Container has been damaged or destroyed due to vandalism. `burning`. Container is burning and an immediate action has to be taken. `unknown`. The status of the container is not known to the system.'    \n      enum:    \n        - ok    \n        - lidOpen    \n        - dropped    \n        - moved    \n        - vandalized    \n        - burning    \n        - unknown    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    storedWasteCode:    \n      description: 'Depend on the target regulation. For Europe, check [Europe''s List of Waste](http://ec.europa.eu/environment/waste/framework/list.htm).'    \n      type: string    \n      x-ngsi:    \n        model: 'https://schema.org/Text As per the regulation, waste codes which precisely identifies waste origin and kind'    \n        type: Property    \n    storedWasteKind:    \n      description: 'Kind/s of waste stored by the container. Enum:''organic, inorganic, glass, oil, plastic, metal, paper, batteries, electronics, hazardous, other''. Or any other value which does not fit within the former. '    \n      enum:    \n        - organic    \n        - inorganic    \n        - glass    \n        - oil    \n        - plastic    \n        - metal    \n        - paper    \n        - batteries    \n        - electronics    \n        - hazardous    \n        - other    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    storedWasteOrigin:    \n      description: 'Origin of the waste stored. Enum:''household, municipal, industrial, construction, hostelry, agriculture, other'' '    \n      enum:    \n        - household    \n        - municipal    \n        - industrial    \n        - construction    \n        - hostelry    \n        - agriculture    \n        - other    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    temperature:    \n      description: 'Temperature inside the container'    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    timeInstant:    \n      description: 'Timestamp of the payload . There can be production environments where the attribute type is equal to the `ISO8601` string. If so, it must be considered as a synonym of `DateTime`. This attribute is kept for backwards compatibility with old FIWARE reference implementations.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Datetime    \n        type: Property    \n    type:    \n      description: 'NGSI Entity Type: It has to be WasteContainer'    \n      enum:    \n        - WasteContainer    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    wardId:    \n      description: 'Ward Id of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n  type: object    \n  version: 0.3.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### WasteContainer NGSI-v2 key-values Example    \n\rHere is an example of a WasteContainer in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:wastecontainer:1021:AAWD\",  \n  \"type\": \"WasteContainer\",  \n  \"location\": {  \n    \"coordinates\": [  \n      -8.768460000000001,  \n      42.60214472222222  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"binCapacity\": 43,  \n  \"binColor\": \"Green\",  \n  \"binClearedTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"wardId\": \"21\",  \n  \"binCategory\": \"Household Bin\",  \n  \"license_plate\": \"KA23F2345\",  \n  \"RFID\": \"67855734\",  \n  \"binFillingLevel\": 0.65,  \n  \"binFullnessThreshold\": 80,  \n  \"binRecommendedLoad\": 30,  \n  \"binId\": \"12\",  \n  \"binMaxLoad\": 75,  \n  \"binLoggedTime\": \"2021-03-01T15:51:02+05:30\"  \n}  \n```  \n\r#### WasteContainer NGSI-v2 normalized Example    \n\rHere is an example of a WasteContainer in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:wastecontainer:1021:AAWD\",  \n  \"type\": \"WasteContainer\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"coordinates\": [  \n        -8.768460000000001,  \n        42.60214472222222  \n      ],  \n      \"type\": \"Point\"  \n    }  \n  },  \n  \"binCapacity\": {  \n    \"type\": \"number\",  \n    \"value\": 43  \n  },  \n  \"binColor\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Green\"  \n  },  \n  \"binClearedTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"wardId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"21\"  \n  },  \n  \"binCategory\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Household Bin\"  \n  },  \n  \"license_plate\": {  \n    \"type\": \"Text\",  \n    \"value\": \"KA23F2345\"  \n  },  \n  \"RFID\": {  \n    \"type\": \"Text\",  \n    \"value\": \"67855734\"  \n  },  \n  \"binFillingLevel\": {  \n    \"type\": \"number\",  \n    \"value\": 0.65  \n  },  \n  \"binFullnessThreshold\": {  \n    \"type\": \"number\",  \n    \"value\": 80  \n  },  \n  \"binRecommendedLoad\": {  \n    \"type\": \"number\",  \n    \"value\": 30  \n  },  \n  \"binId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"12\"  \n  },  \n  \"binMaxLoad\": {  \n    \"type\": \"number\",  \n    \"value\": 75  \n  },  \n  \"binLoggedTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-01T15:51:02+05:30\"  \n  }  \n}  \n```  \n\r#### WasteContainer NGSI-LD key-values Example    \n\rHere is an example of a WasteContainer in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:wastecontainer:1021:AAWD\",  \n  \"@context\": [  \n    \"iudx:WmgmtBin\",  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ],  \n  \"type\": \"WasteContainer\",  \n  \"location\": {  \n    \"coordinates\": [  \n      -8.768460000000001,  \n      42.60214472222222  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"binCapacity\": 43,  \n  \"binColor\": \"Green\",  \n  \"binClearedTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"wardId\": \"21\",  \n  \"binCategory\": \"Household Bin\",  \n  \"license_plate\": \"KA23F2345\",  \n  \"RFID\": \"67855734\",  \n  \"binFillingLevel\": 0.65,  \n  \"binFullnessThreshold\": 80,  \n  \"binRecommendedLoad\": 30,  \n  \"binId\": \"12\",  \n  \"binMaxLoad\": 75,  \n  \"binLoggedTime\": \"2021-03-01T15:51:02+05:30\"  \n}  \n```  \n\r#### WasteContainer NGSI-LD normalized Example    \n\rHere is an example of a WasteContainer in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:wastecontainer:1021:AAWD\",  \n  \"type\": \"WasteContainer\",  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"coordinates\": [  \n        -8.768460000000001,  \n        42.60214472222222  \n      ],  \n      \"type\": \"Point\"  \n    }  \n  },  \n  \"binCapacity\": {  \n    \"type\": \"Property\",  \n    \"value\": 43  \n  },  \n  \"binColor\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Green\"  \n  },  \n  \"binClearedTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-03-11T15:51:02+05:30\"  \n    }  \n  },  \n  \"wardId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"21\"  \n  },  \n  \"binCategory\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Household Bin\"  \n  },  \n  \"license_plate\": {  \n    \"type\": \"Property\",  \n    \"value\": \"KA23F2345\"  \n  },  \n  \"RFID\": {  \n    \"type\": \"Property\",  \n    \"value\": \"67855734\"  \n  },  \n  \"binFillingLevel\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.65  \n  },  \n  \"binFullnessThreshold\": {  \n    \"type\": \"Property\",  \n    \"value\": 80  \n  },  \n  \"binRecommendedLoad\": {  \n    \"type\": \"Property\",  \n    \"value\": 30  \n  },  \n  \"binId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"12\"  \n  },  \n  \"binMaxLoad\": {  \n    \"type\": \"Property\",  \n    \"value\": 75  \n  },  \n  \"binLoggedTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-03-11T15:51:02+05:30\"  \n    }  \n  },  \n  \"@context\": [  \n    \"iudx:WmgmtBin\",  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: Weather
      MODELS:
        - MODEL_NAME: WeatherObserved
        - MODEL_DESCRIPTION: An observation of weather conditions at a certain place and time. This data model has been developed in cooperation with mobile operators and the GSMA.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: Data Model for weather conditions observed
                at a certain place and time., mail: null, organization: null, project: null, startDate: null}
            - {adopter: Las Rozas Innova, comments: null, description: null, mail: jpena@lasrozasinnova.es,
              organization: Municipality of Las Rozas (Spain), project: 'https://lasrozasinnova.es/cosmos-plataforma-de-ciudad-inteligente-de-las-rozas/',
              startDate: 1-1-2022}
            description: This is a compilation list of the current adopters of the data model
              WeatherObserved of the Subject dataModel.Weather.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: WeatherObserved  \n=======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Weather/blob/master/WeatherObserved/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **An observation of weather conditions at a certain place and time. This data model has been developed in cooperation with mobile operators and the GSMA.**  \n\rversion: 0.3.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `airQualityIndex`: Air quality index is a number used to report the quality of the air on any given day.  \r- `airQualityIndexForecast`: Forecasted overall Air Quality Index (AQI) over a certain duration in future.  \r- `airTemperatureForecast`: Forecasted value of air temperature over a certain duration in future.  \r- `airTemperatureTSA`: Object defining the temporal processing of a basic property during a period. It provides Maximum, minimum, instant value and average  \r- `alternateName`: An alternative name for this item  \r- `aqiMajorPollutant`: Major pollutant in the Air Quality Index (AQI).  \r- `aqiMajorPollutantForecast`: Forecasted major air pollutant in the Air Quality Index (AQI) over a certain duration in future.  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `atmosphericPressure`: The atmospheric pressure observed measured in Hecto Pascals  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObserved`: Date of the observed entity defined by the user.  \r- `description`: A description of this item  \r- `dewPoint`: The dew point encoded as a number. Observed temperature to which air must be cooled to become saturated with water vapor  \r- `feelLikesTemperature`: Temperature appreciation of the item  \r- `gustSpeed`: A sudden burst of high-speed wind over the observed average wind speed lasting only for a few seconds.  \r- `id`: Unique identifier of the entity  \r- `illuminance`: Observed instantaneous ambient light intensity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `precipitation`: Amount of water rain registered.   \r- `precipitationForecast`: Forecasted rainfall over a certain duration in future.  \r- `pressureTendency`: Enum:'falling, raising, steady'. Is the pressure rising or falling? It can be expressed in quantitative terms or qualitative terms.  \r- `refDevice`: A reference to the device(s) which captured this observation.  \r- `refPointOfInterest`: Point of interest related to the item  \r- `relativeHumidity`: Humidity in the Air. Observed instantaneous relative humidity (water vapour in air)  \r- `relativeHumidityForecast`: Forecasted relative humidity (water vapour in air) over a certain duration in future  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `snowHeight`: The snow height observed by generic snow depth measurement sensors, expressed in centimeters  \r- `solarRadiation`: The solar radiation observed measured in Watts per square  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `streamGauge`: The water level surface elevation observed by Hydrometric measurement sensors, namely a [Stream Gauge](https://en.wikipedia.org/wiki/Stream_gauge) expressed in centimeters  \r- `temperature`: Temperature of the item  \r- `type`: NGSI Entity type. It has to be WeatherObserved  \r- `uVIndexMax`: The maximum UV index for the period, based on the World Health Organization's UV Index measure. [http://www.who.int/uv/intersunprogramme/activities/uv_index/en/](http://www.who.int/uv/intersunprogramme/activities/uv_index/en/) the values between 1 and 11 are the valid range for the index. The value 0 is for describing that no signal is detected so no value is stored.  \r- `visibility`: Categories of visibility  \r- `weatherType`: Text description of the weather  \r- `windDirection`: Direction of the wind bet  \r- `windSpeed`: Intensity of the wind  \r  \n\rRequired properties  \n- `dateObserved`  \r- `id`  \r- `location`  \r- `type`  \r  \n\rWind direction range defined according to the [World Meteorological organization](https://library.wmo.int/doc_num.php?explnum_id=3177)  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWeatherObserved:    \n  description: 'An observation of weather conditions at a certain place and time. This data model has been developed in cooperation with mobile operators and the GSMA.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    airQualityIndex:    \n      description: 'Air quality index is a number used to report the quality of the air on any given day.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    airQualityIndexForecast:    \n      description: 'Forecasted overall Air Quality Index (AQI) over a certain duration in future.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    airTemperatureForecast:    \n      description: 'Forecasted value of air temperature over a certain duration in future.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    airTemperatureTSA:    \n      description: 'Object defining the temporal processing of a basic property during a period. It provides Maximum, minimum, instant value and average'    \n      properties:    \n        averageValue:    \n          type: number    \n        instValue:    \n          type: number    \n        maxOverTime:    \n          type: number    \n        minOverTime:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    aqiMajorPollutant:    \n      description: 'Major pollutant in the Air Quality Index (AQI).'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    aqiMajorPollutantForecast:    \n      description: 'Forecasted major air pollutant in the Air Quality Index (AQI) over a certain duration in future.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    atmosphericPressure:    \n      description: 'The atmospheric pressure observed measured in Hecto Pascals'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Hecto pascals'    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObserved:    \n      description: 'Date of the observed entity defined by the user.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dewPoint:    \n      description: 'The dew point encoded as a number. Observed temperature to which air must be cooled to become saturated with water vapor'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Celsius degrees'    \n    feelLikesTemperature:    \n      description: 'Temperature appreciation of the item'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    gustSpeed:    \n      description: 'A sudden burst of high-speed wind over the observed average wind speed lasting only for a few seconds.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &weatherobserved_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    illuminance:    \n      description: 'Observed instantaneous ambient light intensity'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: Lux    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *weatherobserved_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    precipitation:    \n      description: 'Amount of water rain registered. '    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Liters per square meter'    \n    precipitationForecast:    \n      description: 'Forecasted rainfall over a certain duration in future.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    pressureTendency:    \n      description: 'Enum:''falling, raising, steady''. Is the pressure rising or falling? It can be expressed in quantitative terms or qualitative terms.'    \n      oneOf:    \n        - enum:    \n            - falling    \n            - raising    \n            - steady    \n          type: string    \n        - type: number    \n      x-ngsi:    \n        type: Property    \n    refDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A reference to the device(s) which captured this observation.'    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    refPointOfInterest:    \n      description: 'Point of interest related to the item'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    relativeHumidity:    \n      description: 'Humidity in the Air. Observed instantaneous relative humidity (water vapour in air)'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    relativeHumidityForecast:    \n      description: 'Forecasted relative humidity (water vapour in air) over a certain duration in future'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    snowHeight:    \n      description: 'The snow height observed by generic snow depth measurement sensors, expressed in centimeters'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: centimeters    \n    solarRadiation:    \n      description: 'The solar radiation observed measured in Watts per square'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: w/m2    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    streamGauge:    \n      description: 'The water level surface elevation observed by Hydrometric measurement sensors, namely a [Stream Gauge](https://en.wikipedia.org/wiki/Stream_gauge) expressed in centimeters'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: centimeters    \n    temperature:    \n      description: 'Temperature of the item'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be WeatherObserved'    \n      enum:    \n        - WeatherObserved    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    uVIndexMax:    \n      description: 'The maximum UV index for the period, based on the World Health Organization''s UV Index measure. [http://www.who.int/uv/intersunprogramme/activities/uv_index/en/](http://www.who.int/uv/intersunprogramme/activities/uv_index/en/) the values between 1 and 11 are the valid range for the index. The value 0 is for describing that no signal is detected so no value is stored.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    visibility:    \n      anyOf:    \n        - enum:    \n            - veryPoor    \n            - poor    \n            - moderate    \n            - good    \n            - veryGood    \n            - excellent    \n          type: string    \n        - minimum: 0    \n          type: number    \n      description: 'Categories of visibility'    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    weatherType:    \n      description: 'Text description of the weather'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Text.    \n        type: Property    \n    windDirection:    \n      description: 'Direction of the wind bet'    \n      maximum: 360    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    windSpeed:    \n      description: 'Intensity of the wind'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http//schema.org/Number    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - dateObserved    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Weather/blob/master/WeatherObserved/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Weather/WeatherObserved/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.3.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### WeatherObserved NGSI-v2 key-values Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"Spain-WeatherObserved-Valladolid-2016-11-30T07:00:00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"address\": {  \n    \"addressLocality\": \"Valladolid\",  \n    \"addressCountry\": \"ES\"  \n  },  \n  \"atmosphericPressure\": 938.9,  \n  \"dataProvider\": \"TEF\",  \n  \"dateObserved\": \"2016-11-30T07:00:00.00Z\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.754444444,  \n      41.640833333  \n    ]  \n  },  \n  \"precipitation\": 0,  \n  \"pressureTendency\": 0.5,  \n  \"relativeHumidity\": 1,  \n  \"source\": \"http://www.aemet.es\",  \n  \"stationCode\": \"2422\",  \n  \"stationName\": \"Valladolid\",  \n  \"temperature\": 3.3,  \n  \"windDirection\": 135,  \n  \"windSpeed\": 2,  \n  \"illuminance\": 1000,  \n  \"refDevice\": \"device-0A3478\",  \n  \"streamGauge\": 50,  \n  \"snowHeight\": 20,  \n  \"uvIndexMax\": 1.0  \n}  \n```  \n\r#### WeatherObserved NGSI-v2 normalized Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"Valladolid.2016-11-30T07-00-00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"dateObserved\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2016-11-30T07:00:00.00Z\"  \n  },  \n  \"illuminance\": {  \n    \"type\": \"Number\",  \n    \"value\": 1000  \n  },  \n  \"temperature\": {  \n    \"type\": \"Number\",  \n    \"value\": 3.3  \n  },  \n  \"precipitation\": {  \n    \"type\": \"Number\",  \n    \"value\": 0  \n  },  \n  \"atmosphericPressure\": {  \n    \"type\": \"Number\",  \n    \"value\": 938.9  \n  },  \n  \"pressureTendency\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.5  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"device-0A3478\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"http://www.aemet.es\"  \n  },  \n  \"windSpeed\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.754444444,  \n        41.640833333  \n      ]  \n    }  \n  },  \n  \"stationName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Valladolid\"  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressLocality\": \"Valladolid\",  \n      \"addressCountry\": \"ES\"  \n    }  \n  },  \n  \"stationCode\": {  \n    \"type\": \"Text\",  \n    \"value\": \"2422\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"TEF\"  \n  },  \n  \"windDirection\": {  \n    \"type\": \"Number\",  \n    \"value\": 135  \n  },  \n  \"relativeHumidity\": {  \n    \"type\": \"Number\",  \n    \"value\": 1  \n  },  \n  \"streamGauge\": {  \n    \"type\": \"Number\",  \n    \"value\": 50  \n  },  \n  \"snowHeight\": {  \n    \"type\": \"Number\",  \n    \"value\": 20  \n  },  \n  \"uvIndexMax\": {  \n    \"type\": \"Number\",  \n    \"value\": 1.0  \n  }  \n}  \n```  \n\r#### WeatherObserved NGSI-LD key-values Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WeatherObserved:Spain-WeatherObserved-Valladolid-2016-11-30T07:00:00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"address\": {  \n    \"addressLocality\": \"Valladolid\",  \n    \"addressCountry\": \"ES\"  \n  },  \n  \"atmosphericPressure\": 938.9,  \n  \"dataProvider\": \"TEF\",  \n  \"dateObserved\": \"2016-11-30T07:00:00.00Z\",  \n  \"illuminance\": 1000,  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.754444444,  \n      41.640833333  \n    ]  \n  },  \n  \"precipitation\": 0,  \n  \"pressureTendency\": 0.5,  \n  \"refDevice\": \"urn:ngsi-ld:Device:device-0A3478\",  \n  \"relativeHumidity\": 1,  \n  \"snowHeight\": 20,  \n  \"source\": \"http://www.aemet.es\",  \n  \"stationCode\": \"2422\",  \n  \"stationName\": \"Valladolid\",  \n  \"streamGauge\": 50,  \n  \"temperature\": 3.3,  \n  \"uvIndexMax\": 1.0,  \n  \"windDirection\": 135,  \n  \"windSpeed\": 2,  \n  \"@context\": [  \n    \"iudx:EnvWeather\",  \n    \"https://smart-data-models.github.io/dataModel.Weather/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### WeatherObserved NGSI-LD normalized Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WeatherObserved:Spain-WeatherObserved-Valladolid-2016-11-30T07:00:00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressLocality\": \"Valladolid\",  \n      \"addressCountry\": \"ES\",  \n      \"type\": \"PostalAddress\"  \n    }  \n  },  \n  \"atmosphericPressure\": {  \n    \"type\": \"Property\",  \n    \"value\": 938.9  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"TEF\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2016-11-30T07:00:00.00Z\"  \n    }  \n  },  \n  \"illuminance\": {  \n    \"type\": \"Property\",  \n    \"value\": 1000  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.754444444,  \n        41.640833333  \n      ]  \n    }  \n  },  \n  \"precipitation\": {  \n    \"type\": \"Property\",  \n    \"value\": 0  \n  },  \n  \"pressureTendency\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.5  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Device:device-0A3478\"  \n  },  \n  \"relativeHumidity\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"snowHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 20  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"http://www.aemet.es\"  \n  },  \n  \"stationCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"2422\"  \n  },  \n  \"stationName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Valladolid\"  \n  },  \n  \"streamGauge\": {  \n    \"type\": \"Property\",  \n    \"value\": 50  \n  },  \n  \"temperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.3  \n  },  \n  \"uvIndexMax\": {  \n    \"type\": \"Property\",  \n    \"value\": 1.0  \n  },  \n  \"windDirection\": {  \n    \"type\": \"Property\",  \n    \"value\": 135  \n  },  \n  \"windSpeed\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Weather/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"

- DOMAIN_NAME: Smart Agrifood
  REPO_URL: https://github.com/smart-data-models/SmartAgrifood.git
  SUBMODULES:
    - SUBMODULE_SHORT_NAME: Agrifood
      MODELS:
        - MODEL_NAME: AnimalDisease
        - MODEL_DESCRIPTION: Object modelling an animal disease for a livestock farm.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: SensoWave, comments: null, description: Data sharing management software,
              mail: info@sensowave.com, organization: SensoWave, project: FARM4ALL (i4Trust),
              startDate: null}
            - {adopter: Bricalvet, comments: null, description: Veterinarian management software,
              mail: null, organization: Bricalvet, project: FARM4ALL (i4Trust), startDate: null}
            description: This is a compilation list of the current adopters of the data model
              AnimalDisease of the Subject dataModel.Agrifood.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: AnimalDisease  \n=====================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Agrifood/blob/master/AnimalDisease/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Object modelling an animal disease for a livestock farm.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `animals`: Animals or list of animals diagnosed with the disease. Model https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Animal/schema.json  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `date`: Date of diagnosis of the disease by a veterinarian.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `diagnosticTest`: Diagnostic test performed in the animals for the determination of the disease by a veterinarian.  \r- `disease`: Animal disease. Indicates the disease the animal has as diagnosed by a veterinarian. Spanish source of diseases https://www.mapa.gob.es/es/ganaderia/temas/sanidad-animal-higiene-ganadera/sanidad-animal/enfermedades/  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI entity type. It has to be AnimalDisease  \r- `veterinarian`: Diagnostic veterinarian. Relationship to the prescribing veterinarian  \r- `veterinarianTreatment`: Medical treatment diagnosed by the veterinarian to treat the disease. https://github.com/smart-data-models/dataModel.Agrifood/blob/master/VeterinarianTreatment/schema.json  \r  \n\rRequired properties  \n- `disease`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nAnimalDisease:    \n  description: 'Object modelling an animal disease for a livestock farm.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    animals:    \n      description: 'Animals or list of animals diagnosed with the disease. Model https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Animal/schema.json'    \n      items:    \n        format: uri    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Relationship    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    date:    \n      description: 'Date of diagnosis of the disease by a veterinarian.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    diagnosticTest:    \n      description: 'Diagnostic test performed in the animals for the determination of the disease by a veterinarian.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    disease:    \n      description: 'Animal disease. Indicates the disease the animal has as diagnosed by a veterinarian. Spanish source of diseases https://www.mapa.gob.es/es/ganaderia/temas/sanidad-animal-higiene-ganadera/sanidad-animal/enfermedades/'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &animaldisease_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *animaldisease_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be AnimalDisease'    \n      enum:    \n        - AnimalDisease    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    veterinarian:    \n      description: 'Diagnostic veterinarian. Relationship to the prescribing veterinarian'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    veterinarianTreatment:    \n      description: 'Medical treatment diagnosed by the veterinarian to treat the disease. https://github.com/smart-data-models/dataModel.Agrifood/blob/master/VeterinarianTreatment/schema.json'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n  required:    \n    - id    \n    - type    \n    - disease    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/AnimalDisease/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Agrifood/AnimalDisease/schema.json    \n  x-model-tags: I4Trust    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### AnimalDisease NGSI-v2 key-values Example    \n\rHere is an example of a AnimalDisease in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalDisease:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalDisease\",  \n  \"disease\": \"Lameness\",  \n  \"diagnosticTest\": \"Visual inspection\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"animals\": [  \n    \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n    \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n  ],  \n  \"veterinarianTreatment\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c65\",  \n  \"veterinarian\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\"  \n}  \n```  \n\r#### AnimalDisease NGSI-v2 normalized Example    \n\rHere is an example of a AnimalDisease in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalDisease:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalDisease\",  \n  \"disease\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Lameness\"  \n  },  \n  \"diagnosticTest\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Visual inspection\"  \n  },  \n  \"date\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-01-01T01:20:00Z\"  \n  },  \n  \"animals\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n      \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n    ]  \n  },  \n  \"veterinarianTreatment\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c65\"  \n  },  \n  \"veterinarian\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\"  \n  }  \n}  \n```  \n\r#### AnimalDisease NGSI-LD key-values Example    \n\rHere is an example of a AnimalDisease in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalDisease:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalDisease\",  \n  \"disease\": \"Lameness\",  \n  \"diagnosticTest\": \"Visual inspection\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"animals\": [  \n    \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n    \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n  ],  \n  \"veterinarianTreatment\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c65\",  \n  \"veterinarian\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\",  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### AnimalDisease NGSI-LD normalized Example    \n\rHere is an example of a AnimalDisease in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalDisease:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalDisease\",  \n  \"disease\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Lameness\"  \n  },  \n  \"diagnosticTest\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Visual inspection\"  \n  },  \n  \"date\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-01-01T01:20:00Z\"  \n    }  \n  },  \n  \"animals\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n      \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n    ]  \n  },  \n  \"veterinarianTreatment\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c65\"  \n  },  \n  \"veterinarian\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\"  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: AnimalMovement
        - MODEL_DESCRIPTION: Object modelling of an animal movement for a livestock farm.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: SensoWave, comments: null, description: Data sharing management software,
              mail: info@sensowave.com, organization: SensoWave, project: FARM4ALL (i4Trust),
              startDate: null}
            - {adopter: Cumbres del Guadarrama, comments: null, description: Farm management software,
              mail: null, organization: Cumbres del Guadarrama, project: FARM4ALL (i4Trust), startDate: null}
            - {adopter: La Blaqueria, comments: null, description: Farm management software, mail: null,
              organization: La Blaqueria, project: FARM4ALL (i4Trust), startDate: null}
            description: This is a compilation list of the current adopters of the data model
              AnimalMovement of the Subject dataModel.Agrifood.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: AnimalMovement  \n======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Agrifood/blob/master/AnimalMovement/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Object modelling of an animal movement for a livestock farm.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `animal`: List of animals subject to the movement  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `date`: Date of animal movement.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `farm`: Farm object of the movement  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `movement`: Type of movement: input/output. Input means that animals enter the farm/enclosure, while output means that they leave.  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `parcel`: Parcel object of the movement  \r- `pen`: Pen object of the movement  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI entity type. It has to be AnimalMovement  \r  \n\rRequired properties  \n- `animal`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nAnimalMovement:    \n  description: 'Object modelling of an animal movement for a livestock farm.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    animal:    \n      description: 'List of animals subject to the movement'    \n      items:    \n        format: uri    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Animal/schema.json    \n        type: Relationship    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    date:    \n      description: 'Date of animal movement.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    farm:    \n      description: 'Farm object of the movement'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/AgriFarm/schema.json    \n        type: Relationship    \n    id:    \n      anyOf: &animalmovement_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    movement:    \n      description: 'Type of movement: input/output. Input means that animals enter the farm/enclosure, while output means that they leave.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *animalmovement_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    parcel:    \n      description: 'Parcel object of the movement'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/AgriParcel/schema.json    \n        type: Relationship    \n    pen:    \n      description: 'Pen object of the movement'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Pen/schema.json    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be AnimalMovement'    \n      enum:    \n        - AnimalMovement    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - animal    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/AnimalMovement/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Agrifood/AnimalMovement/schema.json    \n  x-model-tags: I4Trust    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### AnimalMovement NGSI-v2 key-values Example    \n\rHere is an example of a AnimalMovement in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalMovement:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalMovement\",  \n  \"movement\": \"input\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"animal\": [  \n    \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n    \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n  ],  \n  \"parcel\": \"urn:ngsi-ld:AgriParcel:72d9fb43-53f8-4ec8-a33c-fa931360259a\",  \n  \"farm\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\"  \n}  \n```  \n\r#### AnimalMovement NGSI-v2 normalized Example    \n\rHere is an example of a AnimalMovement in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalMovement:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalMovement\",  \n  \"movement\": {  \n    \"type\": \"Text\",  \n    \"value\": \"input\"  \n  },  \n  \"date\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-01-01T01:20:00Z\"  \n  },  \n  \"animal\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n      \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n    ]  \n  },  \n  \"parcel\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:AgriParcel:72d9fb43-53f8-4ec8-a33c-fa931360259a\"  \n  },  \n  \"farm\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\"  \n  }  \n}  \n```  \n\r#### AnimalMovement NGSI-LD key-values Example    \n\rHere is an example of a AnimalMovement in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalMovement:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalMovement\",  \n  \"movement\": \"input\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"animal\": [  \n    \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n    \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n  ],  \n  \"parcel\": \"urn:ngsi-ld:AgriParcel:72d9fb43-53f8-4ec8-a33c-fa931360259a\",  \n  \"farm\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\",  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### AnimalMovement NGSI-LD normalized Example    \n\rHere is an example of a AnimalMovement in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:AnimalMovement:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"AnimalMovement\",  \n  \"movement\": {  \n    \"type\": \"Property\",  \n    \"value\": \"input\"  \n  },  \n  \"date\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-01-01T01:20:00Z\"  \n    }  \n  },  \n  \"animal\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n      \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n    ]  \n  },  \n  \"parcel\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:AgriParcel:72d9fb43-53f8-4ec8-a33c-fa931360259a\"  \n  },  \n  \"farm\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\"  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: Carcass
        - MODEL_DESCRIPTION: Object modelling a carcass of an animal for a livestock farm.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: SensoWave, comments: null, description: Data sharing management software,
              mail: info@sensowave.com, organization: SensoWave, project: FARM4ALL (i4Trust),
              startDate: null}
            - {adopter: Carnicas Martin Caro, comments: null, description: Data sharing management
                software, mail: null, organization: Carnicas Martin Caro, project: FARM4ALL (i4Trust),
              startDate: null}
            description: This is a compilation list of the current adopters of the data model
              Carcass of the Subject dataModel.Agrifood.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: Carcass  \n===============\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Agrifood/blob/master/Carcass/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Object modelling a carcass of an animal for a livestock farm.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `animal`: Animal origin of the carcass. Model https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Animal/schema.json  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `date`: Carcass modification date.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `initialWeight`: Initial weight of the carcass  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI entity type. It has to be Carcass  \r- `weight`: Weight of the carcass  \r  \n\rRequired properties  \n- `animal`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nCarcass:    \n  description: 'Object modelling a carcass of an animal for a livestock farm.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    animal:    \n      description: 'Animal origin of the carcass. Model https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Animal/schema.json'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    date:    \n      description: 'Carcass modification date.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &carcass_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    initialWeight:    \n      description: 'Initial weight of the carcass'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *carcass_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be Carcass'    \n      enum:    \n        - Carcass    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    weight:    \n      description: 'Weight of the carcass'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - animal    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Carcass/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Agrifood/Carcass/schema.json    \n  x-model-tags: I4Trust    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### Carcass NGSI-v2 key-values Example    \n\rHere is an example of a Carcass in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"Carcass\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"animal\": \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"initialWeight\": 389,  \n  \"weight\": 234  \n}  \n```  \n\r#### Carcass NGSI-v2 normalized Example    \n\rHere is an example of a Carcass in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"Carcass\",  \n  \"date\": {  \n    \"type\": \"Date-time\",  \n    \"value\": \"2022-01-01T01:20:00Z\"  \n  },  \n  \"animal\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\"  \n  },  \n  \"initialWeight\": {  \n    \"type\": \"number\",  \n    \"value\": 389  \n  },  \n  \"weight\": {  \n    \"type\": \"number\",  \n    \"value\": 234  \n  }  \n}  \n```  \n\r#### Carcass NGSI-LD key-values Example    \n\rHere is an example of a Carcass in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"Carcass\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"animal\": \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"initialWeight\": 389,  \n  \"weight\": 234,  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### Carcass NGSI-LD normalized Example    \n\rHere is an example of a Carcass in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"Carcass\",  \n  \"date\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-time\",  \n      \"@value\": \"2022-01-01T01:20:00Z\"  \n    }  \n  },  \n  \"animal\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\"  \n  },  \n  \"initialWeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 389  \n  },  \n  \"weight\": {  \n    \"type\": \"Property\",  \n    \"value\": 234  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: FeedRegistry
        - MODEL_DESCRIPTION: Object modelling a feed registry for a livestock farm.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: SensoWave, comments: null, description: Data sharing management software,
              mail: info@sensowave.com, organization: SensoWave, project: FARM4ALL (i4Trust),
              startDate: null}
            - {adopter: GEPISA, comments: null, description: Feed supplier management software,
              mail: null, organization: GEPISA, project: FARM4ALL (i4Trust), startDate: null}
            description: This is a compilation list of the current adopters of the data model
              FeedRegistry of the Subject dataModel.Agrifood.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: FeedRegistry  \n====================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Agrifood/blob/master/FeedRegistry/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Object modelling a feed registry for a livestock farm.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `amount`: Amount of feed supplied to animals.  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `date`: Date of supply of food to animals  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `deliveryNote`: Description of the feed registry  \r- `description`: A description of this item  \r- `farm`: Farm where the operation is carried out. https://github.com/smart-data-models/dataModel.Agrifood/blob/master/AgriFarm/schema.json  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `supplier`: Supplier of the feed  \r- `type`: NGSI entity type. It has to be FeedRegistry  \r  \n\rRequired properties  \n- `id`  \r- `name`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nFeedRegistry:    \n  description: 'Object modelling a feed registry for a livestock farm.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    amount:    \n      description: 'Amount of feed supplied to animals.'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    date:    \n      description: 'Date of supply of food to animals'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    deliveryNote:    \n      description: 'Description of the feed registry'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    farm:    \n      description: 'Farm where the operation is carried out. https://github.com/smart-data-models/dataModel.Agrifood/blob/master/AgriFarm/schema.json'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    id:    \n      anyOf: &feedregistry_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *feedregistry_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    supplier:    \n      description: 'Supplier of the feed'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be FeedRegistry'    \n      enum:    \n        - FeedRegistry    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - name    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/FeedRegistry/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Agrifood/FeedRegistry/schema.json    \n  x-model-tags: I4Trust    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### FeedRegistry NGSI-v2 key-values Example    \n\rHere is an example of a FeedRegistry in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:FeedRegistry:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n    \"type\": \"FeedRegistry\",  \n    \"name\":\"Biona tacos Campero Vacuno 40 kg\",  \n    \"date\":\"2022-01-01T01:20:00Z\",  \n    \"farm\":\"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\",  \n    \"amount\":1230,  \n    \"supplier\": \"GEPISA\",  \n    \"deliveryNote\":\"Primera entrega 2022\"  \n}  \n```  \n\r#### FeedRegistry NGSI-v2 normalized Example    \n\rHere is an example of a FeedRegistry in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:FeedRegistry:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"FeedRegistry\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Biona tacos Campero Vacuno 40 kg\"  \n  },  \n  \"date\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-01-01T01:20:00Z\"  \n  },  \n  \"farm\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\"  \n  },  \n  \"amount\": {  \n    \"type\": \"number\",  \n    \"value\": 1230  \n  },  \n  \"supplier\": {  \n    \"type\": \"Text\",  \n    \"value\": \"GEPISA\"  \n  },  \n  \"deliveryNote\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Primera entrega 2022\"  \n  }  \n}  \n```  \n\r#### FeedRegistry NGSI-LD key-values Example    \n\rHere is an example of a FeedRegistry in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:FeedRegistry:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"FeedRegistry\",  \n  \"name\": \"Biona tacos Campero Vacuno 40 kg\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"farm\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\",  \n  \"amount\": 1230,  \n  \"supplier\": \"GEPISA\",  \n  \"deliveryNote\": \"Primera entrega 2022\",  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### FeedRegistry NGSI-LD normalized Example    \n\rHere is an example of a FeedRegistry in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:FeedRegistry:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"FeedRegistry\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Biona tacos Campero Vacuno 40 kg\"  \n  },  \n  \"date\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-01-01T01:20:00Z\"  \n    }  \n  },  \n  \"farm\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\"  \n  },  \n  \"amount\": {  \n    \"type\": \"Property\",  \n    \"value\": 1230  \n  },  \n  \"supplier\": {  \n    \"type\": \"Property\",  \n    \"value\": \"GEPISA\"  \n  },  \n  \"deliveryNote\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Primera entrega 2022\"  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: MeatProduct
        - MODEL_DESCRIPTION: Object modelling a meat product for a livestock farm.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: SensoWave, comments: null, description: Data sharing management software,
              mail: info@sensowave.com, organization: SensoWave, project: FARM4ALL (i4Trust),
              startDate: null}
            - {adopter: Carnicas Martin Caro, comments: null, description: Data sharing management
                software, mail: null, organization: Carnicas Martin Caro, project: FARM4ALL (i4Trust),
              startDate: null}
            description: This is a compilation list of the current adopters of the data model
              MeatProduct of the Subject dataModel.Agrifood.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: MeatProduct  \n===================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Agrifood/blob/master/MeatProduct/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Object modelling a meat product for a livestock farm.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `carcass`: Relationship to the entity storing the carcass origin of the meat product  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `date`: Date of application  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI entity type. It has to be MeatProduct  \r- `weight`: Weight of the product  \r  \n\rRequired properties  \n- `carcass`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nMeatProduct:    \n  description: 'Object modelling a meat product for a livestock farm.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    carcass:    \n      description: 'Relationship to the entity storing the carcass origin of the meat product'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://github.com/smart-data-models/incubated/blob/master/I4TRUST/Farm4All/MeatIndustry/Carcass/schema.json    \n        type: Relationship    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    date:    \n      description: 'Date of application'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &meatproduct_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *meatproduct_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be MeatProduct'    \n      enum:    \n        - MeatProduct    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    weight:    \n      description: 'Weight of the product'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - carcass    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/MeatProduct/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Agrifood/MeatProduct/schema.json    \n  x-model-tags: I4Trust    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### MeatProduct NGSI-v2 key-values Example    \n\rHere is an example of a MeatProduct in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:MeatProduct:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"MeatProduct\",  \n  \"name\": \"Lomo alto de ternera\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"carcass\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"weight\": 350  \n}  \n```  \n\r#### MeatProduct NGSI-v2 normalized Example    \n\rHere is an example of a MeatProduct in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:MeatProduct:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"MeatProduct\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Lomo alto de ternera\"  \n  },  \n  \"date\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-01-01T01:20:00Z\"  \n  },  \n  \"carcass\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\"  \n  },  \n  \"weight\": {  \n    \"type\": \"number\",  \n    \"value\": 350  \n  }  \n}  \n```  \n\r#### MeatProduct NGSI-LD key-values Example    \n\rHere is an example of a MeatProduct in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:MeatProduct:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"MeatProduct\",  \n  \"name\": \"Lomo alto de ternera\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"carcass\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"weight\": 350,  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### MeatProduct NGSI-LD normalized Example    \n\rHere is an example of a MeatProduct in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:MeatProduct:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"MeatProduct\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Lomo alto de ternera\"  \n  },  \n  \"date\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-01-01T01:20:00Z\"  \n    }  \n  },  \n  \"carcass\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Carcass:ca3f1295-500c-4aa3-b745-d143097d5c01\"  \n  },  \n  \"weight\": {  \n    \"type\": \"Property\",  \n    \"value\": 350  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: VeterinarianTreatment
        - MODEL_DESCRIPTION: Object modelling a veterinary treatment for a livestock farm.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: SensoWave, comments: null, description: Data sharing management software,
              mail: info@sensowave.com, organization: SensoWave, project: FARM4ALL (i4Trust),
              startDate: null}
            - {adopter: Bricalvet, comments: null, description: Veterinarian management software,
              mail: null, organization: Bricalvet, project: FARM4ALL (i4Trust), startDate: null}
            description: This is a compilation list of the current adopters of the data model
              VeterinarianTreatment of the Subject dataModel.Agrifood.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: VeterinarianTreatment  \n=============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Agrifood/blob/master/VeterinarianTreatment/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Object modelling a veterinary treatment for a livestock farm.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `animals`: Animals treated with the applied product  \r- `appliedProduct`: Veterinary product applied  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `date`: Date of application  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `phaseOutPeriod`: It is the period of time in days between the last administration of the veterinary medicinal product to an animal, under normal conditions of use, and the production of foodstuffs from that animal.  \r- `quantity`: Amount of veterinary product applied  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity VeterinarianProduct  \r- `veterinarian`: Identifier of the entity storing the prescribing veterinarian data  \r  \n\rRequired properties  \n- `appliedProduct`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nVeterinarianTreatment:    \n  description: 'Object modelling a veterinary treatment for a livestock farm.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    animals:    \n      description: 'Animals treated with the applied product'    \n      items:    \n        format: uri    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/Animal/schema.json    \n        type: Relationship    \n    appliedProduct:    \n      description: 'Veterinary product applied'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    date:    \n      description: 'Date of application'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &veterinariantreatment_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *veterinariantreatment_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    phaseOutPeriod:    \n      description: 'It is the period of time in days between the last administration of the veterinary medicinal product to an animal, under normal conditions of use, and the production of foodstuffs from that animal.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    quantity:    \n      description: 'Amount of veterinary product applied'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity VeterinarianProduct'    \n      enum:    \n        - VeterinarianTreatment    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    veterinarian:    \n      description: 'Identifier of the entity storing the prescribing veterinarian data'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n  required:    \n    - id    \n    - type    \n    - appliedProduct    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Agrifood/blob/master/VeterinarianTreatment/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Agrifood/VeterinarianTreatment/schema.json    \n  x-model-tags: I4Trust    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### VeterinarianTreatment NGSI-v2 key-values Example    \n\rHere is an example of a VeterinarianTreatment in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"VeterinarianTreatment\",  \n  \"appliedProduct\": \"Pisadug\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"quantity\": 1,  \n  \"phaseOutPeriod\": 4,  \n  \"deliveryNote\": \"Primera entrega 2022\",  \n  \"animals\": [  \n    \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n    \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n  ],  \n  \"veterinarian\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\"  \n}  \n```  \n\r#### VeterinarianTreatment NGSI-v2 normalized Example    \n\rHere is an example of a VeterinarianTreatment in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"VeterinarianTreatment\",  \n  \"appliedProduct\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Pisadug\"  \n  },  \n  \"date\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-01-01T01:20:00Z\"  \n  },  \n  \"quantity\": {  \n    \"type\": \"number\",  \n    \"value\": 1  \n  },  \n  \"phaseOutPeriod\": {  \n    \"type\": \"number\",  \n    \"value\": 4  \n  },  \n  \"deliveryNote\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Primera entrega 2022\"  \n  },  \n  \"animals\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n      \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n    ]  \n  },  \n  \"veterinarian\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\"  \n  }  \n}  \n```  \n\r#### VeterinarianTreatment NGSI-LD key-values Example    \n\rHere is an example of a VeterinarianTreatment in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"VeterinarianTreatment\",  \n  \"appliedProduct\": \"Pisadug\",  \n  \"date\": \"2022-01-01T01:20:00Z\",  \n  \"quantity\": 1,  \n  \"phaseOutPeriod\": 4,  \n  \"deliveryNote\": \"Primera entrega 2022\",  \n  \"animals\": [  \n    \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n    \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n  ],  \n  \"veterinarian\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\",  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Agrifood/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### VeterinarianTreatment NGSI-LD normalized Example    \n\rHere is an example of a VeterinarianTreatment in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:VeterinarianTreatment:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n  \"type\": \"VeterinarianTreatment\",  \n  \"appliedProduct\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Pisadug\"  \n  },  \n  \"date\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"Date-Time\",  \n      \"value\": \"2022-01-01T01:20:00Z\"  \n    }  \n  },  \n  \"quantity\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"phaseOutPeriod\": {  \n    \"type\": \"Property\",  \n    \"value\": 4  \n  },  \n  \"deliveryNote\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Primera entrega 2022\"  \n  },  \n  \"animals\": {  \n    \"type\": \"Relationship\",  \n    \"object\": [  \n      \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\",  \n      \"urn:ngsi-ld:Animal:bb3f1295-500c-4aa3-b745-d143097d4321\"  \n    ]  \n  },  \n  \"veterinarian\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Veterinarian:ca3f1295-500c-4aa3-b745-d143097d5d11\"  \n  }  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: Aquaculture
      MODELS:
    - SUBMODULE_SHORT_NAME: Weather
      MODELS:
        - MODEL_NAME: WeatherObserved
        - MODEL_DESCRIPTION: An observation of weather conditions at a certain place and time. This data model has been developed in cooperation with mobile operators and the GSMA.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: Data Model for weather conditions observed
                at a certain place and time., mail: null, organization: null, project: null, startDate: null}
            - {adopter: Las Rozas Innova, comments: null, description: null, mail: jpena@lasrozasinnova.es,
              organization: Municipality of Las Rozas (Spain), project: 'https://lasrozasinnova.es/cosmos-plataforma-de-ciudad-inteligente-de-las-rozas/',
              startDate: 1-1-2022}
            description: This is a compilation list of the current adopters of the data model
              WeatherObserved of the Subject dataModel.Weather.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: WeatherObserved  \n=======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Weather/blob/master/WeatherObserved/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **An observation of weather conditions at a certain place and time. This data model has been developed in cooperation with mobile operators and the GSMA.**  \n\rversion: 0.3.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `airQualityIndex`: Air quality index is a number used to report the quality of the air on any given day.  \r- `airQualityIndexForecast`: Forecasted overall Air Quality Index (AQI) over a certain duration in future.  \r- `airTemperatureForecast`: Forecasted value of air temperature over a certain duration in future.  \r- `airTemperatureTSA`: Object defining the temporal processing of a basic property during a period. It provides Maximum, minimum, instant value and average  \r- `alternateName`: An alternative name for this item  \r- `aqiMajorPollutant`: Major pollutant in the Air Quality Index (AQI).  \r- `aqiMajorPollutantForecast`: Forecasted major air pollutant in the Air Quality Index (AQI) over a certain duration in future.  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `atmosphericPressure`: The atmospheric pressure observed measured in Hecto Pascals  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObserved`: Date of the observed entity defined by the user.  \r- `description`: A description of this item  \r- `dewPoint`: The dew point encoded as a number. Observed temperature to which air must be cooled to become saturated with water vapor  \r- `feelLikesTemperature`: Temperature appreciation of the item  \r- `gustSpeed`: A sudden burst of high-speed wind over the observed average wind speed lasting only for a few seconds.  \r- `id`: Unique identifier of the entity  \r- `illuminance`: Observed instantaneous ambient light intensity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `precipitation`: Amount of water rain registered.   \r- `precipitationForecast`: Forecasted rainfall over a certain duration in future.  \r- `pressureTendency`: Enum:'falling, raising, steady'. Is the pressure rising or falling? It can be expressed in quantitative terms or qualitative terms.  \r- `refDevice`: A reference to the device(s) which captured this observation.  \r- `refPointOfInterest`: Point of interest related to the item  \r- `relativeHumidity`: Humidity in the Air. Observed instantaneous relative humidity (water vapour in air)  \r- `relativeHumidityForecast`: Forecasted relative humidity (water vapour in air) over a certain duration in future  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `snowHeight`: The snow height observed by generic snow depth measurement sensors, expressed in centimeters  \r- `solarRadiation`: The solar radiation observed measured in Watts per square  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `streamGauge`: The water level surface elevation observed by Hydrometric measurement sensors, namely a [Stream Gauge](https://en.wikipedia.org/wiki/Stream_gauge) expressed in centimeters  \r- `temperature`: Temperature of the item  \r- `type`: NGSI Entity type. It has to be WeatherObserved  \r- `uVIndexMax`: The maximum UV index for the period, based on the World Health Organization's UV Index measure. [http://www.who.int/uv/intersunprogramme/activities/uv_index/en/](http://www.who.int/uv/intersunprogramme/activities/uv_index/en/) the values between 1 and 11 are the valid range for the index. The value 0 is for describing that no signal is detected so no value is stored.  \r- `visibility`: Categories of visibility  \r- `weatherType`: Text description of the weather  \r- `windDirection`: Direction of the wind bet  \r- `windSpeed`: Intensity of the wind  \r  \n\rRequired properties  \n- `dateObserved`  \r- `id`  \r- `location`  \r- `type`  \r  \n\rWind direction range defined according to the [World Meteorological organization](https://library.wmo.int/doc_num.php?explnum_id=3177)  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWeatherObserved:    \n  description: 'An observation of weather conditions at a certain place and time. This data model has been developed in cooperation with mobile operators and the GSMA.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    airQualityIndex:    \n      description: 'Air quality index is a number used to report the quality of the air on any given day.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    airQualityIndexForecast:    \n      description: 'Forecasted overall Air Quality Index (AQI) over a certain duration in future.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    airTemperatureForecast:    \n      description: 'Forecasted value of air temperature over a certain duration in future.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    airTemperatureTSA:    \n      description: 'Object defining the temporal processing of a basic property during a period. It provides Maximum, minimum, instant value and average'    \n      properties:    \n        averageValue:    \n          type: number    \n        instValue:    \n          type: number    \n        maxOverTime:    \n          type: number    \n        minOverTime:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    aqiMajorPollutant:    \n      description: 'Major pollutant in the Air Quality Index (AQI).'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    aqiMajorPollutantForecast:    \n      description: 'Forecasted major air pollutant in the Air Quality Index (AQI) over a certain duration in future.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    atmosphericPressure:    \n      description: 'The atmospheric pressure observed measured in Hecto Pascals'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Hecto pascals'    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObserved:    \n      description: 'Date of the observed entity defined by the user.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dewPoint:    \n      description: 'The dew point encoded as a number. Observed temperature to which air must be cooled to become saturated with water vapor'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Celsius degrees'    \n    feelLikesTemperature:    \n      description: 'Temperature appreciation of the item'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    gustSpeed:    \n      description: 'A sudden burst of high-speed wind over the observed average wind speed lasting only for a few seconds.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &weatherobserved_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    illuminance:    \n      description: 'Observed instantaneous ambient light intensity'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: Lux    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *weatherobserved_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    precipitation:    \n      description: 'Amount of water rain registered. '    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Liters per square meter'    \n    precipitationForecast:    \n      description: 'Forecasted rainfall over a certain duration in future.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    pressureTendency:    \n      description: 'Enum:''falling, raising, steady''. Is the pressure rising or falling? It can be expressed in quantitative terms or qualitative terms.'    \n      oneOf:    \n        - enum:    \n            - falling    \n            - raising    \n            - steady    \n          type: string    \n        - type: number    \n      x-ngsi:    \n        type: Property    \n    refDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A reference to the device(s) which captured this observation.'    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    refPointOfInterest:    \n      description: 'Point of interest related to the item'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    relativeHumidity:    \n      description: 'Humidity in the Air. Observed instantaneous relative humidity (water vapour in air)'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    relativeHumidityForecast:    \n      description: 'Forecasted relative humidity (water vapour in air) over a certain duration in future'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    snowHeight:    \n      description: 'The snow height observed by generic snow depth measurement sensors, expressed in centimeters'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: centimeters    \n    solarRadiation:    \n      description: 'The solar radiation observed measured in Watts per square'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: w/m2    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    streamGauge:    \n      description: 'The water level surface elevation observed by Hydrometric measurement sensors, namely a [Stream Gauge](https://en.wikipedia.org/wiki/Stream_gauge) expressed in centimeters'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: centimeters    \n    temperature:    \n      description: 'Temperature of the item'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be WeatherObserved'    \n      enum:    \n        - WeatherObserved    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    uVIndexMax:    \n      description: 'The maximum UV index for the period, based on the World Health Organization''s UV Index measure. [http://www.who.int/uv/intersunprogramme/activities/uv_index/en/](http://www.who.int/uv/intersunprogramme/activities/uv_index/en/) the values between 1 and 11 are the valid range for the index. The value 0 is for describing that no signal is detected so no value is stored.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    visibility:    \n      anyOf:    \n        - enum:    \n            - veryPoor    \n            - poor    \n            - moderate    \n            - good    \n            - veryGood    \n            - excellent    \n          type: string    \n        - minimum: 0    \n          type: number    \n      description: 'Categories of visibility'    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    weatherType:    \n      description: 'Text description of the weather'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Text.    \n        type: Property    \n    windDirection:    \n      description: 'Direction of the wind bet'    \n      maximum: 360    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    windSpeed:    \n      description: 'Intensity of the wind'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http//schema.org/Number    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - dateObserved    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Weather/blob/master/WeatherObserved/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Weather/WeatherObserved/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.3.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### WeatherObserved NGSI-v2 key-values Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"Spain-WeatherObserved-Valladolid-2016-11-30T07:00:00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"address\": {  \n    \"addressLocality\": \"Valladolid\",  \n    \"addressCountry\": \"ES\"  \n  },  \n  \"atmosphericPressure\": 938.9,  \n  \"dataProvider\": \"TEF\",  \n  \"dateObserved\": \"2016-11-30T07:00:00.00Z\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.754444444,  \n      41.640833333  \n    ]  \n  },  \n  \"precipitation\": 0,  \n  \"pressureTendency\": 0.5,  \n  \"relativeHumidity\": 1,  \n  \"source\": \"http://www.aemet.es\",  \n  \"stationCode\": \"2422\",  \n  \"stationName\": \"Valladolid\",  \n  \"temperature\": 3.3,  \n  \"windDirection\": 135,  \n  \"windSpeed\": 2,  \n  \"illuminance\": 1000,  \n  \"refDevice\": \"device-0A3478\",  \n  \"streamGauge\": 50,  \n  \"snowHeight\": 20,  \n  \"uvIndexMax\": 1.0  \n}  \n```  \n\r#### WeatherObserved NGSI-v2 normalized Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"Valladolid.2016-11-30T07-00-00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"dateObserved\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2016-11-30T07:00:00.00Z\"  \n  },  \n  \"illuminance\": {  \n    \"type\": \"Number\",  \n    \"value\": 1000  \n  },  \n  \"temperature\": {  \n    \"type\": \"Number\",  \n    \"value\": 3.3  \n  },  \n  \"precipitation\": {  \n    \"type\": \"Number\",  \n    \"value\": 0  \n  },  \n  \"atmosphericPressure\": {  \n    \"type\": \"Number\",  \n    \"value\": 938.9  \n  },  \n  \"pressureTendency\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.5  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"device-0A3478\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"http://www.aemet.es\"  \n  },  \n  \"windSpeed\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.754444444,  \n        41.640833333  \n      ]  \n    }  \n  },  \n  \"stationName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Valladolid\"  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressLocality\": \"Valladolid\",  \n      \"addressCountry\": \"ES\"  \n    }  \n  },  \n  \"stationCode\": {  \n    \"type\": \"Text\",  \n    \"value\": \"2422\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"TEF\"  \n  },  \n  \"windDirection\": {  \n    \"type\": \"Number\",  \n    \"value\": 135  \n  },  \n  \"relativeHumidity\": {  \n    \"type\": \"Number\",  \n    \"value\": 1  \n  },  \n  \"streamGauge\": {  \n    \"type\": \"Number\",  \n    \"value\": 50  \n  },  \n  \"snowHeight\": {  \n    \"type\": \"Number\",  \n    \"value\": 20  \n  },  \n  \"uvIndexMax\": {  \n    \"type\": \"Number\",  \n    \"value\": 1.0  \n  }  \n}  \n```  \n\r#### WeatherObserved NGSI-LD key-values Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WeatherObserved:Spain-WeatherObserved-Valladolid-2016-11-30T07:00:00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"address\": {  \n    \"addressLocality\": \"Valladolid\",  \n    \"addressCountry\": \"ES\"  \n  },  \n  \"atmosphericPressure\": 938.9,  \n  \"dataProvider\": \"TEF\",  \n  \"dateObserved\": \"2016-11-30T07:00:00.00Z\",  \n  \"illuminance\": 1000,  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.754444444,  \n      41.640833333  \n    ]  \n  },  \n  \"precipitation\": 0,  \n  \"pressureTendency\": 0.5,  \n  \"refDevice\": \"urn:ngsi-ld:Device:device-0A3478\",  \n  \"relativeHumidity\": 1,  \n  \"snowHeight\": 20,  \n  \"source\": \"http://www.aemet.es\",  \n  \"stationCode\": \"2422\",  \n  \"stationName\": \"Valladolid\",  \n  \"streamGauge\": 50,  \n  \"temperature\": 3.3,  \n  \"uvIndexMax\": 1.0,  \n  \"windDirection\": 135,  \n  \"windSpeed\": 2,  \n  \"@context\": [  \n    \"iudx:EnvWeather\",  \n    \"https://smart-data-models.github.io/dataModel.Weather/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### WeatherObserved NGSI-LD normalized Example    \n\rHere is an example of a WeatherObserved in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WeatherObserved:Spain-WeatherObserved-Valladolid-2016-11-30T07:00:00.00Z\",  \n  \"type\": \"WeatherObserved\",  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressLocality\": \"Valladolid\",  \n      \"addressCountry\": \"ES\",  \n      \"type\": \"PostalAddress\"  \n    }  \n  },  \n  \"atmosphericPressure\": {  \n    \"type\": \"Property\",  \n    \"value\": 938.9  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"TEF\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2016-11-30T07:00:00.00Z\"  \n    }  \n  },  \n  \"illuminance\": {  \n    \"type\": \"Property\",  \n    \"value\": 1000  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.754444444,  \n        41.640833333  \n      ]  \n    }  \n  },  \n  \"precipitation\": {  \n    \"type\": \"Property\",  \n    \"value\": 0  \n  },  \n  \"pressureTendency\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.5  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Device:device-0A3478\"  \n  },  \n  \"relativeHumidity\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"snowHeight\": {  \n    \"type\": \"Property\",  \n    \"value\": 20  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"http://www.aemet.es\"  \n  },  \n  \"stationCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"2422\"  \n  },  \n  \"stationName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Valladolid\"  \n  },  \n  \"streamGauge\": {  \n    \"type\": \"Property\",  \n    \"value\": 50  \n  },  \n  \"temperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.3  \n  },  \n  \"uvIndexMax\": {  \n    \"type\": \"Property\",  \n    \"value\": 1.0  \n  },  \n  \"windDirection\": {  \n    \"type\": \"Property\",  \n    \"value\": 135  \n  },  \n  \"windSpeed\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/dataModel.Weather/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"

- DOMAIN_NAME: Smart Water
  REPO_URL: https://github.com/smart-data-models/SmartWater.git
  SUBMODULES:
    - SUBMODULE_SHORT_NAME: OpenChannelManagement
      MODELS:
        - MODEL_NAME: CrossSection
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic Cross-Section made for Raw-Water (Open Channels) System Management domain. A CrossSection defines any point of the system where raw-water properties are monitored by a device and/or computed via simulation.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technical University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              CrossSection of the Subject OpenChannelManagement.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: CrossSection  \n====================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/CrossSection/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic Cross-Section made for Raw-Water (Open Channels) System Management domain. A CrossSection defines any point of the system where raw-water properties are monitored by a device and/or computed via simulation.**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `attachedTo`: A relationship to the ID of the channel where the cross-section 'lives in'. Reference to an entity of type Channel.  \r- `bottomSlope`: The bottom slope of the channel where the cross-section 'lives in'. All units are accepted in CEFACT code.  \r- `bottomWidth`: The bottom width of the cross-section (for 'Trapezoidal' geometry). All units are accepted in CEFACT code.  \r- `crossSectionGeometry`: The geometry of the cross-section. Enum:'Circular, Trapezoidal'.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `diameter`: The diameter of a circular cross-section.  \r- `energyHead`: The total energy head at the cross-section.  \r- `id`: Unique identifier of the entity  \r- `inheritsFrom`: URI of a Channel component from which the value of a property is obtained.  \r- `leftSideSlope`: The slope of the left bank of the cross-section (for 'Trapezoidal' geometry). All units are accepted in CEFACT code.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maxWaterDepth`: The maximum allowable water depth at the cross-section. All units are accepted in CEFACT code.  \r- `name`: The name of this item.  \r- `observedBy`: A relationship to the ID of the device that monitors raw-water properties  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `position`: Object providing information about the distance with the rest of the elements and a relationship with them.  \r- `rightSideSlope`: The slope of the right bank of the cross-section (for 'Trapezoidal' geometry). All units are accepted in CEFACT code.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `specificConductivity`: Water conductivity at the cross-section.  \r- `tag`: An optional text string used to qualify an item  \r- `turbidity`: Water turbidity at the cross-section.  \r- `type`: NGSI-LD Entity Type. It has to be CrossSection.  \r- `waterFlow`: Water flow at the cross-section.  \r- `waterLevel`: Water level at the cross-section.  \r- `waterTemperature`: Water temperature at the cross-section.  \r- `waterVelocity`: Water Velocity at the cross-section.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nCrossSection:    \n  description: 'This entity contains a harmonised description of a generic Cross-Section made for Raw-Water (Open Channels) System Management domain. A CrossSection defines any point of the system where raw-water properties are monitored by a device and/or computed via simulation.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    attachedTo:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship to the ID of the channel where the cross-section ''lives in''. Reference to an entity of type Channel.'    \n      x-ngsi:    \n        type: Relationship    \n    bottomSlope:    \n      description: 'The bottom slope of the channel where the cross-section ''lives in''. All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    bottomWidth:    \n      description: 'The bottom width of the cross-section (for ''Trapezoidal'' geometry). All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    crossSectionGeometry:    \n      description: 'The geometry of the cross-section. Enum:''Circular, Trapezoidal''.'    \n      enum:    \n        - Circular    \n        - Trapezoidal    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    diameter:    \n      description: 'The diameter of a circular cross-section.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    energyHead:    \n      description: 'The total energy head at the cross-section.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &crosssection_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    inheritsFrom:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'URI of a Channel component from which the value of a property is obtained.'    \n      x-ngsi:    \n        type: Relationship    \n    leftSideSlope:    \n      description: 'The slope of the left bank of the cross-section (for ''Trapezoidal'' geometry). All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maxWaterDepth:    \n      description: 'The maximum allowable water depth at the cross-section. All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observedBy:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship to the ID of the device that monitors raw-water properties'    \n      x-ngsi:    \n        model: https://smart-data-models.github.io/dataModel.Device/device-schema.json    \n        type: Relationship    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *crosssection_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    position:    \n      description: 'Object providing information about the distance with the rest of the elements and a relationship with them.'    \n      properties:    \n        distance:    \n          description: 'Property. The distance between this Entity and a reference point (e.g., the most upstream point of the system).'    \n          type: number    \n        refPoint:    \n          anyOf:    \n            - description: 'Property. Identifier format of any NGSI entity.'    \n              maxLength: 256    \n              minLength: 1    \n              pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n              type: string    \n            - description: 'Property. Identifier format of any NGSI entity.'    \n              format: uri    \n              type: string    \n          description: 'Relationship. The reference point distance is measured from.'    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    rightSideSlope:    \n      description: 'The slope of the right bank of the cross-section (for ''Trapezoidal'' geometry). All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    specificConductivity:    \n      description: 'Water conductivity at the cross-section.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    tag:    \n      description: 'An optional text string used to qualify an item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    turbidity:    \n      description: 'Water turbidity at the cross-section.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be CrossSection.'    \n      enum:    \n        - CrossSection    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    waterFlow:    \n      description: 'Water flow at the cross-section.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    waterLevel:    \n      description: 'Water level at the cross-section.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    waterTemperature:    \n      description: 'Water temperature at the cross-section.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    waterVelocity:    \n      description: 'Water Velocity at the cross-section.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n```  \n</details>    \n\r## Example payloads    \n\r#### CrossSection NGSI-v2 key-values Example    \n\rHere is an example of a CrossSection in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CrossSection:id:COGE:70479090\",  \n  \"type\": \"CrossSection\",  \n  \"dateCreated\": \"1990-11-25T18:54:15Z\",  \n  \"dateModified\": \"1999-04-24T10:03:17Z\",  \n  \"source\": \"\",  \n  \"name\": \"L3\",  \n  \"alternateName\": \"Giona\",  \n  \"description\": \"Giona 1\",  \n  \"dataProvider\": \"\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:CrossSection:items:ILNP:15826171\",  \n    \"urn:ngsi-ld:CrossSection:items:RUEP:96519173\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:CrossSection:items:GEPQ:35001404\",  \n    \"urn:ngsi-ld:CrossSection:items:YRBN:14719571\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      28.7415145,  \n      -31.163341  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"attachedTo\": \"urn:ngsi-ld:CrossSection:attachedTo:CTHP:74683243\",  \n  \"observedBy\": \"urn:ngsi-ld:CrossSection:observedBy:WJTI:74120377\",  \n  \"tag\": \"\",  \n  \"position\": {  \n    \"distance\": 864.6,  \n    \"refPoint\": \"urn:ngsi-ld:CrossSection:refPoint:JXFD:60487647\"  \n  },  \n  \"waterFlow\": 12,  \n  \"waterVelocity\": 0.082,  \n  \"waterTemperature\": 9.6,  \n  \"turbidity\": 11.8,  \n  \"specificConductivity\": 260,  \n  \"waterLevel\": 2.9,  \n  \"energyHead\": 0.032,  \n  \"crossSectionGeometry\": \"Trapezoidal\",  \n  \"bottomSlope\": 0.02,  \n  \"leftSideSlope\": 0.02,  \n  \"rightSideSlope\": 0.02,  \n  \"bottomWidth\": 5,  \n  \"diameter\": 0,  \n  \"maxWaterDepth\": 4,  \n  \"inheritsFrom\": \"urn:ngsi-ld:CrossSection:inheritsFrom:JXFD:60487647\"  \n}  \n```  \n\r#### CrossSection NGSI-v2 normalized Example    \n\rHere is an example of a CrossSection in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CrossSection:id:COGE:70479090\",  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"1990-11-25T18:54:15Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"1999-04-24T10:03:17Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"L3\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Giona\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Giona 1\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:CrossSection:items:ILNP:15826171\",  \n      \"urn:ngsi-ld:CrossSection:items:RUEP:96519173\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:CrossSection:items:GEPQ:35001404\",  \n      \"urn:ngsi-ld:CrossSection:items:YRBN:14719571\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        28.7415145,  \n        -31.163341  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"StructuredObject\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"type\": \"CrossSection\",  \n  \"attachedTo\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:CrossSection:attachedTo:CTHP:74683243\"  \n  },  \n  \"observedBy\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:CrossSection:observedBy:WJTI:74120377\"  \n  },  \n  \"tag\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"position\": {  \n    \"type\": \"StructuredObject\",  \n    \"value\": {  \n      \"distance\": 864.6,  \n      \"refPoint\": \"urn:ngsi-ld:CrossSection:refPoint:JXFD:60487647\"  \n    }  \n  },  \n  \"waterFlow\": {  \n    \"type\": \"Number\",  \n    \"value\": 12  \n  },  \n  \"waterVelocity\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.082  \n  },  \n  \"waterTemperature\": {  \n    \"type\": \"Number\",  \n    \"value\": 9.6  \n  },  \n  \"turbidity\": {  \n    \"type\": \"Number\",  \n    \"value\": 11.8  \n  },  \n  \"specificConductivity\": {  \n    \"type\": \"Number\",  \n    \"value\": 260  \n  },  \n  \"waterLevel\": {  \n    \"type\": \"Number\",  \n    \"value\": 2.9  \n  },  \n  \"energyHead\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.032  \n  },  \n  \"crossSectionGeometry\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Trapezoidal\"  \n  },  \n  \"bottomSlope\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.02  \n  },  \n  \"leftSideSlope\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.02  \n  },  \n  \"rightSideSlope\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.02  \n  },  \n  \"bottomWidth\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"diameter\": {  \n    \"type\": \"Number\",  \n    \"value\": 0  \n  },  \n  \"maxWaterDepth\": {  \n    \"type\": \"Number\",  \n    \"value\": 4  \n  },  \n  \"inheritsFrom\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:CrossSection:inheritsFrom:JXFD:60487647\"  \n  }  \n}  \n```  \n\r#### CrossSection NGSI-LD key-values Example    \n\rHere is an example of a CrossSection in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CrossSection:id:COGE:70479090\",  \n  \"type\": \"CrossSection\",  \n  \"dateCreated\": \"1990-11-25T18:54:15Z\",  \n  \"dateModified\": \"1999-04-24T10:03:17Z\",  \n  \"source\": \"\",  \n  \"name\": \"L3\",  \n  \"alternateName\": \"Giona\",  \n  \"description\": \"Giona 1\",  \n  \"dataProvider\": \"\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:CrossSection:items:ILNP:15826171\",  \n    \"urn:ngsi-ld:CrossSection:items:RUEP:96519173\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:CrossSection:items:GEPQ:35001404\",  \n    \"urn:ngsi-ld:CrossSection:items:YRBN:14719571\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      28.7415145,  \n      -31.163341  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"attachedTo\": \"urn:ngsi-ld:CrossSection:attachedTo:CTHP:74683243\",  \n  \"observedBy\": \"urn:ngsi-ld:CrossSection:observedBy:WJTI:74120377\",  \n  \"tag\": \"\",  \n  \"position\": {  \n    \"distance\": 864.6,  \n    \"refPoint\": \"urn:ngsi-ld:CrossSection:refPoint:JXFD:60487647\"  \n  },  \n  \"waterFlow\": 12,  \n  \"waterVelocity\": 0.082,  \n  \"waterTemperature\": 9.6,  \n  \"turbidity\": 11.8,  \n  \"specificConductivity\": 260,  \n  \"waterLevel\": 2.9,  \n  \"energyHead\": 0.032,  \n  \"crossSectionGeometry\": \"Trapezoidal\",  \n  \"bottomSlope\": 0.02,  \n  \"leftSideSlope\": 0.02,  \n  \"rightSideSlope\": 0.02,  \n  \"bottomWidth\": 5,  \n  \"diameter\": 0,  \n  \"maxWaterDepth\": 4,  \n  \"inheritsFrom\": \"urn:ngsi-ld:CrossSection:inheritsFrom:JXFD:60487647\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### CrossSection NGSI-LD normalized Example    \n\rHere is an example of a CrossSection in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:CrossSection:id:COGE:70479090\",  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1990-11-25T18:54:15Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1999-04-24T10:03:17Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"L3\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Giona\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Giona 1\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:CrossSection:items:ILNP:15826171\",  \n      \"urn:ngsi-ld:CrossSection:items:RUEP:96519173\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:CrossSection:items:GEPQ:35001404\",  \n      \"urn:ngsi-ld:CrossSection:items:YRBN:14719571\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        28.7415145,  \n        -31.163341  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"type\": \"CrossSection\",  \n  \"attachedTo\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:CrossSection:attachedTo:CTHP:74683243\"  \n  },  \n  \"observedBy\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:CrossSection:observedBy:WJTI:74120377\"  \n  },  \n  \"tag\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"position\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"distance\": 864.6,  \n      \"refPoint\": \"urn:ngsi-ld:CrossSection:refPoint:JXFD:60487647\"  \n    }  \n  },  \n  \"waterFlow\": {  \n    \"type\": \"Property\",  \n    \"value\": 12  \n  },  \n  \"waterVelocity\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.082  \n  },  \n  \"waterTemperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 9.6  \n  },  \n  \"turbidity\": {  \n    \"type\": \"Property\",  \n    \"value\": 11.8  \n  },  \n  \"specificConductivity\": {  \n    \"type\": \"Property\",  \n    \"value\": 260  \n  },  \n  \"waterLevel\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.9  \n  },  \n  \"energyHead\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.032  \n  },  \n  \"crossSectionGeometry\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Trapezoidal\"  \n  },  \n  \"bottomSlope\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.02  \n  },  \n  \"leftSideSlope\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.02  \n  },  \n  \"rightSideSlope\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.02  \n  },  \n  \"bottomWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"diameter\": {  \n    \"type\": \"Property\",  \n    \"value\": 0  \n  },  \n  \"maxWaterDepth\": {  \n    \"type\": \"Property\",  \n    \"value\": 4  \n  },  \n  \"inheritsFrom\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:CrossSection:inheritsFrom:JXFD:60487647\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: OpenChannel
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic Channel made for Raw-Water (Open Channels) System Management domain.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technical University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              Channel of the Subject OpenChannelManagement.  All fields are non mandatory. More
              info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: OpenChannel  \n===================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/OpenChannel/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic Channel made for Raw-Water (Open Channels) System Management domain.**  \n\rversion: 0.0.3  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `bottomSlope`: The bottom slope of the channel. All units are accepted in CEFACT code.  \r- `bottomWidth`: The bottom width of the channel (for 'Trapezoidal' geometry). All units are accepted in CEFACT code.  \r- `celerity`: Velocity of a surge propagated along the channel after the opening or close of a sluice gate.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `diameter`: The diameter of a circular channel. All units are accepted in CEFACT code.  \r- `downstreamNode`: A relationship indicating the ID of the downstream node (e.g., Junction, Regulation Structure), where the channel ends.  \r- `flowType`: Text defining the type of flow in the channel. Enum:'Free-Surface flow'.  \r- `geometryType`: The geometry of the channel. Enum:'Trapezoidal, Circular'].  \r- `id`: Unique identifier of the entity  \r- `leftSideSlope`: The slope of the left bank of the channel (for 'Trapezoidal' geometry). All units are accepted in CEFACT code.  \r- `length`: The length of the channel. All units are accepted in CEFACT code.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maxWaterDepth`: The maximum allowable water depth in the channel. All units are accepted in CEFACT code.  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `rightSideSlope`: The slope of the right bank of the channel (for 'Trapezoidal' geometry). All units are accepted in CEFACT code.  \r- `roughnessCoefficient`: The Manning\u2019s roughness coefficient.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `tag`: An optional text string used to qualify an item  \r- `travelDuration`: The duration of the surge travelling from the downstream node (i.e., Regulation Structure) to the upstream node.  \r- `type`: NGSI-LD Entity Type. it has to be OpenChannel  \r- `upstreamNode`: A relationship indicating the ID of the upstream node (e.g., Junction, Regulation Structure), where the channel begins.  \r- `waterLoss`: Water leakages/losses from the channel - percentage of flow of the channel or a number (flow).  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOpenChannel:    \n  description: 'This entity contains a harmonised description of a generic Channel made for Raw-Water (Open Channels) System Management domain.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    bottomSlope:    \n      description: 'The bottom slope of the channel. All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    bottomWidth:    \n      description: 'The bottom width of the channel (for ''Trapezoidal'' geometry). All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    celerity:    \n      description: 'Velocity of a surge propagated along the channel after the opening or close of a sluice gate.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    diameter:    \n      description: 'The diameter of a circular channel. All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    downstreamNode:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of the downstream node (e.g., Junction, Regulation Structure), where the channel ends.'    \n      x-ngsi:    \n        type: Relationship    \n    flowType:    \n      description: 'Text defining the type of flow in the channel. Enum:''Free-Surface flow''.'    \n      enum:    \n        - 'Free-Surface flow'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    geometryType:    \n      description: 'The geometry of the channel. Enum:''Trapezoidal, Circular''].'    \n      enum:    \n        - Circular    \n        - Trapezoidal    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &openchannel_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    leftSideSlope:    \n      description: 'The slope of the left bank of the channel (for ''Trapezoidal'' geometry). All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    length:    \n      description: 'The length of the channel. All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maxWaterDepth:    \n      description: 'The maximum allowable water depth in the channel. All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *openchannel_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    rightSideSlope:    \n      description: 'The slope of the right bank of the channel (for ''Trapezoidal'' geometry). All units are accepted in CEFACT code.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    roughnessCoefficient:    \n      description: 'The Manning\u2019s roughness coefficient.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    tag:    \n      description: 'An optional text string used to qualify an item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    travelDuration:    \n      description: 'The duration of the surge travelling from the downstream node (i.e., Regulation Structure) to the upstream node.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. it has to be OpenChannel'    \n      enum:    \n        - OpenChannel    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    upstreamNode:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of the upstream node (e.g., Junction, Regulation Structure), where the channel begins.'    \n      x-ngsi:    \n        type: Relationship    \n    waterLoss:    \n      description: 'Water leakages/losses from the channel - percentage of flow of the channel or a number (flow).'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OpenChannelManagement/blob/master/OpenChannel/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/data-models.OpenChannelManagement/Channel/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.3    \n```  \n</details>    \n\r## Example payloads    \n\r#### OpenChannel NGSI-v2 key-values Example    \n\rHere is an example of a OpenChannel in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Channel:id:IXPY:98787462\",  \n  \"type\": \"OpenChannel\",  \n  \"dateCreated\": \"2021-04-13T21:22:33Z\",  \n  \"dateModified\": \"2021-04-13T23:34:18Z\",  \n  \"source\": \"\",  \n  \"name\": \"Section 3\",  \n  \"alternateName\": \"S-3\",  \n  \"description\": \"Description of the channel S-3\",  \n  \"dataProvider\": \"\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:Channel:items:ZOOU:49614637\",  \n    \"urn:ngsi-ld:Channel:items:ODUZ:33451005\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:Channel:items:YJSD:41528487\",  \n    \"urn:ngsi-ld:Channel:items:MROT:86526209\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -14.2004135,  \n      -147.354695  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"Thesalonikii\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"HELLAS\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \".\"  \n  },  \n  \"areaServed\": \"\",  \n  \"downstreamNode\": \"urn:ngsi-ld:Channel:downstreamNode:DQUS:63966588\",  \n  \"upstreamNode\": \"urn:ngsi-ld:Channel:upstreamNode:MBQH:53312123\",  \n  \"tag\": \"Something special enjoy research institution past western. System spring clearly impact policy.\",  \n  \"geometry\": {  \n    \"geometryType\": \"Trapezoidal\",  \n    \"bottomSlope\": 12,  \n    \"leftSideSlope\": 14,  \n    \"rightSideSlope\": 3,  \n    \"bottomWidth\": 5,  \n    \"diameter\": 0,  \n    \"maxWaterDepth\": 4,  \n    \"roughnessCoefficient\": 0.6,  \n    \"flowType\": \"Free-Surface flow\",  \n    \"celerity\": 5,  \n    \"travelDuration\": 22,  \n    \"waterLoss\": 0.12,  \n    \"length\": 15  \n  }  \n}  \n```  \n\r#### OpenChannel NGSI-v2 normalized Example    \n\rHere is an example of a OpenChannel in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"IXPY.98787462\",  \n  \"type\": \"OpenChannel\",  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-04-13T21:22:33Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-04-13T23:34:18Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Section 3\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"S-3\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Description of the channel S-3\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Channel:items:ZOOU:49614637\",  \n      \"urn:ngsi-ld:Channel:items:ODUZ:33451005\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Channel:items:YJSD:41528487\",  \n      \"urn:ngsi-ld:Channel:items:MROT:86526209\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -14.2004135,  \n        -147.354695  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"Thesalonikii\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"HELLAS\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \".\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"downstreamNode\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:Channel:downstreamNode:DQUS:63966588\"  \n  },  \n  \"upstreamNode\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Channel:upstreamNode:MBQH:53312123\"  \n  },  \n  \"tag\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Something special enjoy research institution past western. System spring clearly impact policy.\"  \n  },  \n  \"geometry\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"geometryType\": \"Trapezoidal\",  \n      \"bottomSlope\": 12,  \n      \"leftSideSlope\": 14,  \n      \"rightSideSlope\": 3,  \n      \"bottomWidth\": 5,  \n      \"diameter\": 0,  \n      \"maxWaterDepth\": 4,  \n      \"roughnessCoefficient\": 0.6,  \n      \"flowType\": \"Free-Surface flow\",  \n      \"celerity\": 5,  \n      \"travelDuration\": 22,  \n      \"waterLoss\": 0.12,  \n      \"length\": 15  \n    }  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OpenChannel NGSI-LD key-values Example    \n\rHere is an example of a OpenChannel in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Channel:id:IXPY:98787462\",  \n    \"type\": \"OpenChannel\",  \n    \"address\": {  \n        \"streetAddress\": \"\",  \n        \"addressLocality\": \"Thesalonikii\",  \n        \"addressRegion\": \"\",  \n        \"addressCountry\": \"HELLAS\",  \n        \"postalCode\": \"\",  \n        \"postOfficeBoxNumber\": \"\",  \n        \"areaServed\": \".\"  \n    },  \n    \"alternateName\": \"S-3\",  \n    \"areaServed\": \"\",  \n    \"dataProvider\": \"\",  \n    \"dateCreated\": \"2021-04-13T21:22:33Z\",  \n    \"dateModified\": \"2021-04-13T23:34:18Z\",  \n    \"description\": \"Description of the channel S-3\",  \n    \"downstreamNode\": \"urn:ngsi-ld:Channel:downstreamNode:DQUS:63966588\",  \n    \"geometry\": {  \n        \"geometryType\": \"Trapezoidal\",  \n        \"bottomSlope\": 12,  \n        \"leftSideSlope\": 14,  \n        \"rightSideSlope\": 3,  \n        \"bottomWidth\": 5,  \n        \"diameter\": 0,  \n        \"maxWaterDepth\": 4,  \n        \"roughnessCoefficient\": 0.6,  \n        \"flowType\": \"Free-Surface flow\",  \n        \"celerity\": 5,  \n        \"travelDuration\": 22,  \n        \"waterLoss\": 0.12,  \n        \"length\": 15  \n    },  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            -14.2004135,  \n            -147.354695  \n        ]  \n    },  \n    \"name\": \"Section 3\",  \n    \"owner\": [  \n        \"urn:ngsi-ld:Channel:items:ZOOU:49614637\",  \n        \"urn:ngsi-ld:Channel:items:ODUZ:33451005\"  \n    ],  \n    \"seeAlso\": [  \n        \"urn:ngsi-ld:Channel:items:YJSD:41528487\",  \n        \"urn:ngsi-ld:Channel:items:MROT:86526209\"  \n    ],  \n    \"source\": \"\",  \n    \"tag\": \"Something special enjoy research institution past western. System spring clearly impact policy.\",  \n    \"upstreamNode\": \"urn:ngsi-ld:Channel:upstreamNode:MBQH:53312123\",  \n    \"@context\": [  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.OpenChannelManagement/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### OpenChannel NGSI-LD normalized Example    \n\rHere is an example of a OpenChannel in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Channel:id:IXPY:98787462\",  \n    \"type\": \"OpenChannel\",  \n    \"address\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"streetAddress\": \"\",  \n            \"addressLocality\": \"Thesalonikii\",  \n            \"addressRegion\": \"\",  \n            \"addressCountry\": \"HELLAS\",  \n            \"postalCode\": \"\",  \n            \"postOfficeBoxNumber\": \"\",  \n            \"areaServed\": \".\"  \n        }  \n    },  \n    \"alternateName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"S-3\"  \n    },  \n    \"areaServed\": {  \n        \"type\": \"Property\",  \n        \"value\": \"\"  \n    },  \n    \"dataProvider\": {  \n        \"type\": \"Property\",  \n        \"value\": \"\"  \n    },  \n    \"dateCreated\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2021-04-13T21:22:33Z\"  \n        }  \n    },  \n    \"dateModified\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2021-04-13T23:34:18Z\"  \n        }  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Description of the channel S-3\"  \n    },  \n    \"downstreamNode\": {  \n        \"type\": \"Relationship\",  \n        \"object\": \"urn:ngsi-ld:Channel:downstreamNode:DQUS:63966588\"  \n    },  \n    \"geometry\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"geometryType\": \"Trapezoidal\",  \n            \"bottomSlope\": 12,  \n            \"leftSideSlope\": 14,  \n            \"rightSideSlope\": 3,  \n            \"bottomWidth\": 5,  \n            \"diameter\": 0,  \n            \"maxWaterDepth\": 4,  \n            \"roughnessCoefficient\": 0.6,  \n            \"flowType\": \"Free-Surface flow\",  \n            \"celerity\": 5,  \n            \"travelDuration\": 22,  \n            \"waterLoss\": 0.12,  \n            \"length\": 15  \n        }  \n    },  \n    \"location\": {  \n        \"type\": \"Georoperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates\": [  \n                -14.2004135,  \n                -147.354695  \n            ]  \n        }  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Section 3\"  \n    },  \n    \"owner\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"urn:ngsi-ld:Channel:items:ZOOU:49614637\",  \n            \"urn:ngsi-ld:Channel:items:ODUZ:33451005\"  \n        ]  \n    },  \n    \"seeAlso\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"urn:ngsi-ld:Channel:items:YJSD:41528487\",  \n            \"urn:ngsi-ld:Channel:items:MROT:86526209\"  \n        ]  \n    },  \n    \"source\": {  \n        \"type\": \"Property\",  \n        \"value\": \"\"  \n    },  \n    \"tag\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Something special enjoy research institution past western. System spring clearly impact policy.\"  \n    },  \n    \"upstreamNode\": {  \n        \"type\": \"Relationship\",  \n        \"object\": \"urn:ngsi-ld:Channel:upstreamNode:MBQH:53312123\"  \n    },  \n    \"@context\": []  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: OpenChannelCurve
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic curve made for Raw-Water (Open Channels) System Management domain.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technical University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              OpenChannelCurve of the Subject OpenChannelManagement.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: OpenChannelCurve  \n========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/OpenChannelCurve/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic curve made for Raw-Water (Open Channels) System Management domain.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `curveType`: Type of curve for spillways and regulation structures. It can be a curve representing: 1) the discharge coefficient (C) as a function of relative weir opening (a/H, a: sluice-gate opening, H: upstream head), 2) the discharge (Q) as a function of the water elevation (H), 3) the design discharge coefficient (Co) as a function of P/Ho, where P is the apron elevation of the OGEE spillway and Ho the design upstrean head, 4) discharge coefficient (C) as a function of H/L, where H is the upstream head and L the legnth of a BROAD-CRESTED spillway, 5) the function C/Co - H/Ho. Enum:'C-a/H, H-Q, Co-P/Ho, C-H/L, C/Co-H/Ho'  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `tag`: An optional text string used to qualify an item  \r- `type`: NGSI Entity Type. It has to be OpenChannelCurve  \r- `xData`: X data points for the curve.  \r- `yData`: Y data points for the curve.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOpenChannelCurve:    \n  description: 'This entity contains a harmonised description of a generic curve made for Raw-Water (Open Channels) System Management domain.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    curveType:    \n      description: 'Type of curve for spillways and regulation structures. It can be a curve representing: 1) the discharge coefficient (C) as a function of relative weir opening (a/H, a: sluice-gate opening, H: upstream head), 2) the discharge (Q) as a function of the water elevation (H), 3) the design discharge coefficient (Co) as a function of P/Ho, where P is the apron elevation of the OGEE spillway and Ho the design upstrean head, 4) discharge coefficient (C) as a function of H/L, where H is the upstream head and L the legnth of a BROAD-CRESTED spillway, 5) the function C/Co - H/Ho. Enum:''C-a/H, H-Q, Co-P/Ho, C-H/L, C/Co-H/Ho'''    \n      enum:    \n        - a/H-C    \n        - H-Q    \n        - Co-P/Ho    \n        - C-H/L    \n        - C/Co-H/Ho    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &openchannelcurve_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *openchannelcurve_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    tag:    \n      description: 'An optional text string used to qualify an item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'NGSI Entity Type. It has to be OpenChannelCurve'    \n      enum:    \n        - OpenChannelCurve    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    xData:    \n      description: 'X data points for the curve.'    \n      items:    \n        type: number    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    yData:    \n      description: 'Y data points for the curve.'    \n      items:    \n        type: number    \n      type: array    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### OpenChannelCurve NGSI-v2 key-values Example    \n\rHere is an example of a OpenChannelCurve in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelCurve:id:FMCV:30717942\",  \n  \"type\": \"OpenChannelCurve\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -71.481035,  \n      -148.255307  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2003-09-09T04:19:40Z\",  \n  \"dateModified\": \"2019-04-13T13:45:31Z\",  \n  \"source\": \"\",  \n  \"name\": \"Curve_1\",  \n  \"alternateName\": \"\",  \n  \"description\": \"Open Channel Curve for a/H ~ C\",  \n  \"dataProvider\": \"NTUA\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelCurve:items:EXUV:99745990\",  \n    \"urn:ngsi-ld:OpenChannelCurve:items:HXOV:60683026\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelCurve:items:IZFN:20714900\",  \n    \"urn:ngsi-ld:OpenChannelCurve:items:RDSS:63995745\"  \n  ],  \n  \"tag\": \"a/H ~ C curve\",  \n  \"curveType\": \"a/H ~ C\",  \n  \"xData\": [  \n    0.001,  \n    0.1,  \n    0.2,  \n    0.3,  \n    0.4,  \n    0.5,  \n    0.6,  \n    0.7  \n  ],  \n  \"yData\": [  \n    0.61,  \n    0.5930,  \n    0.5942,  \n    0.5988,  \n    0.6070,  \n    0.6209,  \n    0.6395,  \n    0.6628  \n  ]  \n}  \n```  \n\r#### OpenChannelCurve NGSI-v2 normalized Example    \n\rHere is an example of a OpenChannelCurve in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelCurve:id:FMCV:30717942\",  \n  \"type\": \"OpenChannelCurve\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -71.481035,  \n        -148.255307  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2003-09-09T04:19:40Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2019-04-13T13:45:31Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Curve_1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Open Channel Curve for a/H-C\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"NTUA\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelCurve:items:EXUV:99745990\",  \n      \"urn:ngsi-ld:OpenChannelCurve:items:HXOV:60683026\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelCurve:items:IZFN:20714900\",  \n      \"urn:ngsi-ld:OpenChannelCurve:items:RDSS:63995745\"  \n    ]  \n  },  \n  \"tag\": {  \n    \"type\": \"Text\",  \n    \"value\": \"a/H-C curve\"  \n  },  \n  \"curveType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"a/H-C\"  \n  },  \n  \"xData\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      0.001,  \n      0.1,  \n      0.2,  \n      0.3,  \n      0.4,  \n      0.5,  \n      0.6,  \n      0.7  \n    ]  \n  },  \n  \"yData\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      0.61,  \n      0.5930,  \n      0.5942,  \n      0.5988,  \n      0.6070,  \n      0.6209,  \n      0.6395,  \n      0.6628  \n    ]  \n  }  \n}  \n```  \n\r#### OpenChannelCurve NGSI-LD key-values Example    \n\rHere is an example of a OpenChannelCurve in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelCurve:id:FMCV:30717942\",  \n  \"type\": \"OpenChannelCurve\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -71.481035,  \n      -148.255307  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2003-09-09T04:19:40Z\",  \n  \"dateModified\": \"2019-04-13T13:45:31Z\",  \n  \"source\": \"\",  \n  \"name\": \"Curve_1\",  \n  \"alternateName\": \"\",  \n  \"description\": \"Open Channel Curve for a/H ~ C\",  \n  \"dataProvider\": \"NTUA\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelCurve:items:EXUV:99745990\",  \n    \"urn:ngsi-ld:OpenChannelCurve:items:HXOV:60683026\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelCurve:items:IZFN:20714900\",  \n    \"urn:ngsi-ld:OpenChannelCurve:items:RDSS:63995745\"  \n  ],  \n  \"tag\": \"a/H ~ C curve\",  \n  \"curveType\": \"a/H ~ C\",  \n  \"xData\": [  \n    0.001,  \n    0.1,  \n    0.2,  \n    0.3,  \n    0.4,  \n    0.5,  \n    0.6,  \n    0.7  \n  ],  \n  \"yData\": [  \n    0.61,  \n    0.5930,  \n    0.5942,  \n    0.5988,  \n    0.6070,  \n    0.6209,  \n    0.6395,  \n    0.6628  \n  ],  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OpenChannelCurve NGSI-LD normalized Example    \n\rHere is an example of a OpenChannelCurve in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -71.481035,  \n        -148.255307  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"id\": \"urn:ngsi-ld:OpenChannelCurve:id:FMCV:30717942\",  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2003-09-09T04:19:40Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2019-04-13T13:45:31Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Curve_1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Open Channel Curve for a/H ~ C\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"NTUA\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelCurve:items:EXUV:99745990\",  \n      \"urn:ngsi-ld:OpenChannelCurve:items:HXOV:60683026\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelCurve:items:IZFN:20714900\",  \n      \"urn:ngsi-ld:OpenChannelCurve:items:RDSS:63995745\"  \n    ]  \n  },  \n  \"type\": \"OpenChannelCurve\",  \n  \"tag\": {  \n    \"type\": \"Property\",  \n    \"value\": \"a/H ~ C curve\"  \n  },  \n  \"curveType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"a/H ~ C\"  \n  },  \n  \"xData\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      0.001,  \n      0.1,  \n      0.2,  \n      0.3,  \n      0.4,  \n      0.5,  \n      0.6,  \n      0.7  \n    ]  \n  },  \n  \"yData\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      0.61,  \n      0.5930,  \n      0.5942,  \n      0.5988,  \n      0.6070,  \n      0.6209,  \n      0.6395,  \n      0.6628  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: OpenChannelFlowRegulation
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic simulation of a series of independent regulation structures to establish specific flow conditions in the conveyance system. It is made for Raw-Water (Open Channels) System Management domain.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technical University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              OpenChannelFlowRegulation of the Subject OpenChannelManagement.  All fields are
              non mandatory. More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: OpenChannelFlowRegulation  \n=================================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/OpenChannelFlowRegulation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic simulation of a series of independent regulation structures to establish specific flow conditions in the conveyance system. It is made for Raw-Water (Open Channels) System Management domain.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `hasRegulationStructures`: Reference to the ID of an entity of type Regulation structure  \r- `hasStructuresSimulations`: Reference to the ID of an entity of type Regulation Structure Simulation  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `runBy`: The ID of who created/triggered the simulation. Reference to an entity of type User  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI-LD Entity Type. It has to be OpenChannelFlowRegulation.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOpenChannelFlowRegulation:    \n  description: 'This entity contains a harmonised description of a generic simulation of a series of independent regulation structures to establish specific flow conditions in the conveyance system. It is made for Raw-Water (Open Channels) System Management domain.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    hasRegulationStructures:    \n      description: 'Reference to the ID of an entity of type Regulation structure'    \n      items:    \n        properties:    \n          targetURI:    \n            anyOf:    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                format: uri    \n                type: string    \n            description: 'Relationship. Reference to the ID of an entity of type Regulation structure'    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    hasStructuresSimulations:    \n      description: 'Reference to the ID of an entity of type Regulation Structure Simulation'    \n      items:    \n        properties:    \n          targetURI:    \n            anyOf:    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                format: uri    \n                type: string    \n            description: 'Relationship. Reference to the ID of an entity of type Regulation Structure Simulation'    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &openchannelflowregulation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *openchannelflowregulation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    runBy:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'The ID of who created/triggered the simulation. Reference to an entity of type User'    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be OpenChannelFlowRegulation.'    \n      enum:    \n        - OpenChannelFlowRegulation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### OpenChannelFlowRegulation NGSI-v2 key-values Example    \n\rHere is an example of a OpenChannelFlowRegulation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelFlowRegulation:id:YLKZ:61350129\",  \n  \"type\": \"OpenChannelFlowRegulation\",  \n  \"dateCreated\": \"2017-05-04T03:59:29Z\",  \n  \"dateModified\": \"2005-01-20T20:06:38Z\",  \n  \"source\": \"\",  \n  \"name\": \"Simulation_Scenario_1\",  \n  \"alternateName\": \"Simulation Scenario 1\",  \n  \"description\": \"Results of Simulation Scenario 1\",  \n  \"dataProvider\": \"NTUA\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:XTSQ:90231127\",  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:ULWE:26707834\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:HJOC:81615506\",  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:BHCJ:50756499\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      57.412865,  \n      -128.395711  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"hasRegulationStructures\": [  \n    {  \n      \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasRegulationStructures:XWXB:83840274\"  \n    }  \n  ],  \n  \"hasStructuresSimulations\": [  \n    {  \n      \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasStructuresSimulations:VPDG:92530159\"  \n    }  \n  ],  \n  \"runBy\": \"urn:ngsi-ld:OpenChannelFlowRegulation:runBy:CMJE:69885698\"  \n}  \n```  \n\r#### OpenChannelFlowRegulation NGSI-v2 normalized Example    \n\rHere is an example of a OpenChannelFlowRegulation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelFlowRegulation:id:YLKZ:61350129\",  \n  \"type\": \"OpenChannelFlowRegulation\",  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2017-05-04T03:59:29Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2005-01-20T20:06:38Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Simulation_Scenario_1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Simulation Scenario 1\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Results of Simulation Scenario 1\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"NTUA\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:XTSQ:90231127\",  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:ULWE:26707834\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:HJOC:81615506\",  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:BHCJ:50756499\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        57.412865,  \n        -128.395711  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"hasRegulationStructures\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasRegulationStructures:XWXB:83840274\"  \n      }  \n    ]  \n  },  \n  \"hasStructuresSimulations\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasStructuresSimulations:VPDG:92530159\"  \n      }  \n    ]  \n  },  \n  \"runBy\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelFlowRegulation:runBy:CMJE:69885698\"  \n  }  \n}  \n```  \n\r#### OpenChannelFlowRegulation NGSI-LD key-values Example    \n\rHere is an example of a OpenChannelFlowRegulation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelFlowRegulation:id:YLKZ:61350129\",  \n  \"type\": \"OpenChannelFlowRegulation\",  \n  \"dateCreated\": \"2017-05-04T03:59:29Z\",  \n  \"dateModified\": \"2005-01-20T20:06:38Z\",  \n  \"source\": \"\",  \n  \"name\": \"Simulation_Scenario_1\",  \n  \"alternateName\": \"Simulation Scenario 1\",  \n  \"description\": \"Results of Simulation Scenario 1\",  \n  \"dataProvider\": \"NTUA\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:XTSQ:90231127\",  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:ULWE:26707834\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:HJOC:81615506\",  \n    \"urn:ngsi-ld:OpenChannelFlowRegulation:items:BHCJ:50756499\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      57.412865,  \n      -128.395711  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"hasRegulationStructures\": [  \n    {  \n      \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasRegulationStructures:XWXB:83840274\"  \n    }  \n  ],  \n  \"hasStructuresSimulations\": [  \n    {  \n      \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasStructuresSimulations:VPDG:92530159\"  \n    }  \n  ],  \n  \"runBy\": \"urn:ngsi-ld:OpenChannelFlowRegulation:runBy:CMJE:69885698\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OpenChannelFlowRegulation NGSI-LD normalized Example    \n\rHere is an example of a OpenChannelFlowRegulation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelFlowRegulation:id:YLKZ:61350129\",  \n  \"type\": \"OpenChannelFlowRegulation\",  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2017-05-04T03:59:29Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2005-01-20T20:06:38Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Simulation_Scenario_1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Simulation Scenario 1\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Results of Simulation Scenario 1\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"NTUA\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:XTSQ:90231127\",  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:ULWE:26707834\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:HJOC:81615506\",  \n      \"urn:ngsi-ld:OpenChannelFlowRegulation:items:BHCJ:50756499\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        57.412865,  \n        -128.395711  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"hasRegulationStructures\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      {  \n        \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasRegulationStructures:XWXB:83840274\"  \n      }  \n    ]  \n  },  \n  \"hasStructuresSimulations\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      {  \n        \"targetUri\": \"urn:ngsi-ld:OpenChannelFlowRegulation:hasStructuresSimulations:VPDG:92530159\"  \n      }  \n    ]  \n  },  \n  \"runBy\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelFlowRegulation:runBy:CMJE:69885698\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: OpenChannelJunction
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic Junction made for Raw-Water (Open Channels) System Management domain. A Junction defines a location where the characteristics of the channel changes, two or more channels come together or split apart, amounts of water are abstracted or inserted to the system etc.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technical University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              OpenChannelCurve of the Subject OpenChannelManagement.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: OpenChannelJunction  \n===========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/OpenChannelJunction/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic Junction made for Raw-Water (Open Channels) System Management domain. A Junction defines a location where the characteristics of the channel changes, two or more channels come together or split apart, amounts of water are abstracted or inserted to the system etc.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `downstreamNode`: A relationship indicating the ID of the downstream node (e.g., Junction, Regulation Structure), where the channel ends.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `observedBy`: A relationship to the ID of the device that monitors raw-water properties  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `position`: Object providing information about the distance with the rest of the elements and a relationship with them.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `tag`: An optional text string used to qualify an item  \r- `type`: NGSI Entity Type. it has to be OpenChannelJunction  \r- `uniqueName`: The name of the junction.  \r- `upstreamNode`: A relationship indicating the ID of the upstream node (e.g., Junction, Regulation Structure), where the channel begins.  \r- `waterInflow`: Water flow inserted to the junction  \r- `waterOutflow`: Water flow abstracted from the junction or diverted to another source  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOpenChannelJunction:    \n  description: 'This entity contains a harmonised description of a generic Junction made for Raw-Water (Open Channels) System Management domain. A Junction defines a location where the characteristics of the channel changes, two or more channels come together or split apart, amounts of water are abstracted or inserted to the system etc.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    downstreamNode:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of the downstream node (e.g., Junction, Regulation Structure), where the channel ends.'    \n      x-ngsi:    \n        type: Relationship    \n    id:    \n      anyOf: &openchanneljunction_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observedBy:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship to the ID of the device that monitors raw-water properties'    \n      x-ngsi:    \n        model: https://smart-data-models.github.io/dataModel.Device/device-schema.json    \n        type: Relationship    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *openchanneljunction_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    position:    \n      description: 'Object providing information about the distance with the rest of the elements and a relationship with them.'    \n      properties:    \n        distance:    \n          description: 'Property. The distance between this Entity and a reference point (e.g., the most upstream point of the system). Units: ''Km'''    \n          type: number    \n        refPoint:    \n          anyOf:    \n            - description: 'Property. Identifier format of any NGSI entity.'    \n              maxLength: 256    \n              minLength: 1    \n              pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n              type: string    \n            - description: 'Property. Identifier format of any NGSI entity.'    \n              format: uri    \n              type: string    \n          description: 'Relationship. The reference point distance is measured from.'    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    tag:    \n      description: 'An optional text string used to qualify an item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'NGSI Entity Type. it has to be OpenChannelJunction'    \n      enum:    \n        - OpenChannelJunction    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    uniqueName:    \n      description: 'The name of the junction.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    upstreamNode:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of the upstream node (e.g., Junction, Regulation Structure), where the channel begins.'    \n      x-ngsi:    \n        type: Relationship    \n    waterInflow:    \n      description: 'Water flow inserted to the junction'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: m3/s    \n    waterOutflow:    \n      description: 'Water flow abstracted from the junction or diverted to another source'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: m3/s    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### OpenChannelJunction NGSI-v2 key-values Example    \n\rHere is an example of a OpenChannelJunction in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelJunction:id:PTOM:78370074\",  \n  \"type\": \"OpenChannelJunction\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -65.2981945,  \n      -22.649102  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"1983-10-11T21:04:39Z\",  \n  \"dateModified\": \"1982-03-03T08:37:57Z\",  \n  \"source\": \"\",  \n  \"name\": \"J1\",  \n  \"alternateName\": \"Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelJunction:items:QPEH:03184806\",  \n    \"urn:ngsi-ld:OpenChannelJunction:items:PUHR:34031741\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelJunction:items:KTWJ:61564622\",  \n    \"urn:ngsi-ld:OpenChannelJunction:items:JOMY:24566116\"  \n  ],  \n  \"position\": {  \n    \"distance\": 160.6,  \n    \"refPoint\": \"urn:ngsi-ld:OpenChannelJunction:refPoint:JXFD:60487647\",  \n    \"downstreamNode\": \"urn:ngsi-ld:OpenChannelJunction:downstreamNode:CBWI:21948924\",  \n    \"upstreamNode\": \"urn:ngsi-ld:OpenChannelJunction:upstreamNode:MWGU:81565938\",  \n    \"observedBy\": \"urn:ngsi-ld:OpenChannelJunction:observedBy:GIWE:80160975\",  \n    \"uniqueName\": \"J1\",  \n    \"tag\": \"\",  \n    \"waterOutflow\": 0.12,  \n    \"waterInflow\": 0.15  \n  }  \n}  \n```  \n\r#### OpenChannelJunction NGSI-v2 normalized Example    \n\rHere is an example of a OpenChannelJunction in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelJunction:id:PTOM:78370074\",  \n  \"type\": \"OpenChannelJunction\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -65.2981945,  \n        -22.649102  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"1983-10-11T21:04:39Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"1982-03-03T08:37:57Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"J1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Open Channel Junction\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelJunction:items:QPEH:03184806\",  \n      \"urn:ngsi-ld:OpenChannelJunction:items:PUHR:34031741\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelJunction:items:KTWJ:61564622\",  \n      \"urn:ngsi-ld:OpenChannelJunction:items:JOMY:24566116\"  \n    ]  \n  },  \n  \"position\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"distance\": 160.6,  \n      \"refPoint\": \"urn:ngsi-ld:OpenChannelJunction:refPoint:JXFD:60487647\"  \n    }  \n  },  \n  \"downstreamNode\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelJunction:downstreamNode:CBWI:21948924\"  \n  },  \n  \"upstreamNode\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelJunction:upstreamNode:MWGU:81565938\"  \n  },  \n  \"observedBy\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelJunction:observedBy:GIWE:80160975\"  \n  },  \n  \"uniqueName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"J1\"  \n  },  \n  \"tag\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"waterOutflow\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.12  \n  },  \n  \"waterInflow\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.15  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OpenChannelJunction NGSI-LD key-values Example    \n\rHere is an example of a OpenChannelJunction in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelJunction:id:PTOM:78370074\",  \n  \"type\": \"OpenChannelJunction\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -65.2981945,  \n      -22.649102  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"1983-10-11T21:04:39Z\",  \n  \"dateModified\": \"1982-03-03T08:37:57Z\",  \n  \"source\": \"\",  \n  \"name\": \"J1\",  \n  \"alternateName\": \"Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelJunction:items:QPEH:03184806\",  \n    \"urn:ngsi-ld:OpenChannelJunction:items:PUHR:34031741\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelJunction:items:KTWJ:61564622\",  \n    \"urn:ngsi-ld:OpenChannelJunction:items:JOMY:24566116\"  \n  ],  \n  \"position\": {  \n    \"distance\": 160.6,  \n    \"refPoint\": \"urn:ngsi-ld:OpenChannelJunction:refPoint:JXFD:60487647\",  \n    \"downstreamNode\": \"urn:ngsi-ld:OpenChannelJunction:downstreamNode:CBWI:21948924\",  \n    \"upstreamNode\": \"urn:ngsi-ld:OpenChannelJunction:upstreamNode:MWGU:81565938\",  \n    \"observedBy\": \"urn:ngsi-ld:OpenChannelJunction:observedBy:GIWE:80160975\",  \n    \"uniqueName\": \"J1\",  \n    \"tag\": \"\",  \n    \"waterOutflow\": 0.12,  \n    \"waterInflow\": 0.15  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OpenChannelJunction NGSI-LD normalized Example    \n\rHere is an example of a OpenChannelJunction in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelJunction:id:PTOM:78370074\",  \n  \"type\": \"OpenChannelJunction\",  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -65.2981945,  \n        -22.649102  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1983-10-11T21:04:39Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1982-03-03T08:37:57Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"J1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Open Channel Junction\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelJunction:items:QPEH:03184806\",  \n      \"urn:ngsi-ld:OpenChannelJunction:items:PUHR:34031741\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelJunction:items:KTWJ:61564622\",  \n      \"urn:ngsi-ld:OpenChannelJunction:items:JOMY:24566116\"  \n    ]  \n  },  \n  \"position\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"distance\": 160.6,  \n      \"refPoint\": \"urn:ngsi-ld:OpenChannelJunction:refPoint:JXFD:60487647\"  \n    }  \n  },  \n  \"downstreamNode\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelJunction:downstreamNode:CBWI:21948924\"  \n  },  \n  \"upstreamNode\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelJunction:upstreamNode:MWGU:81565938\"  \n  },  \n  \"observedBy\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelJunction:observedBy:GIWE:80160975\"  \n  },  \n  \"uniqueName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"J1\"  \n  },  \n  \"tag\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"waterOutflow\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.12  \n  },  \n  \"waterInflow\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.15  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: OpenChannelSystem
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic system made for Raw-Water (Open Channels) System Management domain. This entity represents either a system composed of different components (e.g., channels, junctions, cross-sections etc.) or just a component (e.g., a SluiceGate).
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technical University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              OpenChannelCurve of the Subject OpenChannelManagement.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: OpenChannelSystem  \n=========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/OpenChannelSystem/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic system made for Raw-Water (Open Channels) System Management domain. This entity represents either a system composed of different components (e.g., channels, junctions, cross-sections etc.) or just a component (e.g., a SluiceGate).**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `hasSubSystem`: Reference to an entity of type OpenChannelSystem - an open-channel sub-system.  \r- `id`: Unique identifier of the entity  \r- `isComposedOf`: Reference to the component entities of the open-channel system, of type Channel, Cross-Section, Junction, Regulation Structure, SluiceGate, Spillway.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `mostDownstreamPoint`: A relationship indicating the ID of the most downstream node (e.g., a Junction or a Cross-section) of the system.  \r- `mostUpstreamPoint`: A relationship indicating the ID of the most upstream node (e.g., a Junction or a Cross-section) of the system.  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI-LD Entity Type. It has to be OpenChannelSystem  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOpenChannelSystem:    \n  description: 'This entity contains a harmonised description of a generic system made for Raw-Water (Open Channels) System Management domain. This entity represents either a system composed of different components (e.g., channels, junctions, cross-sections etc.) or just a component (e.g., a SluiceGate).'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    hasSubSystem:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to an entity of type OpenChannelSystem - an open-channel sub-system.'    \n      x-ngsi:    \n        type: Relationship    \n    id:    \n      anyOf: &openchannelsystem_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    isComposedOf:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to the component entities of the open-channel system, of type Channel, Cross-Section, Junction, Regulation Structure, SluiceGate, Spillway.'    \n      x-ngsi:    \n        type: Relationship    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    mostDownstreamPoint:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of the most downstream node (e.g., a Junction or a Cross-section) of the system.'    \n      x-ngsi:    \n        type: Relationship    \n    mostUpstreamPoint:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of the most upstream node (e.g., a Junction or a Cross-section) of the system.'    \n      x-ngsi:    \n        type: Relationship    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *openchannelsystem_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be OpenChannelSystem'    \n      enum:    \n        - OpenChannelSystem    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### OpenChannelSystem NGSI-v2 key-values Example    \n\rHere is an example of a OpenChannelSystem in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelSystem:id:EHTH:11109231\",  \n  \"type\": \"OpenChannelSystem\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      59.820118,  \n      -157.397178  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2020-12-07T21:37:19Z\",  \n  \"dateModified\": \"2021-07-14T01:06:03Z\",  \n  \"source\": \"\",  \n  \"name\": \"L7 - L11\",  \n  \"alternateName\": \"\",  \n  \"description\": \"Conveyance System near Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelSystem:items:WPHN:07387656\",  \n    \"urn:ngsi-ld:OpenChannelSystem:items:JNVF:94407376\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelSystem:items:EZUE:70603867\",  \n    \"urn:ngsi-ld:OpenChannelSystem:items:MWLT:38533440\"  \n  ],  \n  \"isComposedOf\": \"urn:ngsi-ld:OpenChannelSystem:isComposedOf:UMLF:11032914\",  \n  \"hasSubSystem\": \"urn:ngsi-ld:OpenChannelSystem:hasSubSystem:BYUP:86302765\",  \n  \"mostUpstreamPoint\": \"urn:ngsi-ld:OpenChannelSystem:mostUpstreamPoint:YUHY:75075828\",  \n  \"mostDownstreamPoint\": \"urn:ngsi-ld:OpenChannelSystem:mostDownstreamPoint:IXHM:68215414\"  \n}  \n```  \n\r#### OpenChannelSystem NGSI-v2 normalized Example    \n\rHere is an example of a OpenChannelSystem in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelSystem:id:EHTH:11109231\",  \n  \"type\": \"OpenChannelSystem\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        59.820118,  \n        -157.397178  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-12-07T21:37:19Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-07-14T01:06:03Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"L7 - L11\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Conveyance System near Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelSystem:items:WPHN:07387656\",  \n      \"urn:ngsi-ld:OpenChannelSystem:items:JNVF:94407376\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelSystem:items:EZUE:70603867\",  \n      \"urn:ngsi-ld:OpenChannelSystem:items:MWLT:38533440\"  \n    ]  \n  },  \n  \"isComposedOf\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelSystem:isComposedOf:UMLF:11032914\"  \n  },  \n  \"hasSubSystem\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelSystem:hasSubSystem:BYUP:86302765\"  \n  },  \n  \"mostUpstreamPoint\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelSystem:mostUpstreamPoint:YUHY:75075828\"  \n  },  \n  \"mostDownstreamPoint\": {  \n    \"type\": \"object\",  \n    \"value\": \"urn:ngsi-ld:OpenChannelSystem:mostDownstreamPoint:IXHM:68215414\"  \n  }  \n}  \n```  \n\r#### OpenChannelSystem NGSI-LD key-values Example    \n\rHere is an example of a OpenChannelSystem in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelSystem:id:EHTH:11109231\",  \n  \"type\": \"OpenChannelSystem\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      59.820118,  \n      -157.397178  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2020-12-07T21:37:19Z\",  \n  \"dateModified\": \"2021-07-14T01:06:03Z\",  \n  \"source\": \"\",  \n  \"name\": \"L7 - L11\",  \n  \"alternateName\": \"\",  \n  \"description\": \"Conveyance System near Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:OpenChannelSystem:items:WPHN:07387656\",  \n    \"urn:ngsi-ld:OpenChannelSystem:items:JNVF:94407376\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:OpenChannelSystem:items:EZUE:70603867\",  \n    \"urn:ngsi-ld:OpenChannelSystem:items:MWLT:38533440\"  \n  ],  \n  \"isComposedOf\": \"urn:ngsi-ld:OpenChannelSystem:isComposedOf:UMLF:11032914\",  \n  \"hasSubSystem\": \"urn:ngsi-ld:OpenChannelSystem:hasSubSystem:BYUP:86302765\",  \n  \"mostUpstreamPoint\": \"urn:ngsi-ld:OpenChannelSystem:mostUpstreamPoint:YUHY:75075828\",  \n  \"mostDownstreamPoint\": \"urn:ngsi-ld:OpenChannelSystem:mostDownstreamPoint:IXHM:68215414\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OpenChannelSystem NGSI-LD normalized Example    \n\rHere is an example of a OpenChannelSystem in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OpenChannelSystem:id:EHTH:11109231\",  \n  \"type\": \"OpenChannelSystem\",  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        59.820118,  \n        -157.397178  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-12-07T21:37:19Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-07-14T01:06:03Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"L7 - L11\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Conveyance System near Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelSystem:items:WPHN:07387656\",  \n      \"urn:ngsi-ld:OpenChannelSystem:items:JNVF:94407376\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:OpenChannelSystem:items:EZUE:70603867\",  \n      \"urn:ngsi-ld:OpenChannelSystem:items:MWLT:38533440\"  \n    ]  \n  },  \n  \"isComposedOf\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelSystem:isComposedOf:UMLF:11032914\"  \n  },  \n  \"hasSubSystem\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelSystem:hasSubSystem:BYUP:86302765\"  \n  },  \n  \"mostUpstreamPoint\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelSystem:mostUpstreamPoint:YUHY:75075828\"  \n  },  \n  \"mostDownstreamPoint\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:OpenChannelSystem:mostDownstreamPoint:IXHM:68215414\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: RegulationStructure
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic Regulation Structure made for Raw-Water (Open Channels) System Management domain. Regulation structure represents a junction-type object, controlling the water flow in the raw-water system.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technial University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              RegulationStructure of the Subject OpenChannelManagement.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: RegulationStructure  \n===========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/RegulationStructure/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic Regulation Structure made for Raw-Water (Open Channels) System Management domain. Regulation structure represents a junction-type object, controlling the water flow in the raw-water system.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `hasSluiceGate`: Reference to an entity of type Sluice gate.  \r- `hasSpillway`: Reference to an entity of type Sluice gate Spillway.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `numberOfGates`: An integer value defining the number of control gates attached to the regulation structure.  \r- `numberOfSpillways`: An integer value defining the number of spillways attached to the regulation structure.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `position`: Object providing information about the distance with the rest of the elements and a relationship with them.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `tag`: An optional text string used to qualify an item  \r- `teleCommand`: Define whether the regulation structure is controlled remotely or manually. True/False value.  \r- `type`: NGSI-LD Entity Type. It has to be RegulationStructure  \r  \n\rRequired properties  \n- `id`  \r- `name`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nRegulationStructure:    \n  description: 'This entity contains a harmonised description of a generic Regulation Structure made for Raw-Water (Open Channels) System Management domain. Regulation structure represents a junction-type object, controlling the water flow in the raw-water system.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    hasSluiceGate:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to an entity of type Sluice gate.'    \n      x-ngsi:    \n        type: Relationship    \n    hasSpillway:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to an entity of type Sluice gate Spillway.'    \n      x-ngsi:    \n        type: Relationship    \n    id:    \n      anyOf: &regulationstructure_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    numberOfGates:    \n      description: 'An integer value defining the number of control gates attached to the regulation structure.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    numberOfSpillways:    \n      description: 'An integer value defining the number of spillways attached to the regulation structure.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *regulationstructure_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    position:    \n      description: 'Object providing information about the distance with the rest of the elements and a relationship with them.'    \n      properties:    \n        distance:    \n          description: 'Property. The distance between this Entity and a reference point (e.g., the most upstream point of the system). Units:''Km'' '    \n          type: number    \n        refPoint:    \n          anyOf:    \n            - description: 'Property. Identifier format of any NGSI entity.'    \n              maxLength: 256    \n              minLength: 1    \n              pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n              type: string    \n            - description: 'Property. Identifier format of any NGSI entity.'    \n              format: uri    \n              type: string    \n          description: 'Relationship. The reference point distance is measured from.'    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    tag:    \n      description: 'An optional text string used to qualify an item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    teleCommand:    \n      description: 'Define whether the regulation structure is controlled remotely or manually. True/False value.'    \n      type: boolean    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be RegulationStructure'    \n      enum:    \n        - RegulationStructure    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - name    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### RegulationStructure NGSI-v2 key-values Example    \n\rHere is an example of a RegulationStructure in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructure:id:IXHN:40075061\",  \n  \"type\": \"RegulationStructure\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -72.3447045,  \n      44.679442  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"1986-07-26T02:43:28Z\",  \n  \"dateModified\": \"2021-03-21T17:56:26Z\",  \n  \"source\": \"\",  \n  \"name\": \"RS01\",  \n  \"alternateName\": \"RS01 Thivae\",  \n  \"description\": \"Regulation Structure Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:RegulationStructure:items:ASWJ:21246595\",  \n    \"urn:ngsi-ld:RegulationStructure:items:NHFZ:56673870\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:RegulationStructure:items:PLEL:78574823\",  \n    \"urn:ngsi-ld:RegulationStructure:items:IZVF:62633698\"  \n  ],  \n  \"tag\": \"\",  \n  \"numberOfGates\": 1,  \n  \"numberOfSpillways\": 1,  \n  \"teleCommand\": true,  \n  \"hasSluiceGate\": \"urn:ngsi-ld:RegulationStructure:hasSluiceGate:JXFD:60487647\",  \n  \"hasSpillway\": \"urn:ngsi-ld:RegulationStructure:hasSpillway:CBWI:21948924\",  \n  \"position\": {  \n    \"distance\": 160.6,  \n    \"refPoint\": \"urn:ngsi-ld:RegulationStructure:refPoint:JXFD:60487647\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### RegulationStructure NGSI-v2 normalized Example    \n\rHere is an example of a RegulationStructure in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructure:id:IXHN:40075061\",  \n  \"type\": \"RegulationStructure\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -72.3447045,  \n        44.679442  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"1986-07-26T02:43:28Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-21T17:56:26Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"RS01\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"RS01 Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Regulation Structure Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructure:items:ASWJ:21246595\",  \n      \"urn:ngsi-ld:RegulationStructure:items:NHFZ:56673870\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructure:items:PLEL:78574823\",  \n      \"urn:ngsi-ld:RegulationStructure:items:IZVF:62633698\"  \n    ]  \n  },  \n  \"tag\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"numberOfGates\": {  \n    \"type\": \"Number\",  \n    \"value\": 1  \n  },  \n  \"numberOfSpillways\": {  \n    \"type\": \"Number\",  \n    \"value\": 1  \n  },  \n  \"teleCommand\": {  \n    \"type\": \"Boolean\",  \n    \"value\": \"true\"  \n  },  \n  \"hasSluiceGate\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:RegulationStructure:hasSluiceGate:JXFD:60487647\"  \n  },  \n  \"hasSpillway\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:RegulationStructure:hasSpillway:CBWI:21948924\"  \n  },  \n  \"position\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"distance\": 160.6,  \n      \"refPoint\": \"urn:ngsi-ld:RegulationStructure:refPoint:JXFD:60487647\"  \n    }  \n  }  \n}  \n```  \n\r#### RegulationStructure NGSI-LD key-values Example    \n\rHere is an example of a RegulationStructure in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructure:id:IXHN:40075061\",  \n  \"type\": \"RegulationStructure\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -72.3447045,  \n      44.679442  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"1986-07-26T02:43:28Z\",  \n  \"dateModified\": \"2021-03-21T17:56:26Z\",  \n  \"source\": \"\",  \n  \"name\": \"RS01\",  \n  \"alternateName\": \"RS01 Thivae\",  \n  \"description\": \"Regulation Structure Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:RegulationStructure:items:ASWJ:21246595\",  \n    \"urn:ngsi-ld:RegulationStructure:items:NHFZ:56673870\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:RegulationStructure:items:PLEL:78574823\",  \n    \"urn:ngsi-ld:RegulationStructure:items:IZVF:62633698\"  \n  ],  \n  \"tag\": \"\",  \n  \"numberOfGates\": 1,  \n  \"numberOfSpillways\": 1,  \n  \"teleCommand\": true,  \n  \"hasSluiceGate\": \"urn:ngsi-ld:RegulationStructure:hasSluiceGate:JXFD:60487647\",  \n  \"hasSpillway\": \"urn:ngsi-ld:RegulationStructure:hasSpillway:CBWI:21948924\",  \n  \"position\": {  \n    \"distance\": 160.6,  \n    \"refPoint\": \"urn:ngsi-ld:RegulationStructure:refPoint:JXFD:60487647\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### RegulationStructure NGSI-LD normalized Example    \n\rHere is an example of a RegulationStructure in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructure:id:IXHN:40075061\",  \n  \"type\": \"RegulationStructure\",  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -72.3447045,  \n        44.679442  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1986-07-26T02:43:28Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-03-21T17:56:26Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"RS01\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"RS01 Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Regulation Structure Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructure:items:ASWJ:21246595\",  \n      \"urn:ngsi-ld:RegulationStructure:items:NHFZ:56673870\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructure:items:PLEL:78574823\",  \n      \"urn:ngsi-ld:RegulationStructure:items:IZVF:62633698\"  \n    ]  \n  },  \n  \"tag\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"numberOfGates\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"numberOfSpillways\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"teleCommand\": {  \n    \"type\": \"Property\",  \n    \"value\": true  \n  },  \n  \"hasSluiceGate\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:RegulationStructure:hasSluiceGate:JXFD:60487647\"  \n  },  \n  \"hasSpillway\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:RegulationStructure:hasSpillway:CBWI:21948924\"  \n  },  \n  \"position\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"distance\": 160.6,  \n      \"refPoint\": \"urn:ngsi-ld:RegulationStructure:refPoint:JXFD:60487647\"  \n    }  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: RegulationStructureSimulation
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a data model for regulation structure simulation, for Raw-Water (Open Channels) System Management domain.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technical University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              RegulationStructureSimulation of the Subject OpenChannelManagement.  All fields
              are non mandatory. More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: RegulationStructureSimulation  \n=====================================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/RegulationStructureSimulation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a data model for regulation structure simulation, for Raw-Water (Open Channels) System Management domain.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `endSimulationTime`: Time of day in ISO8601 UTC format at which the simulation ends.  \r- `equivalentSluiceOpening`: Equivalent sluice gate opening in the case of multiple sluice gates, estimated as the mean value of the different openings.  \r- `estimatedGateDischargeCoefficient`: Calibrated discharge coefficient of the sluice gate.  \r- `id`: Unique identifier of the entity  \r- `initialConditions`: Description of the set of the modifications to be applied to the Regulation Structure for the simulation.  \r- `inputParameters`: Description of the set of the modifications to be applied to the Regulation Structure for the simulation.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `modelError`: Percentage error between observed and simulated discharge.  \r- `modelledDischarge`: Discharge estimated from the simulation model.  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `simulationOutput`: Description of the set of results of simulation of the regulation structure.  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `spillwayFlow`: Ratio of the spillway discharge to the new total discharge  \r- `startSimulationTime`: Time of day in ISO8601 UTC format at which the simulation begins.  \r- `targetDischarge`: Desirable discharge to be established in the channel, defined by the utility\u2019s operators.  \r- `type`: NGSI-LD Entity Type. It has to be RegulationStructureSimulation.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nRegulationStructureSimulation:    \n  description: 'This entity contains a harmonised description of a data model for regulation structure simulation, for Raw-Water (Open Channels) System Management domain.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    endSimulationTime:    \n      description: 'Time of day in ISO8601 UTC format at which the simulation ends.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    equivalentSluiceOpening:    \n      description: 'Equivalent sluice gate opening in the case of multiple sluice gates, estimated as the mean value of the different openings.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    estimatedGateDischargeCoefficient:    \n      description: 'Calibrated discharge coefficient of the sluice gate.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &regulationstructuresimulation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    initialConditions:    \n      description: 'Description of the set of the modifications to be applied to the Regulation Structure for the simulation.'    \n      items:    \n        properties:    \n          targetURI:    \n            anyOf:    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                format: uri    \n                type: string    \n            description: 'Relationship. A relationship indicating the network component with a simulated property value.'    \n          value:    \n            anyOf:    \n              - type: string    \n              - type: number    \n              - type: boolean    \n          waterAttribute:    \n            description: 'Property: An attribute issued from the data models for Open Channel Management. It follows fully this data model and it could be a property or a relationship. It contains the values for specified properties, as derive from the simulation.'    \n            type: string    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    inputParameters:    \n      description: 'Description of the set of the modifications to be applied to the Regulation Structure for the simulation.'    \n      items:    \n        properties:    \n          targetURI:    \n            anyOf:    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                format: uri    \n                type: string    \n            description: 'Relationship. A relationship indicating the network component with a simulated property value.'    \n          value:    \n            anyOf:    \n              - type: string    \n              - type: number    \n              - type: boolean    \n          waterAttribute:    \n            description: 'Property: An attribute issued from the data models for Open Channel Management. It follows fully this data model and it could be a property or a relationship. It contains the values for specified properties, as derive from the simulation.'    \n            type: string    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    modelError:    \n      description: 'Percentage error between observed and simulated discharge.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    modelledDischarge:    \n      description: 'Discharge estimated from the simulation model.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *regulationstructuresimulation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    simulationOutput:    \n      description: 'Description of the set of results of simulation of the regulation structure.'    \n      items:    \n        properties:    \n          targetURI:    \n            anyOf:    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                maxLength: 256    \n                minLength: 1    \n                pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n                type: string    \n              - description: 'Property. Identifier format of any NGSI entity'    \n                format: uri    \n                type: string    \n            description: 'Relationship. A relationship indicating the network component with a simulated property value.'    \n          value:    \n            anyOf:    \n              - type: string    \n              - type: number    \n              - type: boolean    \n          waterAttribute:    \n            description: 'Property: An attribute issued from the data models for Open Channel Management. It follows fully this data model and it could be a property or a relationship. It contains the values for specified properties, as derive from the simulation.'    \n            enum:    \n              - gateOpening    \n              - waterDischarge    \n              - headDifference    \n              - gateDischargeCoefficient    \n              - waterFlow    \n              - waterVelocity    \n              - celerity    \n              - travelDuration    \n              - waterLevel    \n            type: string    \n        type: object    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    spillwayFlow:    \n      description: 'Ratio of the spillway discharge to the new total discharge'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    startSimulationTime:    \n      description: 'Time of day in ISO8601 UTC format at which the simulation begins.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    targetDischarge:    \n      description: 'Desirable discharge to be established in the channel, defined by the utility\u2019s operators.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be RegulationStructureSimulation.'    \n      enum:    \n        - RegulationStructureSimulation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### RegulationStructureSimulation NGSI-v2 key-values Example    \n\rHere is an example of a RegulationStructureSimulation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructureSimulation:id:SCAU:96103454\",  \n  \"type\": \"RegulationStructureSimulation\",  \n  \"dateCreated\": \"2020-09-09T09:53:49Z\",  \n  \"dateModified\": \"1978-02-07T04:20:08Z\",  \n  \"source\": \"\",  \n  \"name\": \"Regulation_Structure_Simulation_1\",  \n  \"alternateName\": \"Regulation Structure Simulation 1\",  \n  \"description\": \"Regulation Structure Simulation\",  \n  \"dataProvider\": \"NTUA\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:XYXQ:62496984\",  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:ZHVH:90072950\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:HQQG:85737160\",  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:PCHL:09983431\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -27.391838,  \n      -16.801411  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"startSimulationTime\": \"2020-12-19T09:55:49Z\",  \n  \"endSimulationTime\": \"2020-12-19T09:56:49Z\",  \n  \"modelError\": 0.004,  \n  \"targetDischarge\": 14,  \n  \"modelledDischarge\": 14,  \n  \"spillwayFlow\": 0,  \n  \"estimatedGateDischargeCoefficient\": 0.401,  \n  \"equivalentSluiceOpening\": 490,  \n  \"simulationOutput\": [  \n    {  \n      \"waterAttribute\": \"waterLevel\",  \n      \"value\": 3.50,  \n      \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n    },  \n    {  \n      \"waterAttribute\": \"gateOpening\",  \n      \"value\": 450,  \n      \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n    }  \n  ],  \n  \"inputParameters\": [  \n    {  \n      \"waterAttribute\": \"dischargeCoefficient\",  \n      \"value\": 1.9,  \n      \"targetURI\": \"urn:ngsi-ld:Spillway:SP01\"  \n    },  \n    {  \n      \"waterAttribute\": \"gateDischargeCoefficient\",  \n      \"value\": 0.45,  \n      \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n    }  \n  ],  \n  \"initialConditions\": [  \n    {  \n      \"waterAttribute\": \"WaterFlow\",  \n      \"value\": 13.29,  \n      \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n    },  \n    {  \n      \"waterAttribute\": \"Upstream Depth\",  \n      \"value\": 21,  \n      \"targetURI\": \"urn:ngsi-ld:CrossSection:CS02\"  \n    },  \n    {  \n      \"waterAttribute\": \"GateOpening\",  \n      \"value\": 515,  \n      \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n    }  \n  ]  \n}  \n```  \n\r#### RegulationStructureSimulation NGSI-v2 normalized Example    \n\rHere is an example of a RegulationStructureSimulation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructureSimulation:id:SCAU:96103454\",  \n  \"type\": \"RegulationStructureSimulation\",  \n  \"dateCreated\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-09-09T09:53:49Z\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"1978-02-07T04:20:08Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Regulation_Structure_Simulation_1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Regulation Structure Simulation 1\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Regulation Structure Simulation\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"NTUA\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:XYXQ:62496984\",  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:ZHVH:90072950\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:HQQG:85737160\",  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:PCHL:09983431\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -27.391838,  \n        -16.801411  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"startSimulationTime\": {  \n    \"type\": \"Datetime\",  \n    \"value\": \"2020-12-19T09:55:49Z\"  \n  },  \n  \"endSimulationTime\": {  \n    \"type\": \"Datetime\",  \n    \"value\": \"2020-12-19T09:56:49Z\"  \n  },  \n  \"modelError\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.004  \n  },  \n  \"targetDischarge\": {  \n    \"type\": \"Number\",  \n    \"value\": 14  \n  },  \n  \"modelledDischarge\": {  \n    \"type\": \"Number\",  \n    \"value\": 14  \n  },  \n  \"spillwayFlow\": {  \n    \"type\": \"Number\",  \n    \"value\": 0  \n  },  \n  \"estimatedGateDischargeCoefficient\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.401  \n  },  \n  \"equivalentSluiceOpening\": {  \n    \"type\": \"Number\",  \n    \"value\": 490  \n  },  \n  \"simulationOutput\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"waterAttribute\": \"waterLevel\",  \n        \"value\": 3.50,  \n        \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n      },  \n      {  \n        \"waterAttribute\": \"gateOpening\",  \n        \"value\": 450,  \n        \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n      }  \n    ]  \n  },  \n  \"inputParameters\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"waterAttribute\": \"dischargeCoefficient\",  \n        \"value\": 1.9,  \n        \"targetURI\": \"urn:ngsi-ld:Spillway:SP01\"  \n      },  \n      {  \n        \"waterAttribute\": \"gateDischargeCoefficient\",  \n        \"value\": 0.45,  \n        \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n      }  \n    ]  \n  },  \n  \"initialConditions\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      {  \n        \"waterAttribute\": \"WaterFlow\",  \n        \"value\": 13.29,  \n        \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n      },  \n      {  \n        \"waterAttribute\": \"Upstream Depth\",  \n        \"value\": 21,  \n        \"targetURI\": \"urn:ngsi-ld:CrossSection:CS02\"  \n      },  \n      {  \n        \"waterAttribute\": \"GateOpening\",  \n        \"value\": 515,  \n        \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n      }  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### RegulationStructureSimulation NGSI-LD key-values Example    \n\rHere is an example of a RegulationStructureSimulation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructureSimulation:id:SCAU:96103454\",  \n  \"type\": \"RegulationStructureSimulation\",  \n  \"dateCreated\": \"2020-09-09T09:53:49Z\",  \n  \"dateModified\": \"1978-02-07T04:20:08Z\",  \n  \"source\": \"\",  \n  \"name\": \"Regulation_Structure_Simulation_1\",  \n  \"alternateName\": \"Regulation Structure Simulation 1\",  \n  \"description\": \"Regulation Structure Simulation\",  \n  \"dataProvider\": \"NTUA\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:XYXQ:62496984\",  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:ZHVH:90072950\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:HQQG:85737160\",  \n    \"urn:ngsi-ld:RegulationStructureSimulation:items:PCHL:09983431\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -27.391838,  \n      -16.801411  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"startSimulationTime\": \"2020-12-19T09:55:49Z\",  \n  \"endSimulationTime\": \"2020-12-19T09:56:49Z\",  \n  \"modelError\": 0.004,  \n  \"targetDischarge\": 14,  \n  \"modelledDischarge\": 14,  \n  \"spillwayFlow\": 0,  \n  \"estimatedGateDischargeCoefficient\": 0.401,  \n  \"equivalentSluiceOpening\": 490,  \n  \"simulationOutput\": [  \n    {  \n      \"waterAttribute\": \"waterLevel\",  \n      \"value\": 3.50,  \n      \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n    },  \n    {  \n      \"waterAttribute\": \"gateOpening\",  \n      \"value\": 450,  \n      \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n    }  \n  ],  \n  \"inputParameters\": [  \n    {  \n      \"waterAttribute\": \"dischargeCoefficient\",  \n      \"value\": 1.9,  \n      \"targetURI\": \"urn:ngsi-ld:Spillway:SP01\"  \n    },  \n    {  \n      \"waterAttribute\": \"gateDischargeCoefficient\",  \n      \"value\": 0.45,  \n      \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n    }  \n  ],  \n  \"initialConditions\": [  \n    {  \n      \"waterAttribute\": \"WaterFlow\",  \n      \"value\": 13.29,  \n      \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n    },  \n    {  \n      \"waterAttribute\": \"Upstream Depth\",  \n      \"value\": 21,  \n      \"targetURI\": \"urn:ngsi-ld:CrossSection:CS02\"  \n    },  \n    {  \n      \"waterAttribute\": \"GateOpening\",  \n      \"value\": 515,  \n      \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n    }  \n  ],  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### RegulationStructureSimulation NGSI-LD normalized Example    \n\rHere is an example of a RegulationStructureSimulation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:RegulationStructureSimulation:id:SCAU:96103454\",  \n  \"type\": \"RegulationStructureSimulation\",  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-09-09T09:53:49Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1978-02-07T04:20:08Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Regulation_Structure_Simulation_1\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Regulation Structure Simulation 1\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Regulation Structure Simulation\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"NTUA\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:XYXQ:62496984\",  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:ZHVH:90072950\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:HQQG:85737160\",  \n      \"urn:ngsi-ld:RegulationStructureSimulation:items:PCHL:09983431\"  \n    ]  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -27.391838,  \n        -16.801411  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"startSimulationTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Datetime\",  \n      \"@value\": \"2020-12-19T09:55:49Z\"  \n    }  \n  },  \n  \"endSimulationTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Datetime\",  \n      \"@value\": \"2020-12-19T09:56:49Z\"  \n    }  \n  },  \n  \"modelError\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.004  \n  },  \n  \"targetDischarge\": {  \n    \"type\": \"Property\",  \n    \"value\": 14  \n  },  \n  \"modelledDischarge\": {  \n    \"type\": \"Property\",  \n    \"value\": 14  \n  },  \n  \"spillwayFlow\": {  \n    \"type\": \"Property\",  \n    \"value\": 0  \n  },  \n  \"estimatedGateDischargeCoefficient\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.401  \n  },  \n  \"equivalentSluiceOpening\": {  \n    \"type\": \"Property\",  \n    \"value\": 490  \n  },  \n  \"simulationOutput\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      {  \n        \"waterAttribute\": \"waterLevel\",  \n        \"value\": 3.50,  \n        \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n      },  \n      {  \n        \"waterAttribute\": \"gateOpening\",  \n        \"value\": 450,  \n        \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n      }  \n    ]  \n  },  \n  \"inputParameters\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      {  \n        \"waterAttribute\": \"dischargeCoefficient\",  \n        \"value\": 1.9,  \n        \"targetURI\": \"urn:ngsi-ld:Spillway:SP01\"  \n      },  \n      {  \n        \"waterAttribute\": \"gateDischargeCoefficient\",  \n        \"value\": 0.45,  \n        \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n      }  \n    ]  \n  },  \n  \"initialConditions\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      {  \n        \"waterAttribute\": \"WaterFlow\",  \n        \"value\": 13.29,  \n        \"targetURI\": \"urn:ngsi-ld:CrossSection:CS01\"  \n      },  \n      {  \n        \"waterAttribute\": \"Upstream Depth\",  \n        \"value\": 21,  \n        \"targetURI\": \"urn:ngsi-ld:CrossSection:CS02\"  \n      },  \n      {  \n        \"waterAttribute\": \"GateOpening\",  \n        \"value\": 515,  \n        \"targetURI\": \"urn:ngsi-ld:SluiceGate:SG01\"  \n      }  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: SluiceGate
        - MODEL_DESCRIPTION: This entity contains a harmonised description of a generic Sluice Gate made for Raw-Water (Open Channels) System Management domain.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technial University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              RegulationStructure of the Subject OpenChannelManagement.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: SluiceGate  \n==================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/SluiceGate/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description of a generic Sluice Gate made for Raw-Water (Open Channels) System Management domain.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `curveDischargeCoefficient`: The URI of an OpenChannelCurve entity that represents the Discharge Coefficient (C) as a function of relative weir opening (weir opening (a) over upstream depth(H)), C over a/H.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `downstreamControlPoint`: A relationship indicating the ID of an entity of type Cross Section, representing a cross section in a distance where the flow conditions are permanent, downstream of the sluice gate.  \r- `downstreamEndControlPoint`: A relationship indicating the ID of an entity of type Cross Section, representing a cross section just downstream of the sluice gate.  \r- `flowType`: It defines the flow conditions in the gate. It takes the values: 'Overflow' (upstream water level exceeds the weir crest level), 'Free-Flow' (water level is lower than gate edge), 'Submerged Flow' (the rate of flow passing through the gate is regulated by the opening of the gate). Enum:'Overflow, Free-Flow, Submerged-Flow'.  \r- `gateBottomElevation`: Elevation of the bottom (crest) of the gate.  \r- `gateDischargeCoefficient`: Discharge coefficient of the gate that accounts for energy losses as water passes under the gate.  \r- `gateOpening`: The height of gate opening.  \r- `gateWidth`: The width of the sluice gate  \r- `headDifference`: The difference between the upstream depth and the depth just downstream.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `observedBy`: A relationship to the ID of the device that monitors raw-water properties  \r- `orificeDischargeCoefficient`: Orifice discharge coefficient that accounts for energy losses as water passes under the gate, and the downstream tailwater increases so that the gate is no longer flowing freely.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `tag`: An optional text string used to qualify an item  \r- `type`: NGSI-LD Entity Type. It has to be SluiceGate.  \r- `upstreamControlPoint`: A relationship indicating the ID of an entity of type Cross Section, representing a cross section in a distance where the flow conditions are permanent, upstream of the sluice gate.  \r- `upstreamEndControlPoint`: A relationship indicating the ID of an entity of type Cross Section, representing a cross section just upstream of the sluice gate.  \r- `waterDischarge`: The discharge that passes the weir (Q).  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nSluiceGate:    \n  description: 'This entity contains a harmonised description of a generic Sluice Gate made for Raw-Water (Open Channels) System Management domain.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    curveDischargeCoefficient:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'The URI of an OpenChannelCurve entity that represents the Discharge Coefficient (C) as a function of relative weir opening (weir opening (a) over upstream depth(H)), C over a/H.'    \n      x-ngsi:    \n        type: Relationship    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    downstreamControlPoint:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of an entity of type Cross Section, representing a cross section in a distance where the flow conditions are permanent, downstream of the sluice gate.'    \n      x-ngsi:    \n        type: Relationship    \n    downstreamEndControlPoint:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of an entity of type Cross Section, representing a cross section just downstream of the sluice gate.'    \n      x-ngsi:    \n        type: Relationship    \n    flowType:    \n      description: 'It defines the flow conditions in the gate. It takes the values: ''Overflow'' (upstream water level exceeds the weir crest level), ''Free-Flow'' (water level is lower than gate edge), ''Submerged Flow'' (the rate of flow passing through the gate is regulated by the opening of the gate). Enum:''Overflow, Free-Flow, Submerged-Flow''.'    \n      enum:    \n        - Free-Flow    \n        - Overflow    \n        - Submerged-Flow    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    gateBottomElevation:    \n      description: 'Elevation of the bottom (crest) of the gate.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    gateDischargeCoefficient:    \n      description: 'Discharge coefficient of the gate that accounts for energy losses as water passes under the gate.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    gateOpening:    \n      description: 'The height of gate opening.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    gateWidth:    \n      description: 'The width of the sluice gate'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: ' meters.'    \n    headDifference:    \n      description: 'The difference between the upstream depth and the depth just downstream.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &sluicegate_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observedBy:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship to the ID of the device that monitors raw-water properties'    \n      x-ngsi:    \n        model: https://smart-data-models.github.io/dataModel.Device/device-schema.json    \n        type: Relationship    \n    orificeDischargeCoefficient:    \n      description: 'Orifice discharge coefficient that accounts for energy losses as water passes under the gate, and the downstream tailwater increases so that the gate is no longer flowing freely.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *sluicegate_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    tag:    \n      description: 'An optional text string used to qualify an item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be SluiceGate.'    \n      enum:    \n        - SluiceGate    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    upstreamControlPoint:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of an entity of type Cross Section, representing a cross section in a distance where the flow conditions are permanent, upstream of the sluice gate.'    \n      x-ngsi:    \n        type: Relationship    \n    upstreamEndControlPoint:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of an entity of type Cross Section, representing a cross section just upstream of the sluice gate.'    \n      x-ngsi:    \n        type: Relationship    \n    waterDischarge:    \n      description: 'The discharge that passes the weir (Q).'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### SluiceGate NGSI-v2 key-values Example    \n\rHere is an example of a SluiceGate in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:SluiceGate:id:OZDE:42332657\",  \n  \"type\": \"SluiceGate\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -7.578066,  \n      -25.535857  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2021-01-13T19:49:28Z\",  \n  \"dateModified\": \"2021-05-11T14:06:00Z\",  \n  \"source\": \"\",  \n  \"name\": \"SG01\",  \n  \"alternateName\": \"SG01 - Thivae\",  \n  \"description\": \"Sluic Gate 01 - Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:SluiceGate:items:LXOX:42416570\",  \n    \"urn:ngsi-ld:SluiceGate:items:FSOL:83758025\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:SluiceGate:items:ETJS:41829811\",  \n    \"urn:ngsi-ld:SluiceGate:items:IKTE:29167907\"  \n  ],  \n  \"tag\": \"\",  \n  \"gateWidth\": 2.5,  \n  \"gateOpening\": 0.5,  \n  \"gateBottomElevation\": 52.3,  \n  \"gateDischargeCoefficient\": 0.5,  \n  \"orificeDischargeCoefficient\": 0.5,  \n  \"waterDischarge\": 9,  \n  \"headDifference\": 1.5,  \n  \"flowType\": \"Submerged-Flow\",  \n  \"upstreamEndControlPoint\": \"urn:ngsi-ld:SluiceGate:upstreamEndControlPoint:JXFD:60487647\",  \n  \"downstreamEndControlPoint\": \"urn:ngsi-ld:SluiceGate:downstreamEndControlPoint:CBWI:21948924\",  \n  \"upstreamControlPoint\": \"urn:ngsi-ld:SluiceGate:upstreamControlPoint:MWGU:81565938\",  \n  \"downstreamControlPoint\": \"urn:ngsi-ld:SluiceGate:downstreamControlPoint:GIWE:80160975\",  \n  \"observedBy\": \"urn:ngsi-ld:SluiceGate:observedBy:ZWZM:93328711\",  \n  \"curveDischargeCoefficient\": \"urn:ngsi-ld:SluiceGate:curveDischargeCoefficient:ZPPL:48418583\"  \n}  \n```  \n\r#### SluiceGate NGSI-v2 normalized Example    \n\rHere is an example of a SluiceGate in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:SluiceGate:id:OZDE:42332657\",  \n  \"type\": \"SluiceGate\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -7.578066,  \n        -25.535857  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"1972-01-13T19:49:28Z\"  \n  },  \n  \"dateModified\":  {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2000-05-11T14:06:00Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"SG01\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"SG01 - Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Sluice Gate 01 - Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:SluiceGate:items:LXOX:42416570\",  \n      \"urn:ngsi-ld:SluiceGate:items:FSOL:83758025\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:SluiceGate:items:ETJS:41829811\",  \n      \"urn:ngsi-ld:SluiceGate:items:IKTE:29167907\"  \n    ]  \n  },  \n  \"tag\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"gateType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Sluice Gate\"  \n  },  \n  \"gateWidth\": {  \n    \"type\": \"Number\",  \n    \"value\": 2.5  \n  },  \n  \"gateOpening\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.5  \n  },  \n  \"gateBottomElevation\": {  \n    \"type\": \"Number\",  \n    \"value\": 52.3  \n  },  \n  \"gateDischargeCoefficient\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.5  \n  },  \n  \"orificeDischargeCoefficient\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.5  \n  },  \n  \"waterDischarge\": {  \n    \"type\": \"Number\",  \n    \"value\": 9  \n  },  \n  \"headDifference\": {  \n    \"type\": \"Number\",  \n    \"value\": 1.5  \n  },  \n  \"flowType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Submerged-Flow\"  \n  },  \n  \"upstreamEndControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:SluiceGate:upstreamEndControlPoint:JXFD:60487647\"  \n  },  \n  \"downstreamEndControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:SluiceGate:downstreamEndControlPoint:CBWI:21948924\"  \n  },  \n  \"upstreamControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:SluiceGate:upstreamControlPoint:MWGU:81565938\"  \n  },  \n  \"downstreamControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SluiceGate:downstreamControlPoint:GIWE:80160975\"  \n  },  \n  \"observedBy\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:SluiceGate:observedBy:ZWZM:93328711\"  \n  },  \n  \"curveDischargeCoefficient\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:SluiceGate:curveDischargeCoefficient:ZPPL:48418583\"  \n  }  \n}  \n```  \n\r#### SluiceGate NGSI-LD key-values Example    \n\rHere is an example of a SluiceGate in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:SluiceGate:id:OZDE:42332657\",  \n  \"type\": \"SluiceGate\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -7.578066,  \n      -25.535857  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2021-01-13T19:49:28Z\",  \n  \"dateModified\": \"2021-05-11T14:06:00Z\",  \n  \"source\": \"\",  \n  \"name\": \"SG01\",  \n  \"alternateName\": \"SG01 - Thivae\",  \n  \"description\": \"Sluic Gate 01 - Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:SluiceGate:items:LXOX:42416570\",  \n    \"urn:ngsi-ld:SluiceGate:items:FSOL:83758025\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:SluiceGate:items:ETJS:41829811\",  \n    \"urn:ngsi-ld:SluiceGate:items:IKTE:29167907\"  \n  ],  \n  \"tag\": \"\",  \n  \"gateWidth\": 2.5,  \n  \"gateOpening\": 0.5,  \n  \"gateBottomElevation\": 52.3,  \n  \"gateDischargeCoefficient\": 0.5,  \n  \"orificeDischargeCoefficient\": 0.5,  \n  \"waterDischarge\": 9,  \n  \"headDifference\": 1.5,  \n  \"flowType\": \"Submerged-Flow\",  \n  \"upstreamEndControlPoint\": \"urn:ngsi-ld:SluiceGate:upstreamEndControlPoint:JXFD:60487647\",  \n  \"downstreamEndControlPoint\": \"urn:ngsi-ld:SluiceGate:downstreamEndControlPoint:CBWI:21948924\",  \n  \"upstreamControlPoint\": \"urn:ngsi-ld:SluiceGate:upstreamControlPoint:MWGU:81565938\",  \n  \"downstreamControlPoint\": \"urn:ngsi-ld:SluiceGate:downstreamControlPoint:GIWE:80160975\",  \n  \"observedBy\": \"urn:ngsi-ld:SluiceGate:observedBy:ZWZM:93328711\",  \n  \"curveDischargeCoefficient\": \"urn:ngsi-ld:SluiceGate:curveDischargeCoefficient:ZPPL:48418583\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### SluiceGate NGSI-LD normalized Example    \n\rHere is an example of a SluiceGate in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:SluiceGate:id:OZDE:42332657\",  \n  \"type\": \"SluiceGate\",  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -7.578066,  \n        -25.535857  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"1972-01-13T19:49:28Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2000-05-11T14:06:00Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SG01\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SG01 - Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Sluice Gate 01 - Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:SluiceGate:items:LXOX:42416570\",  \n      \"urn:ngsi-ld:SluiceGate:items:FSOL:83758025\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:SluiceGate:items:ETJS:41829811\",  \n      \"urn:ngsi-ld:SluiceGate:items:IKTE:29167907\"  \n    ]  \n  },  \n  \"tag\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"gateType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Sluice Gate\"  \n  },  \n  \"gateWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 2.5  \n  },  \n  \"gateOpening\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.5  \n  },  \n  \"gateBottomElevation\": {  \n    \"type\": \"Property\",  \n    \"value\": 52.3  \n  },  \n  \"gateDischargeCoefficient\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.5  \n  },  \n  \"orificeDischargeCoefficient\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.5  \n  },  \n  \"waterDischarge\": {  \n    \"type\": \"Property\",  \n    \"value\": 9  \n  },  \n  \"headDifference\": {  \n    \"type\": \"Property\",  \n    \"value\": 1.5  \n  },  \n  \"flowType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Submerged-Flow\"  \n  },  \n  \"upstreamEndControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SluiceGate:upstreamEndControlPoint:JXFD:60487647\"  \n  },  \n  \"downstreamEndControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SluiceGate:downstreamEndControlPoint:CBWI:21948924\"  \n  },  \n  \"upstreamControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SluiceGate:upstreamControlPoint:MWGU:81565938\"  \n  },  \n  \"downstreamControlPoint\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SluiceGate:downstreamControlPoint:GIWE:80160975\"  \n  },  \n  \"observedBy\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SluiceGate:observedBy:ZWZM:93328711\"  \n  },  \n  \"curveDischargeCoefficient\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:SluiceGate:curveDischargeCoefficient:ZPPL:48418583\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: Spillway
        - MODEL_DESCRIPTION: This entity contains a harmonised description for a generic Spillway made for Raw-Water (Open Channels) System Management domain. Spillway represents a junction-type object, controlling the release of water from a dam or regulation structure downstream.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: EYDAP Greek Water Company, comments: null, description: 'Raw-water (open
                channel) monitoring, management and control', mail: pkossier@mail.ntua.gr, organization: National
                Technial University of Athens, project: Fiware4Water, startDate: June 2019}
            description: This is a compilation list of the current adopters of the data model
              RegulationStructure of the Subject OpenChannelManagement.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: Spillway  \n================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OpenChannelManagement/blob/master/Spillway/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised description for a generic Spillway made for Raw-Water (Open Channels) System Management domain. Spillway represents a junction-type object, controlling the release of water from a dam or regulation structure downstream.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `apronElevation`: The elevation at the bottom of the ogee spillway structure (P), just upstream of the spillway.  \r- `apronLength`: The total length of the spillway bottom  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `controlCrossSection`: A relationship indicating the ID of an entity of type Cross Section, indicating the cross section that controls the flow over the Spillway.  \r- `crestElevation`: The crest elevation of the Spillway. Required only for 'Broad-Crested', 'Ogee' and 'Sharp-Crested'  \r- `crestLength`: The length of the Spillway equals to the total length through which water passes. Required only for 'Broad-Crested', 'Ogee' and 'Sharp-Crested'  \r- `curveDesignDischargeCoefficient`: The URI of an OpenChannelCurve entity that represents the design discharge coefficient (Co) as a function of apron Elevation over design upstream head (Co-P/Ho).  \r- `curveDischargeCoefficient`: The URI of an OpenChannelCurve entity that represents the discharge coefficient (C) as a function of upstream head (H) and spillway geometry. For instance, discharge coefficient as a function of upstream head over spillway width (C-H/L), or C/Co-H/Ho.  \r- `curveElevationDischarge`: The URI of an OpenChannelCurve entity that represents discharge (Q) as a function of water elevation (H).  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `designDischarge`: The design discharge (Qo) of the Spillway  \r- `designDischargeCoefficient`: The discharge coefficient (Co) for energy losses for the design discharge (Ho).  \r- `designHead`: The total upstream energy head for which the spillway is designed (Ho) for 'Ogee Spillway'  \r- `dischargeCoefficient`: The discharge coefficient for energy losses as water enters, flows and exits the spillway  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maxFloodElevation`: The maximum elevation of water that can pass the spillway.  \r- `name`: The name of this item.  \r- `numberAbutments`: The number of abutments of an ogee spillway. Only for 'Ogee' type.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `spillwayType`: The type of the spillway. In the case of \u201cSpecified Spillway\u201d, only \u201cElevation \u2013 discharge\u201d curve is required. Enum:'Broad-Crested, Ogee, Sharp-Crested, Specified Spillway'.  \r- `spillwayWidth`: The width of the spillway (m). Only for 'Broad-Crested' type  \r- `tag`: An optional text string used to qualify an item  \r- `type`: NGSI Entity Type. It has to be Spillway.  \r- `waterDischarge`: The discharge over the spillway (Q)  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nSpillway:    \n  description: 'This entity contains a harmonised description for a generic Spillway made for Raw-Water (Open Channels) System Management domain. Spillway represents a junction-type object, controlling the release of water from a dam or regulation structure downstream.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    apronElevation:    \n      description: 'The elevation at the bottom of the ogee spillway structure (P), just upstream of the spillway.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    apronLength:    \n      description: 'The total length of the spillway bottom'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: meters    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    controlCrossSection:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A relationship indicating the ID of an entity of type Cross Section, indicating the cross section that controls the flow over the Spillway.'    \n      x-ngsi:    \n        type: Relationship    \n    crestElevation:    \n      description: 'The crest elevation of the Spillway. Required only for ''Broad-Crested'', ''Ogee'' and ''Sharp-Crested'''    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: meters    \n    crestLength:    \n      description: 'The length of the Spillway equals to the total length through which water passes. Required only for ''Broad-Crested'', ''Ogee'' and ''Sharp-Crested'''    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: meters    \n    curveDesignDischargeCoefficient:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'The URI of an OpenChannelCurve entity that represents the design discharge coefficient (Co) as a function of apron Elevation over design upstream head (Co-P/Ho).'    \n      x-ngsi:    \n        type: Relationship    \n    curveDischargeCoefficient:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'The URI of an OpenChannelCurve entity that represents the discharge coefficient (C) as a function of upstream head (H) and spillway geometry. For instance, discharge coefficient as a function of upstream head over spillway width (C-H/L), or C/Co-H/Ho.'    \n      x-ngsi:    \n        type: Relationship    \n    curveElevationDischarge:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'The URI of an OpenChannelCurve entity that represents discharge (Q) as a function of water elevation (H).'    \n      x-ngsi:    \n        type: Relationship    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    designDischarge:    \n      description: 'The design discharge (Qo) of the Spillway'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: ' m^3/s.'    \n    designDischargeCoefficient:    \n      description: 'The discharge coefficient (Co) for energy losses for the design discharge (Ho).'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    designHead:    \n      description: 'The total upstream energy head for which the spillway is designed (Ho) for ''Ogee Spillway'''    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: meters    \n    dischargeCoefficient:    \n      description: 'The discharge coefficient for energy losses as water enters, flows and exits the spillway'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: m^0.5/s.    \n    id:    \n      anyOf: &spillway_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maxFloodElevation:    \n      description: 'The maximum elevation of water that can pass the spillway.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    numberAbutments:    \n      description: 'The number of abutments of an ogee spillway. Only for ''Ogee'' type.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *spillway_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    spillwayType:    \n      description: 'The type of the spillway. In the case of \u201cSpecified Spillway\u201d, only \u201cElevation \u2013 discharge\u201d curve is required. Enum:''Broad-Crested, Ogee, Sharp-Crested, Specified Spillway''.'    \n      enum:    \n        - Broad-Crested    \n        - Ogee    \n        - Sharp-Crested    \n        - 'Specified Spillway'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    spillwayWidth:    \n      description: 'The width of the spillway (m). Only for ''Broad-Crested'' type'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: meters.    \n    tag:    \n      description: 'An optional text string used to qualify an item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'NGSI Entity Type. It has to be Spillway.'    \n      enum:    \n        - Spillway    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    waterDischarge:    \n      description: 'The discharge over the spillway (Q)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: ' m^3/s'    \n  required:    \n    - id    \n    - location    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### Spillway NGSI-v2 key-values Example    \n\rHere is an example of a Spillway in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Spillway:id:FFPG:06271993\",  \n  \"type\": \"Spillway\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      60.3603485,  \n      -129.682253  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2020-10-12T04:27:47Z\",  \n  \"dateModified\": \"2021-09-26T16:22:05Z\",  \n  \"source\": \"\",  \n  \"name\": \"SP01\",  \n  \"alternateName\": \"SP01 - Thivae\",  \n  \"description\": \"Spillway 01 - Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:Spillway:items:OFPV:04640010\",  \n    \"urn:ngsi-ld:Spillway:items:BFAT:33357858\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:Spillway:items:VLIF:47226224\",  \n    \"urn:ngsi-ld:Spillway:items:BDSZ:68275691\"  \n  ],  \n  \"tag\": \"\",  \n  \"spillwayType\": \"Ogee\",  \n  \"crestElevation\": 26.4,  \n  \"crestLength\": 5,  \n  \"spillwayWidth\": 5,  \n  \"numberAbutments\": 2,  \n  \"apronElevation\": 22,  \n  \"apronLength\": 5,  \n  \"dischargeCoefficient\": 5,  \n  \"designHead\": 30.4,  \n  \"designDischarge\": 20,  \n  \"designDischargeCoefficient\": 0.4,  \n  \"maxFloodElevation\": 4,  \n  \"waterDischarge\": 9,  \n  \"controlCrossSection\": \"urn:ngsi-ld:Spillway:controlCrossSection:JXFD:60487647\",  \n  \"curveElevationDischarge\": \"urn:ngsi-ld:Spillway:curveElevationDischarge:CBWI:21948924\",  \n  \"curveDischargeCoefficient\": \"urn:ngsi-ld:Spillway:curveDischargeCoefficient:MWGU:81565938\",  \n  \"curveDesignDischargeCoefficient\": \"urn:ngsi-ld:Spillway:curveDesignDischargeCoefficient:GIWE:80160975\"  \n}  \n```  \n\r#### Spillway NGSI-v2 normalized Example    \n\rHere is an example of a Spillway in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Spillway:id:FFPG:06271993\",  \n  \"type\": \"Spillway\",  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        60.3603485,  \n        -129.682253  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\":{  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-10-12T04:27:47Z\"  \n  },  \n  \"dateModified\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2021-09-26T16:22:05Z\"  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"SP01\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"SP01 - Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Spillway 01 - Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Text\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Spillway:items:OFPV:04640010\",  \n      \"urn:ngsi-ld:Spillway:items:BFAT:33357858\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Spillway:items:VLIF:47226224\",  \n      \"urn:ngsi-ld:Spillway:items:BDSZ:68275691\"  \n    ]  \n  },  \n  \"tag\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"spillwayType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Ogee\"  \n  },  \n  \"crestElevation\": {  \n    \"type\": \"Number\",  \n    \"value\": 26.4  \n  },  \n  \"crestLength\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"spillwayWidth\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"numberAbutments\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"apronElevation\": {  \n    \"type\": \"Number\",  \n    \"value\": 22  \n  },  \n  \"apronLength\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"dischargeCoefficient\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"designHead\": {  \n    \"type\": \"Number\",  \n    \"value\": 30.4  \n  },  \n  \"designDischarge\": {  \n    \"type\": \"Number\",  \n    \"value\": 20  \n  },  \n  \"designDischargeCoefficient\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.4  \n  },  \n  \"maxFloodElevation\": {  \n    \"type\": \"Number\",  \n    \"value\": 4  \n  },  \n  \"waterDischarge\": {  \n    \"type\": \"Number\",  \n    \"value\": 9  \n  },    \n  \"controlCrossSection\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:controlCrossSection:JXFD:60487647\"  \n  },  \n  \"curveElevationDischarge\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:curveElevationDischarge:CBWI:21948924\"  \n  },  \n  \"curveDischargeCoefficient\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:curveDischargeCoefficient:MWGU:81565938\"  \n  },  \n  \"curveDesignDischargeCoefficient\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:curveDesignDischargeCoefficient:GIWE:80160975\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### Spillway NGSI-LD key-values Example    \n\rHere is an example of a Spillway in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Spillway:id:FFPG:06271993\",  \n  \"type\": \"Spillway\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      60.3603485,  \n      -129.682253  \n    ]  \n  },  \n  \"address\": {  \n    \"streetAddress\": \"\",  \n    \"addressLocality\": \"\",  \n    \"addressRegion\": \"\",  \n    \"addressCountry\": \"\",  \n    \"postalCode\": \"\",  \n    \"postOfficeBoxNumber\": \"\",  \n    \"areaServed\": \"\"  \n  },  \n  \"areaServed\": \"\",  \n  \"dateCreated\": \"2020-10-12T04:27:47Z\",  \n  \"dateModified\": \"2021-09-26T16:22:05Z\",  \n  \"source\": \"\",  \n  \"name\": \"SP01\",  \n  \"alternateName\": \"SP01 - Thivae\",  \n  \"description\": \"Spillway 01 - Thivae\",  \n  \"dataProvider\": \"EYDAP\",  \n  \"owner\": [  \n    \"urn:ngsi-ld:Spillway:items:OFPV:04640010\",  \n    \"urn:ngsi-ld:Spillway:items:BFAT:33357858\"  \n  ],  \n  \"seeAlso\": [  \n    \"urn:ngsi-ld:Spillway:items:VLIF:47226224\",  \n    \"urn:ngsi-ld:Spillway:items:BDSZ:68275691\"  \n  ],  \n  \"tag\": \"\",  \n  \"spillwayType\": \"Ogee\",  \n  \"crestElevation\": 26.4,  \n  \"crestLength\": 5,  \n  \"spillwayWidth\": 5,  \n  \"numberAbutments\": 2,  \n  \"apronElevation\": 22,  \n  \"apronLength\": 5,  \n  \"dischargeCoefficient\": 5,  \n  \"designHead\": 30.4,  \n  \"designDischarge\": 20,  \n  \"designDischargeCoefficient\": 0.4,  \n  \"maxFloodElevation\": 4,  \n  \"waterDischarge\": 9,  \n  \"controlCrossSection\": \"urn:ngsi-ld:Spillway:controlCrossSection:JXFD:60487647\",  \n  \"curveElevationDischarge\": \"urn:ngsi-ld:Spillway:curveElevationDischarge:CBWI:21948924\",  \n  \"curveDischargeCoefficient\": \"urn:ngsi-ld:Spillway:curveDischargeCoefficient:MWGU:81565938\",  \n  \"curveDesignDischargeCoefficient\": \"urn:ngsi-ld:Spillway:curveDesignDischargeCoefficient:GIWE:80160975\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### Spillway NGSI-LD normalized Example    \n\rHere is an example of a Spillway in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Spillway:id:FFPG:06271993\",  \n  \"type\": \"Spillway\",  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        60.3603485,  \n        -129.682253  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"streetAddress\": \"\",  \n      \"addressLocality\": \"\",  \n      \"addressRegion\": \"\",  \n      \"addressCountry\": \"\",  \n      \"postalCode\": \"\",  \n      \"postOfficeBoxNumber\": \"\",  \n      \"areaServed\": \"\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"dateCreated\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-10-12T04:27:47Z\"  \n    }  \n  },  \n  \"dateModified\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-09-26T16:22:05Z\"  \n    }  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SP01\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SP01 - Thivae\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Spillway 01 - Thivae\"  \n  },  \n  \"dataProvider\": {  \n    \"type\": \"Property\",  \n    \"value\": \"EYDAP\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Spillway:items:OFPV:04640010\",  \n      \"urn:ngsi-ld:Spillway:items:BFAT:33357858\"  \n    ]  \n  },  \n  \"seeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:Spillway:items:VLIF:47226224\",  \n      \"urn:ngsi-ld:Spillway:items:BDSZ:68275691\"  \n    ]  \n  },  \n  \"tag\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"spillwayType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Ogee\"  \n  },  \n  \"crestElevation\": {  \n    \"type\": \"Property\",  \n    \"value\": 26.4  \n  },  \n  \"crestLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"spillwayWidth\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"numberAbutments\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"apronElevation\": {  \n    \"type\": \"Property\",  \n    \"value\": 22  \n  },  \n  \"apronLength\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"dischargeCoefficient\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"designHead\": {  \n    \"type\": \"Property\",  \n    \"value\": 30.4  \n  },  \n  \"designDischarge\": {  \n    \"type\": \"Property\",  \n    \"value\": 20  \n  },  \n  \"designDischargeCoefficient\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.4  \n  },  \n  \"maxFloodElevation\": {  \n    \"type\": \"Property\",  \n    \"value\": 4  \n  },  \n  \"waterDischarge\": {  \n    \"type\": \"Property\",  \n    \"value\": 9  \n  },    \n  \"controlCrossSection\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:controlCrossSection:JXFD:60487647\"  \n  },  \n  \"curveElevationDischarge\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:curveElevationDischarge:CBWI:21948924\"  \n  },  \n  \"curveDischargeCoefficient\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:curveDischargeCoefficient:MWGU:81565938\"  \n  },  \n  \"curveDesignDischargeCoefficient\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:Spillway:curveDesignDischargeCoefficient:GIWE:80160975\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: WasteWater
      MODELS:
        - MODEL_NAME: Blower
        - MODEL_DESCRIPTION: This entity contains an harmonised description of a Blower made for the Wastewater treatment domain. The entity represents a Blower that are used for aeration purposes in the wastewater treatment process. Important parameters are measured to regulate and measure the amount of airflow is being provided to the aeration tank in the bioreactor. Energy consumption of a blower is also important information for real-time control and optimisation of the wastewater treatment plant.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Siddharth Seshan, comments: null, description: Demonstration of Fiware
                while integrating to the legacy system of the Amsterdam West WWTP in an EU project
                called Fiware4Water. The Blower data model is currently being used in collaboration
                with Waternet., mail: siddharth.seshan@kwrwater.nl, organization: KWR Water Research
                Institue, project: Fiware4Water, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              Blower of the Subject dataModel.WasteWater. All fields are non mandatory. More info
              at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: Blower  \n==============\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WasteWater/blob/master/Blower/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains an harmonised description of a Blower made for the Wastewater treatment domain. The entity represents a Blower that are used for aeration purposes in the wastewater treatment process. Important parameters are measured to regulate and measure the amount of airflow is being provided to the aeration tank in the bioreactor. Energy consumption of a blower is also important information for real-time control and optimisation of the wastewater treatment plant.**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `airflow`: Airflow blown by a blower.  \r- `airflowEstimation`: Airflow estimation by AI soft sensor simulation.  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `endsAt`: A relationship indicating the entity the blower is connected to in the downstream point.  \r- `energy`: Energy consumed by a blower.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `pressure`: Pressure measurement in the blower.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `startsAt`: A relationship indicating the entity the blower is connected to in the upstream point.  \r- `type`: NGSI-LD Entity Type. It has to be Blower  \r  \n\rRequired properties  \n- `description`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBlower:    \n  description: 'This entity contains an harmonised description of a Blower made for the Wastewater treatment domain. The entity represents a Blower that are used for aeration purposes in the wastewater treatment process. Important parameters are measured to regulate and measure the amount of airflow is being provided to the aeration tank in the bioreactor. Energy consumption of a blower is also important information for real-time control and optimisation of the wastewater treatment plant.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    airflow:    \n      description: 'Airflow blown by a blower.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' m/s'    \n    airflowEstimation:    \n      description: 'Airflow estimation by AI soft sensor simulation.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' m/s'    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    endsAt:    \n      description: 'A relationship indicating the entity the blower is connected to in the downstream point.'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    energy:    \n      description: 'Energy consumed by a blower.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' kW'    \n    id:    \n      anyOf: &blower_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *blower_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    pressure:    \n      description: 'Pressure measurement in the blower.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' kPa'    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    startsAt:    \n      description: 'A relationship indicating the entity the blower is connected to in the upstream point.'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be Blower'    \n      enum:    \n        - Blower    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - description    \n  type: object    \n```  \n</details>    \n\r## Example payloads    \n\r#### Blower NGSI-v2 key-values Example    \n\rHere is an example of a Blower in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Blower:Blower2\",  \n  \"type\": \"Blower\",  \n  \"name\": \"Blower 2\",  \n  \"description\": \"Blower 2 providing aeration for wastewater treatment process.\",  \n  \"airflow\": 368.75,  \n  \"energy\": 229.89,  \n  \"pressure\": 84.06  \n}  \n```  \n\r#### Blower NGSI-v2 normalized Example    \n\rHere is an example of a Blower in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Blower:Blower2\",  \n  \"type\": \"Blower\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Blower 2\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Blower 2 providing aeration for wastewater treatment process.\"  \n  },  \n  \"airflow\": {  \n    \"type\": \"Number\",  \n    \"value\": 368.75  \n  },  \n  \"energy\": {  \n    \"type\": \"Number\",  \n    \"value\": 229.89  \n  },  \n  \"pressure\": {  \n    \"type\": \"Number\",  \n    \"value\": 84.06  \n  }  \n}  \n```  \n\r#### Blower NGSI-LD key-values Example    \n\rHere is an example of a Blower in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"@context\": \"https://smartdatamodels.org/context.jsonld\",  \n  \"id\": \"urn:ngsi-ld:Blower:Blower2\",  \n  \"type\": \"Blower\",  \n  \"name\": \"Blower 2\",  \n  \"description\": \"Blower 2 providing aeration for wastewater treatment process.\",  \n  \"airflow\": 368.75,  \n  \"energy\": 229.89,  \n  \"pressure\": 84.06  \n}  \n```  \n\r#### Blower NGSI-LD normalized Example    \n\rHere is an example of a Blower in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"@context\": \"https://smartdatamodels.org/context.jsonld\",  \n  \"id\": \"urn:ngsi-ld:Blower:Blower2\",  \n  \"type\": \"Blower\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Blower 2\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Blower 2 providing aeration for wastewater treatment process.\"  \n  },  \n  \"airflow\": {  \n    \"type\": \"Property\",  \n    \"value\": 368.75  \n  },  \n  \"energy\": {  \n    \"type\": \"Property\",  \n    \"value\": 229.89  \n  },  \n  \"pressure\": {  \n    \"type\": \"Property\",  \n    \"value\": 84.06  \n  }  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: WasteWaterJunction
        - MODEL_DESCRIPTION: This entity contains an harmonised description of a generic Junction made for the Wastewater treatment domain. Junctions could be in place in certain sections of thetreatment plant. In wastewater treatment purposes, the junction is most useful if it is a locationof a sensor that measures a specific variable.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Siddharth Seshan, comments: null, description: Demonstration of Fiware
                while integrating to the legacy system of the Amsterdam West WWTP in an EU project
                called Fiware4Water. The Blower data model is currently being used in collaboration
                with Waternet., mail: siddharth.seshan@kwrwater.nl, organization: KWR Water Research
                Institue, project: Fiware4Water, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              WasteWaterJunction of the Subject dataModel.WasteWater. All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: WasteWaterJunction  \n==========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WasteWater/blob/master/WasteWaterJunction/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains an harmonised description of a generic Junction made for the Wastewater treatment domain. Junctions could be in place in certain sections of thetreatment plant. In wastewater treatment purposes, the junction is most useful if it is a locationof a sensor that measures a specific variable.**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `bod`: Biological Oxygen Demand concentration measured in the influent or effluent.  \r- `cod`: Chemical Oxygen Demand concentration measured in the influent or effluent.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `do`: Dissolved Oxygen concentration measured in wastewater.  \r- `emissionFlow`: Gas emission flow volume measured at a junction prior to being emitted in an off-gas stack.  \r- `endsAt`: A relationship indicating the entity the junction is connected to in the downstream point  \r- `flowrate`: Flowrate of wastewater.  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `nh4`: Ammonium concentration measured in a tank.  \r- `no3`: Nitrate concentration measured in wastewater.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `pH`: Water pH level measured.  \r- `po4`: Ortho-phosphate concentration measured in wastewater.  \r- `pressure`: Pressure measured at given location. Most relevant for airflow as provided by blowers to wastewater tanks  \r- `redox`: Redox level measured in wastewater.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `startsAt`: A relationship indicating the entity the junction is connected to in the upstream point  \r- `temperature`: Wastewater temperature measured.  \r- `tic`: Total Inorganic Carbon concentration measured in the influent or effluent.  \r- `tn`: Total Nitrogen concentration measured in wastewater.  \r- `toc`: Total Organic Carbon concentration measured in the influent or effluent.  \r- `tss`: total suspended solids concentration measured in a tank.  \r- `type`: It has to be WasteWaterJunction. NGSI-LD Entity Type  \r  \n\rRequired properties  \n- `description`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWasteWaterJunction:    \n  description: 'This entity contains an harmonised description of a generic Junction made for the Wastewater treatment domain. Junctions could be in place in certain sections of thetreatment plant. In wastewater treatment purposes, the junction is most useful if it is a locationof a sensor that measures a specific variable.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    bod:    \n      description: 'Biological Oxygen Demand concentration measured in the influent or effluent.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    cod:    \n      description: 'Chemical Oxygen Demand concentration measured in the influent or effluent.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    do:    \n      description: 'Dissolved Oxygen concentration measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    emissionFlow:    \n      description: 'Gas emission flow volume measured at a junction prior to being emitted in an off-gas stack.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' m3'    \n    endsAt:    \n      description: 'A relationship indicating the entity the junction is connected to in the downstream point'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    flowrate:    \n      description: 'Flowrate of wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' m3/h'    \n    id:    \n      anyOf: &wastewaterjunction_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    nh4:    \n      description: 'Ammonium concentration measured in a tank.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    no3:    \n      description: 'Nitrate concentration measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *wastewaterjunction_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    pH:    \n      description: 'Water pH level measured.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n    po4:    \n      description: 'Ortho-phosphate concentration measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    pressure:    \n      description: 'Pressure measured at given location. Most relevant for airflow as provided by blowers to wastewater tanks'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' kPa'    \n    redox:    \n      description: 'Redox level measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mV'    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    startsAt:    \n      description: 'A relationship indicating the entity the junction is connected to in the upstream point'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    temperature:    \n      description: 'Wastewater temperature measured.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' Celsius'    \n    tic:    \n      description: 'Total Inorganic Carbon concentration measured in the influent or effluent.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    tn:    \n      description: 'Total Nitrogen concentration measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    toc:    \n      description: 'Total Organic Carbon concentration measured in the influent or effluent.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    tss:    \n      description: 'total suspended solids concentration measured in a tank.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    type:    \n      description: 'It has to be WasteWaterJunction. NGSI-LD Entity Type'    \n      enum:    \n        - WasteWaterJunction    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - description    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.WasteWater/blob/master/WasteWaterJunction/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/data-models/specs/WasteWaterTreatment/WasteWaterJunction/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### WasteWaterJunction NGSI-v2 key-values Example    \n\rHere is an example of a WasteWaterJunction in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WasteWaterJunction:junction2\",  \n  \"type\": \"WasteWaterJunction\",  \n  \"name\": \"Junction 2\",  \n  \"description\": \"A junction in the treatment lane representing a sampling location for the effluent wastewater.\",  \n  \"nh4\": 0.5,  \n  \"no3\": 5.2,  \n  \"do\": 1.2,  \n  \"redox\": 250,  \n  \"tn\": 7.18,  \n  \"toc\": 16.28,  \n  \"po4\": 0.29,  \n  \"bod\": 2.44,  \n  \"cod\": 36.6,  \n  \"flowrate\": 27650,  \n  \"temperature\": 16,  \n  \"pH\": 7.8,  \n  \"startsAt\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n}  \n```  \n\r#### WasteWaterJunction NGSI-v2 normalized Example    \n\rHere is an example of a WasteWaterJunction in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WasteWaterJunction:junction2\",  \n  \"type\": \"WasteWaterJunction\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Junction 2\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"A junction in the treatment lane representing a sampling location for the effluent wastewater.\"  \n  },  \n  \"nh4\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.5  \n  },  \n  \"no3\": {  \n    \"type\": \"Number\",  \n    \"value\": 5.2  \n  },  \n  \"do\": {  \n    \"type\": \"Number\",  \n    \"value\": 1.2  \n  },  \n  \"redox\": {  \n    \"type\": \"Number\",  \n    \"value\": 250  \n  },  \n  \"tn\": {  \n    \"type\": \"Number\",  \n    \"value\": 7.18  \n  },  \n  \"toc\": {  \n    \"type\": \"Number\",  \n    \"value\": 16.28  \n  },  \n  \"po4\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.29  \n  },  \n  \"bod\": {  \n    \"type\": \"Number\",  \n    \"value\": 2.44  \n  },  \n  \"cod\": {  \n    \"type\": \"Number\",  \n    \"value\": 36.6  \n  },  \n  \"flowrate\": {  \n    \"type\": \"Number\",  \n    \"value\": 27650  \n  },  \n  \"temperature\": {  \n    \"type\": \"Number\",  \n    \"value\": 16  \n  },  \n  \"pH\": {  \n    \"type\": \"Number\",  \n    \"value\": 7.8  \n  },  \n  \"startsAt\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n  }  \n}  \n```  \n\r#### WasteWaterJunction NGSI-LD key-values Example    \n\rHere is an example of a WasteWaterJunction in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"@context\": \"https://smartdatamodels.org/context.jsonld\",  \n  \"id\": \"urn:ngsi-ld:WasteWaterJunction:junction2\",  \n  \"type\": \"WasteWaterJunction\",  \n  \"name\": \"Junction 2\",  \n  \"description\": \"A junction in the treatment lane representing a sampling location for the effluent wastewater.\",  \n  \"nh4\": 0.5,  \n  \"no3\": 5.2,  \n  \"do\": 1.2,  \n  \"redox\": 250,  \n  \"tn\": 7.18,  \n  \"toc\": 16.28,  \n  \"po4\": 0.29,  \n  \"bod\": 2.44,  \n  \"cod\": 36.6,  \n  \"flowrate\": 27650,  \n  \"temperature\": 16,  \n  \"pH\": 7.8,  \n  \"startsAt\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n}  \n```  \n\r#### WasteWaterJunction NGSI-LD normalized Example    \n\rHere is an example of a WasteWaterJunction in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r[  \n  {  \n    \"@context\": \"https://smartdatamodels.org/context.jsonld\",  \n    \"id\": \"urn:ngsi-ld:WasteWaterJunction:junction2\",  \n    \"type\": \"WasteWaterJunction\",  \n    \"name\": {  \n      \"type\": \"Property\",  \n      \"value\": \"Junction 2\"  \n    },  \n    \"description\": {  \n      \"type\": \"Property\",  \n      \"value\": \"A junction in the treatment lane representing a sampling location for the effluent wastewater.\"  \n    },  \n    \"nh4\": {  \n      \"type\": \"Property\",  \n      \"value\": 0.5  \n    },  \n    \"no3\": {  \n      \"type\": \"Property\",  \n      \"value\": 5.2  \n    },  \n    \"do\": {  \n      \"type\": \"Property\",  \n      \"value\": 1.2  \n    },  \n    \"redox\": {  \n      \"type\": \"Property\",  \n      \"value\": 250  \n    },  \n    \"tn\": {  \n      \"type\": \"Property\",  \n      \"value\": 7.18  \n    },  \n    \"toc\": {  \n      \"type\": \"Property\",  \n      \"value\": 16.28  \n    },  \n    \"po4\": {  \n      \"type\": \"Property\",  \n      \"value\": 0.29  \n    },  \n    \"bod\": {  \n      \"type\": \"Property\",  \n      \"value\": 2.44  \n    },  \n    \"cod\": {  \n      \"type\": \"Property\",  \n      \"value\": 36.6  \n    },  \n    \"flowrate\": {  \n      \"type\": \"Property\",  \n      \"value\": 27650  \n    },  \n    \"temperature\": {  \n      \"type\": \"Property\",  \n      \"value\": 16  \n    },  \n    \"pH\": {  \n      \"type\": \"Property\",  \n      \"value\": 7.8  \n    },  \n    \"startsAt\": {  \n      \"type\": \"Relationship\",  \n      \"object\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n    }  \n  }  \n]  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: WasteWaterPlant
        - MODEL_DESCRIPTION: Data model for waste water treatment plant.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: IUDX, comments: null, description: Data model for waste water treatment
                plant., mail: null, organization: IUDX, project: null, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              WasteWaterJunction of the Subject dataModel.WasteWater. All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: WasteWaterPlant  \n=======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WasteWater/blob/master/WasteWaterPlant/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Data model for waste water treatment plant.**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `bod`: Biological Oxygen Demand concentration measured in the waste-water treatment plant corresponding to this observation.  \r- `cod`: Chemical Oxygen Demand concentration measured in the waste-water treatment plant corresponding to this observation.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `do`: Dissolved oxygen measured in the waste-water treatment plant corresponding to this observation.  \r- `id`: Unique identifier of the entity  \r- `inFlow`: In-flow amount into the treatment plant/reservoir corresponding to this observation.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `municipalityInfo`: Municipality information corresponding to this observation.  \r- `name`: The name of this item.  \r- `nh4`: Ammonium concentration measured in the waste-water treatment plant corresponding to this observation.  \r- `no3`: Nitrate concentration measured in waste-water treatment plant corresponding to this observation.  \r- `observationDateTime`: Last reported time of observation.  \r- `outFlow`: Out-flow amount into the treatment plant/reservoir corresponding to this observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `pHTSA`: Acidity level or basicity level observed in the water. Object defining the temporal processing of the magnitude property during a period. It provides maximum, minimum, instant value and average  \r- `po4`: Ortho-phosphate concentration measured in the waste-water treatment plant corresponding to this observation.  \r- `redox`: Reduction potential or oxidation measured in waste-water treatment plant corresponding to this observation.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `tic`: Total Inorganic Carbon concentration measured in the waste-water treatment plant corresponding to this observation.  \r- `tn`: Total Nitrogen concentration measured in waste-water treatment plant corresponding to this observation.  \r- `toc`: Total Organic Carbon concentration measured in the waste-water treatment plant corresponding to this observation.  \r- `treatmentPlantCapacity`: Handling capacity of the waste-water treatment plant corresponding to this observation.  \r- `treatmentPlantCode`: Unique code for the waste-water treatment plant corresponding to this observation.  \r- `treatmentPlantId`: Unique identification number for the waste-water treatment plant corresponding to this observation.  \r- `treatmentPlantName`: Name of the waste-water treatment plant corresponding to this observation.  \r- `tss`: Total suspended solids concentration measured in a waste-water treatment plant corresponding to this observation.  \r- `type`: NGSI entity type. It has to be WasteWaterPlant  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWasteWaterPlant:    \n  description: 'Data model for waste water treatment plant.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    bod:    \n      description: 'Biological Oxygen Demand concentration measured in the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    cod:    \n      description: 'Chemical Oxygen Demand concentration measured in the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    do:    \n      description: 'Dissolved oxygen measured in the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    id:    \n      anyOf: &wastewaterplant_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    inFlow:    \n      description: 'In-flow amount into the treatment plant/reservoir corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    municipalityInfo:    \n      description: 'Municipality information corresponding to this observation.'    \n      properties:    \n        cityId:    \n          description: 'Property. Model:''https://schema.org/Text''. City Id corresponding to this observation.'    \n          type: string    \n        cityName:    \n          description: 'Property. Model:''https://schema.org/Text''. City name corresponding to this observation'    \n          type: string    \n        district:    \n          description: 'Property. Model:''https://schema.org/Text''. District name corresponding to this observation.'    \n          type: string    \n        stateName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the state corresponding to this observation.'    \n          type: string    \n        ulbName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the Urban Local Body corresponding to this observation.'    \n          type: string    \n        wardId:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward Id corresponding to this observation.'    \n          type: string    \n        wardName:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward name corresponding to this observation.'    \n          type: string    \n        wardNum:    \n          description: 'Property. Model:''https://schema.org/Number''. Ward number corresponding to this observation.'    \n          type: number    \n        zoneId:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone Id corresponding to this observation.'    \n          type: string    \n        zoneName:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone name corresponding to this observation.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    nh4:    \n      description: 'Ammonium concentration measured in the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    no3:    \n      description: 'Nitrate concentration measured in waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    outFlow:    \n      description: 'Out-flow amount into the treatment plant/reservoir corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *wastewaterplant_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    pHTSA:    \n      description: 'Acidity level or basicity level observed in the water. Object defining the temporal processing of the magnitude property during a period. It provides maximum, minimum, instant value and average'    \n      properties:    \n        avgOverTime:    \n          description: 'Property. Model:''https://schema.org/Number''. Describes the average value of a time-series data over a specified duration in past. The duration is specified using another parameter in the value descriptor object related to this value'    \n          type: number    \n        instValue:    \n          description: 'Property. Model:''https://schema.org/Number''. Describes the instantaneous value (associated with the current timestamp) of a time varying quantity.'    \n          type: number    \n        maxOverTime:    \n          description: 'Property. Model:''https://schema.org/Number''. Describes the maximum value of a time-series data over a specified duration in past. The duration is specified using another parameter in the value descriptor object related to this value'    \n          type: number    \n        minOverTime:    \n          description: 'Property. Model:''https://schema.org/Number''. Describes the minimum value of a time-series data over a specified duration in past. The duration is specified using another parameter in the value descriptor object related to this value.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    po4:    \n      description: 'Ortho-phosphate concentration measured in the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    redox:    \n      description: 'Reduction potential or oxidation measured in waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    tic:    \n      description: 'Total Inorganic Carbon concentration measured in the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    tn:    \n      description: 'Total Nitrogen concentration measured in waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    toc:    \n      description: 'Total Organic Carbon concentration measured in the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    treatmentPlantCapacity:    \n      description: 'Handling capacity of the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    treatmentPlantCode:    \n      description: 'Unique code for the waste-water treatment plant corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    treatmentPlantId:    \n      description: 'Unique identification number for the waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    treatmentPlantName:    \n      description: 'Name of the waste-water treatment plant corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    tss:    \n      description: 'Total suspended solids concentration measured in a waste-water treatment plant corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    type:    \n      description: 'NGSI entity type. It has to be WasteWaterPlant'    \n      enum:    \n        - WasteWaterPlant    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.WasteWater/blob/master/WasteWaterPlant/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.WasteWater/WasteWaterPlant/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### WasteWaterPlant NGSI-v2 key-values Example    \n\rHere is an example of a WasteWaterPlant in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"uri:ngsi-ld:1234:A43R\",  \n  \"type\": \"WasteWaterPlant\",  \n  \"no3\": 10,  \n  \"bod\": 250,  \n  \"inFlow\": 5,  \n  \"toc\": 0.7,  \n  \"nh4\": 50,  \n  \"redox\": 25,  \n  \"do\": 4,  \n  \"treatmentPlantId\": 7,  \n  \"outFlow\": 6.7,  \n  \"tss\": 2,  \n  \"treatmentPlantCapacity\": 10,  \n  \"tic\": 2,  \n  \"tn\": 9,  \n  \"po4\": 6,  \n  \"cod\": 25,  \n  \"treatmentPlantName\": \"A\",  \n  \"treatmentPlantCode\": \"2\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"pHTSA\": {  \n    \"avgOverTime\": 8,  \n    \"maxOverTime\": 10,  \n    \"instValue\": 6,  \n    \"minOverTime\": 6  \n  },  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  }  \n}  \n```  \n\r#### WasteWaterPlant NGSI-v2 normalized Example    \n\rHere is an example of a WasteWaterPlant in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"uri:ngsi-ld:1234:A43R\",  \n  \"type\": \"WasteWaterPlant\",  \n  \"no3\": {  \n    \"type\": \"Number\",  \n    \"value\": 10  \n  },  \n  \"bod\": {  \n    \"type\": \"Number\",  \n    \"value\": 250  \n  },  \n  \"inFlow\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"toc\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.7  \n  },  \n  \"nh4\": {  \n    \"type\": \"Number\",  \n    \"value\": 50  \n  },  \n  \"redox\": {  \n    \"type\": \"Number\",  \n    \"value\": 25  \n  },  \n  \"do\": {  \n    \"type\": \"Number\",  \n    \"value\": 4  \n  },  \n  \"treatmentPlantId\": {  \n    \"type\": \"Number\",  \n    \"value\": 7  \n  },  \n  \"outFlow\": {  \n    \"type\": \"Number\",  \n    \"value\": 6.7  \n  },  \n  \"tss\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"treatmentPlantCapacity\": {  \n    \"type\": \"Number\",  \n    \"value\": 10  \n  },  \n  \"tic\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"tn\": {  \n    \"type\": \"Number\",  \n    \"value\": 9  \n  },  \n  \"po4\": {  \n    \"type\": \"Number\",  \n    \"value\": 6  \n  },  \n  \"cod\": {  \n    \"type\": \"Number\",  \n    \"value\": 25  \n  },  \n  \"treatmentPlantName\": {  \n    \"type\": \"Number\",  \n    \"value\": \"A\"  \n  },  \n  \"treatmentPlantCode\": {  \n    \"type\": \"Number\",  \n    \"value\": \"2\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"pHTSA\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"avgOverTime\": 8,  \n      \"maxOverTime\": 10,  \n      \"instValue\": 6,  \n      \"minOverTime\": 6  \n    }  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityId\": \"23\",  \n      \"wardId\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneName\": \"South\",  \n      \"wardName\": \"Bangalore Urban\",  \n      \"zoneId\": \"2\",  \n      \"wardNum\": 4  \n    }  \n  }  \n}  \n```  \n\r#### WasteWaterPlant NGSI-LD key-values Example    \n\rHere is an example of a WasteWaterPlant in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"uri:ngsi-ld:1234:A43R\",  \n  \"type\": \"WasteWaterPlant\",  \n  \"no3\": 10,  \n  \"bod\": 250,  \n  \"inFlow\": 5,  \n  \"toc\": 0.7,  \n  \"nh4\": 50,  \n  \"redox\": 25,  \n  \"do\": 4,  \n  \"treatmentPlantId\": 7,  \n  \"outFlow\": 6.7,  \n  \"tss\": 2,  \n  \"treatmentPlantCapacity\": 10,  \n  \"tic\": 2,  \n  \"tn\": 9,  \n  \"po4\": 6,  \n  \"cod\": 25,  \n  \"treatmentPlantName\": \"A\",  \n  \"treatmentPlantCode\": \"2\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"pHTSA\": {  \n    \"avgOverTime\": 8,  \n    \"maxOverTime\": 10,  \n    \"instValue\": 6,  \n    \"minOverTime\": 6  \n  },  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  },  \n    \"@context\": \"iudx:WasteWaterMgmt\"  \n}  \n```  \n\r#### WasteWaterPlant NGSI-LD normalized Example    \n\rHere is an example of a WasteWaterPlant in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"uri:ngsi-ld:1234:A43R\",  \n  \"type\": \"WasteWaterPlant\",  \n  \"no3\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"bod\": {  \n    \"type\": \"Property\",  \n    \"value\": 250  \n  },  \n  \"inFlow\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"toc\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.7  \n  },  \n  \"nh4\": {  \n    \"type\": \"Property\",  \n    \"value\": 50  \n  },  \n  \"redox\": {  \n    \"type\": \"Property\",  \n    \"value\": 25  \n  },  \n  \"do\": {  \n    \"type\": \"Property\",  \n    \"value\": 4  \n  },  \n  \"treatmentPlantId\": {  \n    \"type\": \"Property\",  \n    \"value\": 7  \n  },  \n  \"outFlow\": {  \n    \"type\": \"Property\",  \n    \"value\": 6.7  \n  },  \n  \"tss\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"treatmentPlantCapacity\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"tic\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"tn\": {  \n    \"type\": \"Property\",  \n    \"value\": 9  \n  },  \n  \"po4\": {  \n    \"type\": \"Property\",  \n    \"value\": 6  \n  },  \n  \"cod\": {  \n    \"type\": \"Property\",  \n    \"value\": 25  \n  },  \n  \"treatmentPlantName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"A\"  \n  },  \n  \"treatmentPlantCode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"2\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2021-03-11T15:51:02+05:30\"  \n    }  \n  },  \n  \"pHTSA\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"avgOverTime\": 8,  \n      \"maxOverTime\": 10,  \n      \"instValue\": 6,  \n      \"minOverTime\": 6  \n    }  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityId\": \"23\",  \n      \"wardId\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneName\": \"South\",  \n      \"wardName\": \"Bangalore Urban\",  \n      \"zoneId\": \"2\",  \n      \"wardNum\": 4  \n    }  \n  },  \n  \"@context\": [  \n    \"iudx:WasteWaterMgmt\",  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: WasteWaterSimulationResult
        - MODEL_DESCRIPTION: This entity contains an harmonised description of a WasteWaterSimulationResults made for the Wastewater treatment domain. The entity contains properties that are parameters which have been predicted or forecasted by models through a simulation.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Siddharth Seshan, comments: null, description: Demonstration of FIWARE
                while integrating to the legacy system of the Amsterdam West WWTP in an EU project  called
                Fiware4Water. The Blower data model is currently being used in collaboration with
                Waternet., mail: siddharth.seshan@kwrwater.nl, organization: KWR Water Research
                Institue, project: Fiware4Water, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              WasteWaterSimulationResult of the Subject Wastewater.  All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: WasteWaterSimulationResult  \n==================================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WasteWater/blob/master/WasteWaterSimulationResult/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains an harmonised description of a WasteWaterSimulationResults made for the Wastewater treatment domain. The entity contains properties that are parameters which have been predicted or forecasted by models through a simulation.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `airflow`: Estimation of airflow from a blower generated through aeration of a given wastewater entity, by a simulation/data-driven model.  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `nh4`: Estimation of ammonia concentration at a given wastewater entity, by a simulation/data-driven model.  \r- `no3`: Estimation of nitrate concentration at a given wastewater entity, by a simulation/data-driven model.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `power`: Estimation of power consumed by a blower for the aeration process to a given wastewater entity, by a simulation/data-driven model.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI-LD Entity Type. It has to be a WasteWaterSimulationResults.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWasteWaterSimulationResult:    \n  description: 'This entity contains an harmonised description of a WasteWaterSimulationResults made for the Wastewater treatment domain. The entity contains properties that are parameters which have been predicted or forecasted by models through a simulation.'    \n  modelTags: FIWARE4WATER    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    airflow:    \n      description: 'Estimation of airflow from a blower generated through aeration of a given wastewater entity, by a simulation/data-driven model.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' m/s'    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &wastewatersimulationresult_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    nh4:    \n      description: 'Estimation of ammonia concentration at a given wastewater entity, by a simulation/data-driven model.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    no3:    \n      description: 'Estimation of nitrate concentration at a given wastewater entity, by a simulation/data-driven model.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *wastewatersimulationresult_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    power:    \n      description: 'Estimation of power consumed by a blower for the aeration process to a given wastewater entity, by a simulation/data-driven model.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' kW'    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be a WasteWaterSimulationResults.'    \n      enum:    \n        - WasteWaterSimulationResult    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### WasteWaterSimulationResult NGSI-v2 key-values Example    \n\rHere is an example of a WasteWaterSimulationResult in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WasteWaterSimulationResults:dataValidation\",  \n  \"type\": \"WasteWaterSimulationResult\",  \n  \"name\": \"Data Validation\",  \n  \"description\": \"AI-based data validation application. Simulation of NH4 and NO3 parameters in aerobic tank of bioreactor using deep learning models.\",  \n  \"nh4\": 1.83,  \n  \"no3\": 6.27  \n}  \n```  \n\r#### WasteWaterSimulationResult NGSI-v2 normalized Example    \n\rHere is an example of a WasteWaterSimulationResult in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WasteWaterSimulationResults:dataValidation\",  \n  \"type\": \"WasteWaterSimulationResult\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Data Validation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"AI-based data validation application. Simulation of NH4 and NO3 parameters in aerobic tank of bioreactor using deep learning models.\"  \n  },  \n  \"nh4\": {  \n    \"type\": \"Number\",  \n    \"value\": 1.83  \n  },  \n  \"no3\": {  \n    \"type\": \"Number\",  \n    \"value\": 6.27  \n  }  \n}  \n```  \n\r#### WasteWaterSimulationResult NGSI-LD key-values Example    \n\rHere is an example of a WasteWaterSimulationResult in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"@context\": \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n  \"id\": \"urn:ngsi-ld:WasteWaterSimulationResults:dataValidation\",  \n  \"type\": \"WasteWaterSimulationResult\",  \n  \"name\": \"Data Validation\",  \n  \"description\": \"AI-based data validation application. Simulation of NH4 and NO3 parameters in aerobic tank of bioreactor using deep learning models.\",  \n  \"nh4\": 1.83,  \n  \"no3\": 6.27  \n}  \n```  \n\r#### WasteWaterSimulationResult NGSI-LD normalized Example    \n\rHere is an example of a WasteWaterSimulationResult in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WasteWaterSimulationResults:dataValidation\",  \n  \"type\": \"WasteWaterSimulationResult\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Data Validation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AI-based data validation application. Simulation of NH4 and NO3 parameters in aerobic tank of bioreactor using deep learning models.\"  \n  },  \n  \"nh4\": {  \n    \"type\": \"Property\",  \n    \"value\": 1.83,  \n    \"providedBy\": {  \n      \"type\": \"Relationship\",  \n      \"object\": \"urn:ngsi-ld:WasteWaterTank:aerobicTank02\"  \n    }  \n  },  \n  \"no3\": {  \n    \"type\": \"Property\",  \n    \"value\": 6.27,  \n    \"providedBy\": {  \n      \"type\": \"Relationship\",  \n      \"object\": \"urn:ngsi-ld:WasteWaterTank:aerobicTank02\"  \n    }  \n  },  \n  \"@context\": \"https://smartdatamodels.org/context.jsonld\"  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: WasteWaterTank
        - MODEL_DESCRIPTION: This entity contains an harmonised description of a generic Tank made for the Wastewater treatment domain. For a given type of tank, all possible variables that can be measures are listed as properties. In the description property, the type of tank (anaerobic, pre-dinitrification, nitrification etc.)can be defined.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Siddharth Seshan, comments: null, description: Demonstration of Fiware
                while integrating to the legacy system of the Amsterdam West WWTP in an EU project
                called Fiware4Water. The Blower data model is currently being used in collaboration
                with Waternet., mail: siddharth.seshan@kwrwater.nl, organization: KWR Water Research
                Institue, project: Fiware4Water, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              WasteWaterTank of the Subject dataModel.WasteWater. All fields are non mandatory.
              More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: WasteWaterTank  \n======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WasteWater/blob/master/WasteWaterTank/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains an harmonised description of a generic Tank made for the Wastewater treatment domain. For a given type of tank, all possible variables that can be measures are listed as properties. In the description property, the type of tank (anaerobic, pre-dinitrification, nitrification etc.)can be defined.**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `airflow`: Object defining the actual and estimated airflow  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `do`: Dissolved Oxygen concentration measured in wastewater.  \r- `endsAt`: A relationship indicating the entity the tank is connected to in the downstream point  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `nh4`: Ammonium concentration measured in a tank.  \r- `no3`: Nitrate concentration measured in wastewater.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `pH`: Water pH level measured.  \r- `power`: Object defining the actual and estimated power consumption  \r- `redox`: Redox level measured in wastewater.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `sludgeLevel`: Sludge Level measured in a secondary settler tank  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `startsAt`: A relationship indicating the entity the tank is connected to in the upstream point  \r- `temperature`: Wastewater temperature measured.  \r- `tn`: Total Nitrogen concentration measured in wastewater.  \r- `tss`: total suspended solids concentration measured in a tank.  \r- `type`: NGSI-LD Entity Type. It has to be WasteWaterTank  \r  \n\rRequired properties  \n- `description`  \r- `id`  \r- `name`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWasteWaterTank:    \n  description: 'This entity contains an harmonised description of a generic Tank made for the Wastewater treatment domain. For a given type of tank, all possible variables that can be measures are listed as properties. In the description property, the type of tank (anaerobic, pre-dinitrification, nitrification etc.)can be defined.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    airflow:    \n      description: 'Object defining the actual and estimated airflow'    \n      properties:    \n        estimated:    \n          description: 'Property. Model: https://schema.org/Number. Units: ''m/s''. Airflow estimated by a model.'    \n          type: number    \n        measured:    \n          description: 'Property. Model: https://schema.org/Number. Units: ''m/s''. Airflow measured by a device.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    do:    \n      description: 'Dissolved Oxygen concentration measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    endsAt:    \n      description: 'A relationship indicating the entity the tank is connected to in the downstream point'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    id:    \n      anyOf: &wastewatertank_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    nh4:    \n      description: 'Ammonium concentration measured in a tank.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    no3:    \n      description: 'Nitrate concentration measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *wastewatertank_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    pH:    \n      description: 'Water pH level measured.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n    power:    \n      description: 'Object defining the actual and estimated power consumption'    \n      properties:    \n        estimated:    \n          description: 'Property. Model: https://schema.org/Number. Units: ''kW''. Power estimated by a model.'    \n          type: number    \n        measured:    \n          description: 'Property. Model: https://schema.org/Number. Units: ''kW''. Power measured by a device.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    redox:    \n      description: 'Redox level measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mV'    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    sludgeLevel:    \n      description: 'Sludge Level measured in a secondary settler tank'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' metre'    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    startsAt:    \n      description: 'A relationship indicating the entity the tank is connected to in the upstream point'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        type: Relationship    \n    temperature:    \n      description: 'Wastewater temperature measured.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' Celsius'    \n    tn:    \n      description: 'Total Nitrogen concentration measured in wastewater.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    tss:    \n      description: 'total suspended solids concentration measured in a tank.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n        units: ' mg/L'    \n    type:    \n      description: 'NGSI-LD Entity Type. It has to be WasteWaterTank'    \n      enum:    \n        - WasteWaterTank    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - name    \n    - description    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.WasteWater/blob/master/WasteWaterTank/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/data-models/specs/WasteWaterTreatment/WasteWaterTank/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.1.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### WasteWaterTank NGSI-v2 key-values Example    \n\rHere is an example of a WasteWaterTank in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WasteWaterTank:aerobicTank2\",  \n  \"type\": \"WasteWaterTank\",  \n  \"name\": \"Aerobic Tank 2\",  \n  \"description\": \"Aerobic tank in treatment lane 2.\",  \n  \"tss\": 3500,  \n  \"nh4\": 1.3,  \n  \"no3\": 5.2,  \n  \"do\": 1.2,  \n  \"redox\": 250,  \n  \"sludgeLevel\": 0.8,  \n  \"temperature\": 16,  \n  \"pH\": 7.8,  \n  \"startsAt\": \"urn:ngsi-ld:WasteWaterTank:facultativeTank2\",  \n  \"endsAt\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n}  \n```  \n\r#### WasteWaterTank NGSI-v2 normalized Example    \n\rHere is an example of a WasteWaterTank in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:WasteWaterTank:aerobicTank2\",  \n  \"type\": \"WasteWaterTank\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Aerobic Tank 2\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Aerobic tank in treatment lane 2.\"  \n  },  \n  \"tss\": {  \n    \"type\": \"Number\",  \n    \"value\": 3500  \n  },  \n  \"nh4\": {  \n    \"type\": \"Number\",  \n    \"value\": 1.3  \n  },  \n  \"no3\": {  \n    \"type\": \"Number\",  \n    \"value\": 5.2  \n  },  \n  \"do\": {  \n    \"type\": \"Number\",  \n    \"value\": 1.2  \n  },  \n  \"redox\": {  \n    \"type\": \"Number\",  \n    \"value\": 250  \n  },  \n  \"sludgeLevel\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.8  \n  },  \n  \"temperature\": {  \n    \"type\": \"Number\",  \n    \"value\": 16  \n  },  \n  \"pH\": {  \n    \"type\": \"Number\",  \n    \"value\": 7.8  \n  },  \n  \"startsAt\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:WasteWaterTank:facultativeTank2\"  \n  },  \n  \"endsAt\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n  }  \n}  \n```  \n\r#### WasteWaterTank NGSI-LD key-values Example    \n\rHere is an example of a WasteWaterTank in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"@context\": \"https://smartdatamodels.org/context.jsonld\",  \n  \"id\": \"urn:ngsi-ld:WasteWaterTank:aerobicTank2\",  \n  \"type\": \"WasteWaterTank\",  \n  \"name\": \"Aerobic Tank 2\",  \n  \"description\": \"Aerobic tank in treatment lane 2.\",  \n  \"tss\": 3500,  \n  \"nh4\": 1.3,  \n  \"no3\": 5.2,  \n  \"do\": 1.2,  \n  \"redox\": 250,  \n  \"sludgeLevel\": 0.8,  \n  \"temperature\": 16,  \n  \"pH\": 7.8,  \n  \"startsAt\": \"urn:ngsi-ld:WasteWaterTank:facultativeTank2\",  \n  \"endsAt\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n}  \n```  \n\r#### WasteWaterTank NGSI-LD normalized Example    \n\rHere is an example of a WasteWaterTank in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"@context\": \"https://smartdatamodels.org/context.jsonld\",  \n  \"id\": \"urn:ngsi-ld:WasteWaterTank:aerobicTank2\",  \n  \"type\": \"WasteWaterTank\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Aerobic Tank 2\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Aerobic tank in treatment lane 2.\"  \n  },  \n  \"tss\": {  \n    \"type\": \"Property\",  \n    \"value\": 3500  \n  },  \n  \"nh4\": {  \n    \"type\": \"Property\",  \n    \"value\": 1.3  \n  },  \n  \"no3\": {  \n    \"type\": \"Property\",  \n    \"value\": 5.2  \n  },  \n  \"do\": {  \n    \"type\": \"Property\",  \n    \"value\": 1.2  \n  },  \n  \"redox\": {  \n    \"type\": \"Property\",  \n    \"value\": 250  \n  },  \n  \"sludgeLevel\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.8  \n  },  \n  \"temperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 16  \n  },  \n  \"pH\": {  \n    \"type\": \"Property\",  \n    \"value\": 7.8  \n  },  \n  \"startsAt\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:WasteWaterTank:facultativeTank2\"  \n  },  \n  \"endsAt\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"urn:ngsi-ld:WasteWaterTank:secondarySettler2a\"  \n  }  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: WaterConsumption
      MODELS:
        - MODEL_NAME: WaterConsumptionObserved
        - MODEL_DESCRIPTION: The Smart Water Meter model captures water consumption, customer side leak alarms and associated flow rate originating from the smart water meters
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: South West Water - Smart Metering, comments: null, description: Smart
                Water Meter model used to capture and analyse daily water consumption and leak
                alarms, mail: null, organization: South West Water, project: 'https://www.fiware4water.eu/',
              startDate: 21-6-21}
            description: This is a compilation list of the current adopters of the data model
              WaterConsumptionObserved of the Subject dataModel.WaterConsumption. All fields are
              non mandatory. More info at https://smart-data-models.github.io/data-models/templates/dataModel/CURRENT_ADOPTERS.yaml

        - MODEL_DOCUMENTATION: "Entity: WaterConsumptionObserved  \n================================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WaterConsumption/blob/master/WaterConsumptionObserved/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The Smart Water Meter model captures water consumption, customer side leak alarms and associated flow rate originating from the smart water meters**  \n\n\r## List of properties  \n\n\r- `acquisitionStageFailure`: No inductive response of metering device  \r- `address`: The mailing address  \r- `alarmFlowPersistence`: Alarm signifying continuous water use  \r- `alarmInProgress`: Indicates that one or more alarms are in progress  \r- `alarmStopsLeaks`: Alarm signifying the potential for an intermittent leak  \r- `alarmTamper`: Alarm signifying the potential of mechanical tampering with the device  \r- `alarmWaterQuality`: Alarm signifying the potential of backflows occurring  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maxFlow`: Maximum flow rate observed during the last week  \r- `minFlow`: Minimum flow rate observed during the last week  \r- `moduleTampered`: Removal of module from metering device  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `persistenceFlowDuration`: The duration that persistence flow (continuous flow) is recorded by the meter. Text  field showing durations in minutes (m), hours (h) or days (d).  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: It has to be WaterConsumptionObserved. NGSI type  \r- `waterConsumption`: The water meter reading. Note \u2013 this is total volume passed through the meter and is therefore a cumulative total at the time  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWaterConsumptionObserved:    \n  description: 'The Smart Water Meter model captures water consumption, customer side leak alarms and associated flow rate originating from the smart water meters'    \n  properties:    \n    acquisitionStageFailure:    \n      description: 'No inductive response of metering device'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alarmFlowPersistence:    \n      description: 'Alarm signifying continuous water use'    \n      enum:    \n        - 'Nothing to report'    \n        - 'No persistence'    \n        - 'In progress impacting persistence'    \n        - 'In progress persistence'    \n        - 'Past Persistence during the period'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    alarmInProgress:    \n      description: 'Indicates that one or more alarms are in progress'    \n      enum:    \n        - 0    \n        - 1    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    alarmStopsLeaks:    \n      description: 'Alarm signifying the potential for an intermittent leak'    \n      enum:    \n        - 0    \n        - 1    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    alarmTamper:    \n      description: 'Alarm signifying the potential of mechanical tampering with the device'    \n      enum:    \n        - 0    \n        - 1    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    alarmWaterQuality:    \n      description: 'Alarm signifying the potential of backflows occurring'    \n      enum:    \n        - 0    \n        - 1    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &waterconsumptionobserved_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maxFlow:    \n      description: 'Maximum flow rate observed during the last week'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n        units: litres/hour    \n    minFlow:    \n      description: 'Minimum flow rate observed during the last week'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n        units: litres/hour    \n    moduleTampered:    \n      description: 'Removal of module from metering device'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *waterconsumptionobserved_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    persistenceFlowDuration:    \n      description: 'The duration that persistence flow (continuous flow) is recorded by the meter. Text  field showing durations in minutes (m), hours (h) or days (d).'    \n      enum:    \n        - '15m < 60m'    \n        - '60m < 3h'    \n        - '3h < 6h'    \n        - '6h < 12h'    \n        - '12h < 24h'    \n        - '24h < 2d'    \n        - '2d < 4d'    \n        - '4d < 8d'    \n        - '8d < 15d'    \n        - '15d < 30d'    \n        - '30d < 90d'    \n        - '90d < 180d'    \n        - '> 180d'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'It has to be WaterConsumptionObserved. NGSI type'    \n      enum:    \n        - WaterConsumptionObserved    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    waterConsumption:    \n      description: 'The water meter reading. Note \u2013 this is total volume passed through the meter and is therefore a cumulative total at the time'    \n      type: integer    \n      x-ngsi:    \n        type: Property    \n        units: 'Cubic meters'    \n  required:    \n    - id    \n    - type    \n  type: object    \n```  \n</details>    \n\r## Example payloads    \n\r#### WaterConsumptionObserved NGSI-v2 key-values Example    \n\rHere is an example of a WaterConsumptionObserved in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Consumer:Consumer01\",  \n  \"type\": \"WaterConsumptionObserved\",  \n  \"acquisitionStageFailure\": 0,  \n  \"alarmFlowPersistence\": \"Nothing to report\",  \n  \"alarmInProgress\": 1,  \n  \"alarmMetrology\": 1,  \n  \"alarmStopsLeaks\": 0,  \n  \"alarmSystem\": 1,  \n  \"alarmTamper\": 0,  \n  \"alarmWaterQuality\": 0,  \n  \"maxFlow\": 620,  \n  \"minFlow\": 1,  \n  \"moduleTampered\": 1,  \n  \"persistenceFlowDuration\": \"3h < 6h\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.128871,  \n      50.95822  \n    ]  \n  },  \n  \"waterConsumption\": 191051  \n}  \n```  \n\r#### WaterConsumptionObserved NGSI-v2 normalized Example    \n\rHere is an example of a WaterConsumptionObserved in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Consumer:Consumer01\",  \n  \"type\": \"WaterConsumptionObserved\",  \n  \"acquisitionStageFailure\": {  \n    \"type\": \"Integer\",  \n    \"value\": 0  \n  },  \n  \"alarmFlowPersistence\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Nothing to report\"  \n  },  \n  \"alarmInProgress\": {  \n    \"type\": \"Integer\",  \n    \"value\": 1  \n  },  \n  \"alarmMetrology\": {  \n    \"type\": \"Integer\",  \n    \"value\": 1  \n  },  \n  \"alarmStopsLeaks\": {  \n    \"type\": \"Integer\",  \n    \"value\": 0  \n  },  \n  \"alarmSystem\": {  \n    \"type\": \"Integer\",  \n    \"value\": 1  \n  },  \n  \"alarmTamper\": {  \n    \"type\": \"Integer\",  \n    \"value\": 0  \n  },  \n  \"alarmWaterQuality\": {  \n    \"type\": \"Integer\",  \n    \"value\": 0  \n  },  \n  \"maxFlow\": {  \n    \"type\": \"Number\",  \n    \"value\": 620  \n  },  \n  \"minFlow\": {  \n    \"type\": \"Number\",  \n    \"value\": 1  \n  },  \n  \"moduleTampered\": {  \n    \"type\": \"Integer\",  \n    \"value\": 1  \n  },  \n  \"persistenceFlowDuration\": {  \n    \"type\": \"Text\",  \n    \"value\": \"3h < 6h\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -4.128871,  \n        50.95822  \n      ]  \n    }  \n  },  \n  \"waterConsumption\": {  \n    \"type\": \"Number\",  \n    \"value\": 191051  \n  }  \n}  \n```  \n\r#### WaterConsumptionObserved NGSI-LD key-values Example    \n\rHere is an example of a WaterConsumptionObserved in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:Consumer:Consumer01\",  \n  \"type\": \"WaterConsumptionObserved\",  \n  \"acquisitionStageFailure\": 0,  \n  \"alarmFlowPersistence\": \"Nothing to report\",  \n  \"alarmInProgress\": 1,  \n  \"alarmMetrology\": 1,  \n  \"alarmStopsLeaks\": 0,  \n  \"alarmSystem\": 1,  \n  \"alarmTamper\": 0,  \n  \"alarmWaterQuality\": 0,  \n  \"maxFlow\": 620,  \n  \"minFlow\": 1,  \n  \"moduleTampered\": 1,  \n  \"persistenceFlowDuration\": \"3h < 6h\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -4.128871,  \n      50.95822  \n    ]  \n  },  \n  \"waterConsumption\": 191051,  \n  \"@context\": [  \n    \"https://raw.githubusercontent.com/easy-global-market/ngsild-api-data-models/master/WaterSmartMeter/jsonld-contexts/waterSmartMeter-compound.jsonld\",  \n    \"https://smartdatamodels.org/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### WaterConsumptionObserved NGSI-LD normalized Example    \n\rHere is an example of a WaterConsumptionObserved in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:Consumer:Consumer01\",  \n    \"type\": \"WaterConsumptionObserved\",  \n    \"acquisitionStageFailure\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 0,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"alarmFlowPersistence\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": \"Nothing to report\",  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"alarmInProgress\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 1,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"alarmMetrology\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 1,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"alarmStopsLeaks\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 0,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"alarmSystem\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 1,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"alarmTamper\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 0,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"alarmWaterQuality\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 0,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"maxFlow\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 620,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\",  \n        \"unitCode\": \"E32\"  \n    },  \n    \"minFlow\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 1,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\",  \n        \"unitCode\": \"E32\"  \n    },  \n    \"moduleTampered\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 1,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\"  \n    },  \n    \"persistenceFlowDuration\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": \"3h < 6h\",  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\",  \n        \"unitCode\": \"HUR\"  \n    },  \n    \"location\": {  \n        \"type\": \"GeoProperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates\": [  \n                -4.128871,  \n                50.95822  \n            ]  \n        }  \n    },  \n    \"waterConsumption\": {  \n        \"type\": \"Property\",  \n        \"observedBy\": {  \n            \"type\": \"Relationship\",  \n            \"object\": \"urn:ngsi-ld:Device:01\"  \n        },  \n        \"value\": 191051,  \n        \"observedAt\": \"2021-05-23T23:14:16.000Z\",  \n        \"unitCode\": \"LTR\"  \n    },  \n    \"@context\": [  \n        \"https://raw.githubusercontent.com/easy-global-market/ngsild-api-data-models/master/WaterSmartMeter/jsonld-contexts/waterSmartMeter-compound.jsonld\"  \n    ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: WaterDistribution
      MODELS:
    - SUBMODULE_SHORT_NAME: WaterDistributionManagementEPANET
      MODELS:
    - SUBMODULE_SHORT_NAME: WaterQuality
      MODELS:
        - MODEL_NAME: WaterQualityObserved
        - MODEL_DESCRIPTION: Water Quality data model is intended to represent water quality parameters at a certain water mass (river,  lake, sea, etc.) section
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Digital-Water.city, comments: null, description: The Digital-Water.city
                project uses the Water Quality Observed data model to distribute results from
                water quality observations in rivers and wastewater treatment plants., mail: null,
              organization: null, project: null, startDate: null}
            - {adopter: SCOREwater, comments: Flow property of WaterQualityObserved, description: The
                SCOREwater project uses the Water Quality Observed data model to distribute results
                from water quality observations from a) water going in and out of construction
                sites and b) sewer systems., mail: null, organization: 'IVL, Talkpool, BCASA,
                s::can, Civity', project: SCOREwater, startDate: null}
            description: This is a compilation list of the current adopters of the data model
              WaterQualityObserved of the Subject dataModel.WaterQuality.  All fields are non
              mandatory.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: WaterQualityObserved  \n============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.WaterQuality/blob/master/WaterQualityObserved/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Water Quality data model is intended to represent water quality parameters at a certain water mass (river,  lake, sea, etc.) section**  \n\rversion: 0.0.4  \n\n\r## List of properties  \n\n\r- `Chla`: Concentration of chlorophyll A.  \r- `Cl-`: Concentration of chlorides.  \r- `NH3`: Concentration of ammonia.  \r- `NH4`: Concentration of ammonium.  \r- `NO3`: Concentration of nitrates.  \r- `O2`: Level of free, non-compound oxygen present.  \r- `PC`: Concentration of pigment phycocyanin which can be measured to estimate cyanobacteria concentrations specifically.  \r- `PE`: Concentration of pigment phycoerythrin which can be measured to estimate cyanobacteria concentrations specifically.  \r- `PO4`: Concentration of phosphates.  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `bod`: Biochemical oxygen demand (BOD) is the amount of dissolved oxygen (DO) needed (i.e. demanded) by aerobic biological organisms to break down organic material present in a given water sample at certain temperature over a specific time period  \r- `cod`: Chemical oxygen demand (COD) is an indicative measure of the amount of oxygen that can be consumed by reactions in a measured solution  \r- `conductance`: Specific Conductance.  \r- `conductivity`: Electrical Conductivity.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObserved`: The date and time of this observation in ISO8601 UTCformat. It can be represented by an specific time instant or by an ISO8601 interval.  \r- `description`: A description of this item  \r- `enterococci`: Concentration of Enterococci  \r- `escherichiaColi`: Concentration of Escherichia coli  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `measurand`: An array of strings containing details (see format below) about extra measurands provided by this observation.  \r- `name`: The name of this item.  \r- `orp`: Oxidation-Reduction potential.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `pH`: Acidity or basicity of an aqueous solution.  \r- `refPointOfInterest`: A reference to a point of interest associated to this observation.  \r- `salinity`: Amount of salts dissolved in water.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `tds`: Total dissolved solids.   \r- `temperature`: Temperature  \r- `tss`: Total suspended solids.  \r- `turbidity`: Amount of light scattered by particles in the water column  \r- `type`: NGSI Entity type. It has to be WaterQualityObserved  \r  \n\rRequired properties  \n- `dateObserved`  \r- `id`  \r- `location`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nWaterQualityObserved:    \n  description: 'Water Quality data model is intended to represent water quality parameters at a certain water mass (river,  lake, sea, etc.) section'    \n  properties:    \n    Chla:    \n      description: 'Concentration of chlorophyll A.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    Cl-:    \n      description: 'Concentration of chlorides.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    NH3:    \n      description: 'Concentration of ammonia.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    NH4:    \n      description: 'Concentration of ammonium.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    NO3:    \n      description: 'Concentration of nitrates.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    O2:    \n      description: 'Level of free, non-compound oxygen present.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    PC:    \n      description: 'Concentration of pigment phycocyanin which can be measured to estimate cyanobacteria concentrations specifically.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    PE:    \n      description: 'Concentration of pigment phycoerythrin which can be measured to estimate cyanobacteria concentrations specifically.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    PO4:    \n      description: 'Concentration of phosphates.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    bod:    \n      description: 'Biochemical oxygen demand (BOD) is the amount of dissolved oxygen (DO) needed (i.e. demanded) by aerobic biological organisms to break down organic material present in a given water sample at certain temperature over a specific time period'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: mg/l    \n    cod:    \n      description: 'Chemical oxygen demand (COD) is an indicative measure of the amount of oxygen that can be consumed by reactions in a measured solution'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: mg/l    \n    conductance:    \n      description: 'Specific Conductance.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    conductivity:    \n      description: 'Electrical Conductivity.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObserved:    \n      description: 'The date and time of this observation in ISO8601 UTCformat. It can be represented by an specific time instant or by an ISO8601 interval.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    enterococci:    \n      description: 'Concentration of Enterococci'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: 'Total number of bacteria/100mL'    \n    escherichiaColi:    \n      description: 'Concentration of Escherichia coli'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n        units: 'Total number of bacteria/100mL'    \n    id:    \n      anyOf: &waterqualityobserved_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    measurand:    \n      description: 'An array of strings containing details (see format below) about extra measurands provided by this observation.'    \n      items:    \n        type: string    \n      minItems: 1    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    orp:    \n      description: 'Oxidation-Reduction potential.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *waterqualityobserved_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    pH:    \n      description: 'Acidity or basicity of an aqueous solution.'    \n      maximum: 14    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'A reference to a point of interest associated to this observation.'    \n      x-ngsi:    \n        type: Relationship    \n    salinity:    \n      description: 'Amount of salts dissolved in water.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    tds:    \n      description: 'Total dissolved solids. '    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    temperature:    \n      description: Temperature    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    tss:    \n      description: 'Total suspended solids.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    turbidity:    \n      description: 'Amount of light scattered by particles in the water column'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be WaterQualityObserved'    \n      enum:    \n        - WaterQualityObserved    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - dateObserved    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.WaterQuality/blob/master/WaterQualityObserved/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.WaterQuality/WaterQualityObserved/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.4    \n```  \n</details>    \n\r## Example payloads    \n\r#### WaterQualityObserved NGSI-v2 key-values Example    \n\rHere is an example of a WaterQualityObserved in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"waterqualityobserved:Sevilla:D1\",  \n  \"type\": \"WaterQualityObserved\",  \n  \"dateObserved\": \"2017-01-31T06:45:00Z\",  \n  \"measurand\": [\"NO3, 0.01, M1, Concentration of Nitrates\"],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [-5.993307, 37.362882]  \n  },  \n  \"temperature\": 24.4,  \n  \"conductivity\": 0.005,  \n  \"pH\": 7.4,  \n  \"NO3\": 0.01  \n}  \n```  \n\r#### WaterQualityObserved NGSI-v2 normalized Example    \n\rHere is an example of a WaterQualityObserved in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"waterqualityobserved:Sevilla:D1\",  \n  \"type\": \"WaterQualityObserved\",  \n  \"dateObserved\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2017-01-31T06:45:00Z\"  \n  },  \n  \"temperature\": {  \n    \"value\": 24.4  \n  },  \n  \"NO3\": {  \n    \"value\": 0.01  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [-5.993307, 37.362882]  \n    }  \n  },  \n  \"pH\": {  \n    \"value\": 7.4  \n  },  \n  \"measurand\": {  \n    \"value\": [\"NO3, 0.01, M1, Concentration of Nitrates\"]  \n  },  \n  \"conductivity\": {  \n    \"value\": 0.005  \n  }  \n}  \n```  \n\r#### WaterQualityObserved NGSI-LD key-values Example    \n\rHere is an example of a WaterQualityObserved in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:WaterQualityObserved:waterqualityobserved:Sevilla:D1\",  \n    \"type\": \"WaterQualityObserved\",  \n    \"NO3\": 0.01,  \n    \"conductivity\": 0.005,  \n    \"dateObserved\": \"2017-01-31T06:45:00Z\",  \n    \"location\": {  \n        \"coordinates\": [  \n            -5.993307,  \n            37.362882  \n        ],  \n        \"type\": \"Point\"  \n    },  \n    \"measurand\": [  \n        \"NO3, 0.01, M1, Concentration of Nitrates\"  \n    ],  \n    \"pH\": 7.4,  \n    \"temperature\": 24.4,  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.WaterQuality/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### WaterQualityObserved NGSI-LD normalized Example    \n\rHere is an example of a WaterQualityObserved in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:WaterQualityObserved:waterqualityobserved:Sevilla:D1\",  \n    \"type\": \"WaterQualityObserved\",  \n    \"NO3\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.01  \n    },  \n    \"conductivity\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.005  \n    },  \n    \"dateObserved\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2017-01-31T06:45:00Z\"  \n        }  \n    },  \n    \"location\": {  \n        \"type\": \"GeoProperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates\": [  \n                -5.993307,  \n                37.362882  \n            ]  \n        }  \n    },  \n    \"measurand\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"NO3, 0.01, M1, Concentration of Nitrates\"  \n        ]  \n    },  \n    \"pH\": {  \n        \"type\": \"Property\",  \n        \"value\": 7.4  \n    },  \n    \"temperature\": {  \n        \"type\": \"Property\",  \n        \"value\": 24.4  \n    },  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"

- DOMAIN_NAME: Smart Energy
  REPO_URL: https://github.com/smart-data-models/SmartEnergy.git
  SUBMODULES:
    - SUBMODULE_SHORT_NAME: Battery
      MODELS:
        - MODEL_NAME: StorageBatteryDevice
        - MODEL_DESCRIPTION: The storage battery device data model is intended to describe the technical characteristics of the battery and the charging and discharging conditions of the energy.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              StorageBatteryMeasurement of the Subject Battery.

        - MODEL_DOCUMENTATION: "Entity: StorageBatteryDevice  \n============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Battery/blob/master/StorageBatteryDevice/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The storage battery device data model is intended to describe the technical characteristics of the battery and the charging and discharging conditions of the energy.**  \n\rversion: 0.0.2  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `application`: Enum:'electricMobility, energyStorage, emergencyStorage, houseHoldStorage, industrialStorage, lighting, production, robotics, other'. Target application of the Device regarding the storage. A combination of the enumeration.  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `averageLife`: average life under normal battery usage conditions at reference temperatures. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **ANN** represents Year  \r- `batteryAssessmentMethods`: Enum:'ampereHourMeter, dischargeTest, electrolyteDensity, highFrequencyImpedance, lowFrequencyImpedance, mathematicalModel, operatingVoltageWithClosedCircuit, quiescentVoltageWithOpenCircuit'.    \r- `batteryType`: Enum:'alkaline, gel, lead, lead-AGM, Li-Ion, Li-Po, Li-Po4, LMP, Li-Air, Na-NiCl2(Zebra), Ni-Cd, Ni-MH, Ni-Zn, other'. Type of battery used.  \r- `brandName`: Brand Name of the item.  \r- `capacityCnnn`: Remaining energy as a function of the discharge time for 6 keys according the temperature of reference. Each Key is a structured value with the format {`Cnnn`:[`value1`,`value2`]} describing the different measurement of [CapacityCnnn].  \r- `chargeDischargeReactivity`:  Charge and Discharge Reactivity which characterizes the reactive behavior of the system. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **SEC** represents Second  \r- `chargeEfficiency`: Charge Efficiency *(code PV-BAT)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.  \r- `chargePower`: Load Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `chargingModeAllowed`:  Charging mode permitted to avoid damage to the battery. enum:'fast, normal, quick'  \r- `communication`: List of communication protocol with others device depending manufacturers. Enum:'CAN 2.0 B, dryContactTerminal, maintenanceInterface, RS485, RS485BMS, RS485Inverter, other'  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: A timestamp which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat.   \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `dimension`: External dimension of a Panel. The format is structured by a sub-property of 3 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter  \r- `dischargeEfficiency`: Discharge Efficiency *(code PV-OND)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.  \r- `dischargePower`: Discharge Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `documentation`: Technical Documentation (Installation / maintenance / use).  \r- `durationPeakPower`: Reference Time recorded for the attribute [peakPower]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **SEC** represents Second  \r- `id`: Unique identifier of the entity  \r- `installationCondition`: Enum:'desert, dust, extremeClimate, extremeCold, extremeHeat, extremeHumidity, marine, saline, sand, seismic, other'. Condition and possibility of use in the following environments.  \r- `installationMode`: Enum:'aerial, ground, pole, roofing, underGround, wall, other'. Positioning of the device in relation to a ground reference system.  \r- `lifeCycleNumber`: Number of admissible charge / discharge life cycles. The format is structured by a sub-property of 2 items.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `manufacturerName`: Manufacturer Name of the item.  \r- `massEnergyDensity`: Mass Energy density *(Code D)*. Ratio between the capacity of the battery to deliver a certain power for a certain time and its weight. The format is structured by a sub-property of 2 items. The unit code (text) of measurement is **Wh/Kg** WattHour per Kilogram  \r- `maxOutputPower`: Maximum Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWT** represents Kilowatt  \r- `maximumVoltageEOC`: Maximum authorized voltage after end of charge and Battery still connected to to a charge generator. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `minimumVoltageEOD`: Minimum voltage after end of discharge and not connected to to a charge generator. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `modelName`: Model Name of the item.   \r- `name`: The name of this item.  \r- `nominalAmpere`: Nominal Amperage. *(Code I)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere  \r- `nominalCapacity`: Nominal Energy capacity. *(Code C)* to link with the attribute [CapacityCnnn] to measure the predefined levels parameters C / xx h of discharge regimes. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMH** represents Ampere Hour  \r- `nominalFrequency`: Nominal Frequency. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz  \r- `nominalVoltage`: Nominal battery voltage. *(Code U)* The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `operatingAltitude`: Operating altitude with minimum and maximum resistance to height and depth. The format is structured by a sub-property of 2 items with the keys [min] =<0 and [max] >=0. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter  \r- `operatingAmpere`:  Minimum and Maximum Ampere allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere  \r- `operatingFrequency`:  Minimum and Maximum frequency allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz  \r- `operatingTemperature`: Ambient operating temperature range. This is the minimum and maximum resistance to cold and heat for an [event]. The format is structured by a sub-property of 3 items with the format  {`event`:[`min`,`max`]}. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius  \r- `operatingVoltage`: Minimum and Maximum voltage allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `overloadAccepted`: Overload is permitted after exceeding the threshold.(`true` for yes)  \r- `overloadAcceptedTime`: Accepted overcharge time without damage to the battery.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `peakPower`:  Maximum intensity extractable over a short period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWT** represents Kilowatt  \r- `possibilityOfUse`: Possibility of use. A unique value. Enum:'mobile, mixed, stationary, other'.    \r- `protectionIK`: IK 'Mecanic Protection' level relating to numeric classification for the degrees of protection provided by enclosures for electrical equipment against external mechanical impacts, according to International Electro technical Commission standard (EN 62-262). - IK varies from 0 (minimum resistance) to 10 (maximum resistance) which represents an Impact Energy (Unit Joule)  \r- `protectionIP`: IP *Ingress Protection* for the Junction Box. This is the level classifies and rates the degree of protection provided by mechanical casings and electrical enclosures against intrusion, dust, accidental contact, and water according to International Electrotechnical Commission standard (EN 60-529). - First digit: Solid particle protection (Single numeral: 0\u20136 or 'X'). - Second digit: Liquid ingress protection (Single numeral: 0\u20139 or 'X'). - Third digit: Personal Protection  against access to dangerous parts (optional additional letter). - Fourth digit: Other protections (optional additional letter)  \r- `rechargeEnergySource`: Enum:'electric, hydraulic, windTurbine, other'. Recharge Energy Source. A unique value of the list   \r- `refDevice`: Reference to the Main Entity [Device](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) if used as second link.  \r- `refPointOfInterest`: Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the observation.  \r- `roundTripEfficiency`: Round-Trip Efficiency. Efficiency, defined as the ratio between stored energy and returned energy. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `selfDischargeRate`: Battery discharge rate without any use on a baseline of 1 month according the [temperature of reference]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percentage.  \r- `serialNumber`: Serial numbers of the item.  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `storableEnergy`: Total Storage Energy = [nominalVoltage] * [nominalCapacity]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWH** represents Kilowatt Hour  \r- `toolBMS`: Use of a Battery Management System tool to protect, guarantee and optimize battery life. (`true` for yes)  \r- `type`: It has to be StorageBatteryDevice  \r- `typeEnergySource`: Enum:'dam, fall, generator, network, photovoltaic, river, sea, waterTurbine, wind, other'. Type of Energy Source regarding `RechargeEnergySource` attribute.  \r- `typeOfUse`: Accepted use regarding its positioning in an indoor / outdoor environment. Enum:' indoor, mixed, outdoor, other'  \r- `usableEnergy`: Usable Energy. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWH** represents Kilowatt Hour  \r- `volEnergyDensity`: Volume Energy density *(Code D)*. The format is structured by a sub-property of 2 items. The unit code (text) of measurement is **Wh/L** WattHour per Liter  \r- `weight`: Weight. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KGM** represents KiloGramme  \r  \n\rRequired properties  \n- `batteryType`  \r- `dateLastReported`  \r- `id`  \r- `location`  \r- `rechargeEnergySource`  \r- `type`  \r  \n\rThe charging functionalities apply from a power source which can be an 'on-board system, solar panel, wind turbine, generator, power supply'. Hydraulic sources are not included in this version. The discharge functions apply to all types of system requiring energy consumption from a storage battery. *Remark* This Data Model can be used directly as a main entity to describe the device *Battery Storage* or as a sub - entity of the Data Model *DEVICE* using a reference by the *refDevice* attribute.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nStorageBatteryDevice:    \n  description: 'The storage battery device data model is intended to describe the technical characteristics of the battery and the charging and discharging conditions of the energy.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    application:    \n      description: 'Enum:''electricMobility, energyStorage, emergencyStorage, houseHoldStorage, industrialStorage, lighting, production, robotics, other''. Target application of the Device regarding the storage. A combination of the enumeration.'    \n      items:    \n        enum:    \n          - electricMobility    \n          - energyStorage    \n          - emergencyStorage    \n          - houseHoldStorage    \n          - industrialStorage    \n          - lighting    \n          - production    \n          - robotics    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    averageLife:    \n      description: 'average life under normal battery usage conditions at reference temperatures. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **ANN** represents Year'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: year    \n    batteryAssessmentMethods:    \n      description: 'Enum:''ampereHourMeter, dischargeTest, electrolyteDensity, highFrequencyImpedance, lowFrequencyImpedance, mathematicalModel, operatingVoltageWithClosedCircuit, quiescentVoltageWithOpenCircuit''.  '    \n      enum:    \n        - ampereHourMeter    \n        - dischargeTest    \n        - electrolyteDensity    \n        - highFrequencyImpedance    \n        - lowFrequencyImpedance    \n        - mathematicalModel    \n        - operatingVoltageWithClosedCircuit    \n        - quiescentVoltageWithOpenCircuit    \n      minItems: 0    \n      type: string    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    batteryType:    \n      description: 'Enum:''alkaline, gel, lead, lead-AGM, Li-Ion, Li-Po, Li-Po4, LMP, Li-Air, Na-NiCl2(Zebra), Ni-Cd, Ni-MH, Ni-Zn, other''. Type of battery used.'    \n      enum:    \n        - alkaline    \n        - gel    \n        - lead    \n        - lead-AGM    \n        - Li-Ion    \n        - Li-Po    \n        - Li-Po4    \n        - LMP    \n        - Li-Air    \n        - Na-NiCl2(Zebra)    \n        - Ni-Cd    \n        - Ni-MH    \n        - Ni-Zn    \n        - other    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    brandName:    \n      description: 'Brand Name of the item.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    capacityCnnn:    \n      description: 'Remaining energy as a function of the discharge time for 6 keys according the temperature of reference. Each Key is a structured value with the format {`Cnnn`:[`value1`,`value2`]} describing the different measurement of [CapacityCnnn].'    \n      properties:    \n        C001:    \n          items:    \n            type: number    \n          type: array    \n        C005:    \n          items:    \n            type: number    \n          type: array    \n        C010:    \n          items:    \n            type: number    \n          type: array    \n        C020:    \n          items:    \n            type: number    \n          type: array    \n        C050:    \n          items:    \n            type: number    \n          type: array    \n        C100:    \n          items:    \n            type: number    \n          type: array    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    chargeDischargeReactivity:    \n      description: ' Charge and Discharge Reactivity which characterizes the reactive behavior of the system. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **SEC** represents Second'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: seconds    \n    chargeEfficiency:    \n      description: 'Charge Efficiency *(code PV-BAT)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    chargePower:    \n      description: 'Load Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volts    \n    chargingModeAllowed:    \n      description: ' Charging mode permitted to avoid damage to the battery. enum:''fast, normal, quick'''    \n      items:    \n        enum:    \n          - normal    \n          - quick    \n          - fast    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    communication:    \n      description: 'List of communication protocol with others device depending manufacturers. Enum:''CAN 2.0 B, dryContactTerminal, maintenanceInterface, RS485, RS485BMS, RS485Inverter, other'''    \n      items:    \n        enum:    \n          - 'CAN 2.0 B'    \n          - dryContactTerminal    \n          - maintenanceInterface    \n          - RS485    \n          - RS485BMS    \n          - RS485Inverter    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'A timestamp which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat. '    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dimension:    \n      description: 'External dimension of a Panel. The format is structured by a sub-property of 3 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter'    \n      properties:    \n        depth:    \n          minimum: 0    \n          type: number    \n        height:    \n          minimum: 0    \n          type: number    \n        width:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n        units: Centimeters    \n    dischargeEfficiency:    \n      description: 'Discharge Efficiency *(code PV-OND)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    dischargePower:    \n      description: 'Discharge Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volts    \n    documentation:    \n      description: 'Technical Documentation (Installation / maintenance / use).'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    durationPeakPower:    \n      description: 'Reference Time recorded for the attribute [peakPower]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **SEC** represents Second'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: seconds    \n    id:    \n      anyOf: &storagebatterydevice_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    installationCondition:    \n      description: 'Enum:''desert, dust, extremeClimate, extremeCold, extremeHeat, extremeHumidity, marine, saline, sand, seismic, other''. Condition and possibility of use in the following environments.'    \n      items:    \n        enum:    \n          - desert    \n          - dust    \n          - extremeClimate    \n          - extremeCold    \n          - extremeHeat    \n          - extremeHumidity    \n          - marine    \n          - saline    \n          - sand    \n          - seismic    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    installationMode:    \n      description: 'Enum:''aerial, ground, pole, roofing, underGround, wall, other''. Positioning of the device in relation to a ground reference system.'    \n      enum:    \n        - aerial    \n        - ground    \n        - pole    \n        - roofing    \n        - underGround    \n        - wall    \n        - other    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    lifeCycleNumber:    \n      description: 'Number of admissible charge / discharge life cycles. The format is structured by a sub-property of 2 items.'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    manufacturerName:    \n      description: 'Manufacturer Name of the item.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    massEnergyDensity:    \n      description: 'Mass Energy density *(Code D)*. Ratio between the capacity of the battery to deliver a certain power for a certain time and its weight. The format is structured by a sub-property of 2 items. The unit code (text) of measurement is **Wh/Kg** WattHour per Kilogram'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'W hour / Kg'    \n    maxOutputPower:    \n      description: 'Maximum Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWT** represents Kilowatt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Kw    \n    maximumVoltageEOC:    \n      description: 'Maximum authorized voltage after end of charge and Battery still connected to to a charge generator. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volts    \n    minimumVoltageEOD:    \n      description: 'Minimum voltage after end of discharge and not connected to to a charge generator. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volts    \n    modelName:    \n      description: 'Model Name of the item. '    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    nominalAmpere:    \n      description: 'Nominal Amperage. *(Code I)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: amperes    \n    nominalCapacity:    \n      description: 'Nominal Energy capacity. *(Code C)* to link with the attribute [CapacityCnnn] to measure the predefined levels parameters C / xx h of discharge regimes. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMH** represents Ampere Hour'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Ampere Hour'    \n    nominalFrequency:    \n      description: 'Nominal Frequency. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: hertz    \n    nominalVoltage:    \n      description: 'Nominal battery voltage. *(Code U)* The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volts.    \n    operatingAltitude:    \n      description: 'Operating altitude with minimum and maximum resistance to height and depth. The format is structured by a sub-property of 2 items with the keys [min] =<0 and [max] >=0. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **MTR** represents Meter'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: meters    \n    operatingAmpere:    \n      description: ' Minimum and Maximum Ampere allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: amperes    \n    operatingFrequency:    \n      description: ' Minimum and Maximum frequency allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: hertz    \n    operatingTemperature:    \n      description: 'Ambient operating temperature range. This is the minimum and maximum resistance to cold and heat for an [event]. The format is structured by a sub-property of 3 items with the format  {`event`:[`min`,`max`]}. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius'    \n      properties:    \n        charge:    \n          description: 'Property. Model:''https://schema.org/Number''. Charge of the item'    \n          items:    \n            type: number    \n          type: array    \n        discharge:    \n          description: 'Property. Model:''https://schema.org/Number''. Discharge of the item '    \n          items:    \n            type: number    \n          type: array    \n        storage:    \n          description: 'Property. Model:''https://schema.org/Number''. Storage of the item'    \n          items:    \n            type: number    \n          type: array    \n      type: object    \n      x-ngsi:    \n        type: Property    \n        units: 'degrees Celsius'    \n    operatingVoltage:    \n      description: 'Minimum and Maximum voltage allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volt    \n    overloadAccepted:    \n      description: 'Overload is permitted after exceeding the threshold.(`true` for yes)'    \n      type: boolean    \n      x-ngsi:    \n        model: https://schema.org/Boolean    \n        type: Property    \n    overloadAcceptedTime:    \n      description: 'Accepted overcharge time without damage to the battery.'    \n      format: time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *storagebatterydevice_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    peakPower:    \n      description: ' Maximum intensity extractable over a short period. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWT** represents Kilowatt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Kw    \n    possibilityOfUse:    \n      description: 'Possibility of use. A unique value. Enum:''mobile, mixed, stationary, other''.  '    \n      enum:    \n        - mobile    \n        - mixed    \n        - stationary    \n        - other    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    protectionIK:    \n      description: 'IK ''Mecanic Protection'' level relating to numeric classification for the degrees of protection provided by enclosures for electrical equipment against external mechanical impacts, according to International Electro technical Commission standard (EN 62-262). - IK varies from 0 (minimum resistance) to 10 (maximum resistance) which represents an Impact Energy (Unit Joule)'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    protectionIP:    \n      description: 'IP *Ingress Protection* for the Junction Box. This is the level classifies and rates the degree of protection provided by mechanical casings and electrical enclosures against intrusion, dust, accidental contact, and water according to International Electrotechnical Commission standard (EN 60-529). - First digit: Solid particle protection (Single numeral: 0\u20136 or ''X''). - Second digit: Liquid ingress protection (Single numeral: 0\u20139 or ''X''). - Third digit: Personal Protection  against access to dangerous parts (optional additional letter). - Fourth digit: Other protections (optional additional letter)'    \n      type: string    \n      x-ngsi:    \n        model: https://en.wikipedia.org/wiki/IP_Code.    \n        type: Property    \n    rechargeEnergySource:    \n      description: 'Enum:''electric, hydraulic, windTurbine, other''. Recharge Energy Source. A unique value of the list '    \n      enum:    \n        - electric    \n        - hydraulic    \n        - windTurbine    \n        - other    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    refDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to the Main Entity [Device](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) if used as second link.'    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Relationship    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the observation.'    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    roundTripEfficiency:    \n      description: 'Round-Trip Efficiency. Efficiency, defined as the ratio between stored energy and returned energy. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    selfDischargeRate:    \n      description: 'Battery discharge rate without any use on a baseline of 1 month according the [temperature of reference]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percentage.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    serialNumber:    \n      description: 'Serial numbers of the item.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    storableEnergy:    \n      description: 'Total Storage Energy = [nominalVoltage] * [nominalCapacity]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWH** represents Kilowatt Hour'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Kw Hour'    \n    toolBMS:    \n      description: 'Use of a Battery Management System tool to protect, guarantee and optimize battery life. (`true` for yes)'    \n      type: boolean    \n      x-ngsi:    \n        model: https://schema.org/Boolean    \n        type: Property    \n    type:    \n      description: 'It has to be StorageBatteryDevice'    \n      enum:    \n        - StorageBatteryDevice    \n      type: string    \n      x-ngsi:    \n        model: 'https://schema.org/Text '    \n        type: Property    \n    typeEnergySource:    \n      description: 'Enum:''dam, fall, generator, network, photovoltaic, river, sea, waterTurbine, wind, other''. Type of Energy Source regarding `RechargeEnergySource` attribute.'    \n      items:    \n        enum:    \n          - dam    \n          - fall    \n          - generator    \n          - network    \n          - photovoltaic    \n          - river    \n          - sea    \n          - waterTurbine    \n          - wind    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    typeOfUse:    \n      description: 'Accepted use regarding its positioning in an indoor / outdoor environment. Enum:'' indoor, mixed, outdoor, other'''    \n      enum:    \n        - indoor    \n        - mixed    \n        - outdoor    \n        - other    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    usableEnergy:    \n      description: 'Usable Energy. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWH** represents Kilowatt Hour'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Kw Hour'    \n    volEnergyDensity:    \n      description: 'Volume Energy density *(Code D)*. The format is structured by a sub-property of 2 items. The unit code (text) of measurement is **Wh/L** WattHour per Liter'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Wh/L    \n    weight:    \n      description: 'Weight. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KGM** represents KiloGramme'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/weight    \n        type: Property    \n        units: Kilograms    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateLastReported    \n    - batteryType    \n    - rechargeEnergySource    \n  type: object    \n  version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### StorageBatteryDevice NGSI-v2 key-values Example    \n\rHere is an example of a StorageBatteryDevice in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:StorageBatteryDevice:StorageBatteryDevice:MNCA-SBD-T1-G0-027\",  \n  \"type\": \"StorageBatteryDevice\",  \n  \"name\": \"SBD-T1-G0-027\",  \n  \"alternateName\": \"AirPort \u2013 global Observation\",  \n  \"description\": \"Description of the Solar Storage Battery Device\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.66481,  \n      7.196545  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"brandName\": \"LG ELEC\",  \n  \"modelName\": \"SBRESU10H\",  \n  \"manufacturerName\": \"OSCPOWER\",  \n  \"serialNumber\": \"BSSMA10267841259\",  \n  \"application\": [  \n    \"energyStorage\",  \n    \"emergencyStorage\"  \n  ],  \n  \"typeOfUse\": \"mixed\",  \n  \"installationMode\": \"ground\",  \n  \"installationCondition\": [  \n    \"extremeClimate\"  \n  ],  \n  \"possibilityOfUse\": \"stationary\",  \n  \"batteryType\": \"Li-Ion\",  \n  \"rechargeEnergySource\": \"electric\",  \n  \"typeEnergySource\": [  \n    \"network\",  \n    \"photovoltaic\"  \n  ],  \n  \"documentation\": \"https://www.myStoragebattery.fr\",  \n  \"owners\": [  \n    \"Airport-Division Maintenance\"  \n  ],  \n  \"dimension\": {  \n    \"width\": 74.4,  \n    \"height\": 90.7,  \n    \"depth\": 20.6  \n  },  \n  \"weight\": 175,  \n  \"protectionIP\": \"55\",  \n  \"protectionIK\": 10,  \n  \"temperature\": 25,  \n  \"operatingTemperature\": {  \n    \"storage\": [  \n      -10,  \n        50  \n    ],  \n    \"charge\": [  \n      0,  \n      40  \n    ],  \n    \"discharge\": [  \n      -15,  \n      40  \n    ]  \n  },  \n  \"nominalVoltage\": 48,  \n  \"nominalAmpere\": 20,  \n  \"nominalFrequency\": 60,  \n  \"nominalCapacity\": 63,  \n  \"storableEnergy\": 3.025,  \n  \"usableEnergy\": 3.012,  \n  \"operatingVoltage\": {  \n    \"min\": 38.5,  \n    \"max\": 55.0  \n  },  \n  \"operatingAmpere\": {  \n    \"min\": 1.0,  \n    \"max\": 1.5  \n  },  \n  \"operatingFrequency\": {  \n    \"min\": 57,  \n    \"max\": 63  \n  },  \n  \"massEnergyDensity\": {  \n    \"min\": 30,  \n    \"max\": 50  \n  },  \n  \"volEnergyDensity\": {  \n    \"min\": 75,  \n    \"max\": 120  \n  },  \n  \"maxOutputPower\": 12.8,  \n  \"peakPower\": 5.0,  \n  \"durationPeakPower\": 10,  \n  \"communication\": [  \n    \"CAN 2.0 B\",  \n    \"RS485Inverter\",  \n    \"RS485BMS\",  \n    \"dryContactTerminal\",  \n    \"maintenanceInterface\"  \n  ],  \n  \"operatingAltitude\": {  \n    \"min\": 0,  \n    \"max\": 500  \n  },  \n  \"averageLife\": 15,  \n  \"lifeCycleNumber\": {  \n    \"min\": 600,  \n    \"max\": 2400  \n  },  \n  \"toolBMS\": true,  \n  \"chargingModeAllowed\": [  \n    \"normal\"  \n  ],  \n  \"overloadAccepted\": true,  \n  \"overloadAcceptedTime\": \"00:00:03\"  \n  ,  \n  \"selfDischargeRate\": 0.02,  \n  \"capacityCnnn\": {  \n    \"C001\": [  \n      153.9,  \n      1.6  \n    ],  \n    \"C005\": [  \n      214.0,  \n      1.75  \n    ],  \n    \"C010\": [  \n      250.0,  \n      1.8  \n    ],  \n    \"C020\": [  \n      260.0,  \n      1.8  \n    ]  \n  },  \n  \"roundTripEfficiency\": 0.968,  \n  \"chargeDischargeReactivity\": 0.4,  \n  \"chargePower\": 123,  \n  \"chargeEfficiency\": 0.98,  \n  \"maximumVoltageEOC\": 48.6,  \n  \"dischargePower\": 96.8,  \n  \"dischargeEfficiency\": 0.95,  \n  \"minimumVoltageEOD\": 47.3  \n}  \n```  \n\r#### StorageBatteryDevice NGSI-v2 normalized Example    \n\rHere is an example of a StorageBatteryDevice in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:StorageBatteryDevice:StorageBatteryDevice:MNCA-SBD-T1-G0-027\",  \n  \"type\": \"StorageBatteryDevice\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SBD-T1-G0-027\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AirPort \u2013 global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Description of the Solar Storage Battery Device\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates \": [  \n        43.664810,  \n        7.196545  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"FR\",  \n      \"addressLocality\": \"Nice\",  \n      \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-03-17T08:45:00Z\"  \n    }  \n  },  \n  \"brandName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"LG ELEC\"  \n  },  \n  \"modelName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SBRESU10H\"  \n  },  \n  \"manufacturerName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"OSCPOWER\"  \n  },  \n  \"serialNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": \"BSSMA10267841259\"  \n  },  \n  \"application\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"energyStorage\",  \n      \"emergencyStorage\"  \n    ]  \n  },  \n  \"typeOfUse\": {  \n    \"type\": \"Property\",  \n    \"value\": \"mixed\"  \n  },  \n  \"installationMode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"ground\"  \n  },  \n  \"installationCondition\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"extremeClimate\"  \n    ]  \n  },  \n  \"possibilityOfUse\": {  \n    \"type\": \"Property\",  \n    \"value\": \"stationary\"  \n  },  \n  \"batteryType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Li-Ion\"  \n  },  \n  \"rechargeEnergySource\": {  \n    \"type\": \"Property\",  \n    \"value\": \"electric\"  \n  },  \n  \"typeEnergySource\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"network\",  \n      \"photovoltaic\"  \n    ]  \n  },  \n  \"documentation\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://www.myStoragebattery.fr\"  \n  },  \n  \"owners\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Airport-Division Maintenance\"  \n    ]  \n  },  \n  \"dimension\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"width\": 74.4,  \n      \"height\": 90.7,  \n      \"depth\": 20.6  \n    }  \n  },  \n  \"weight\": {  \n    \"type\": \"Property\",  \n    \"value\": 175  \n  },  \n  \"protectionIP\": {  \n    \"type\": \"Property\",  \n    \"value\": \"55\"  \n  },  \n  \"protectionIK\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"temperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 25  \n  },  \n  \"operatingTemperature\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"storage\": [  \n        -10,  \n        50  \n      ],  \n      \"charge\": [  \n        0,  \n        40  \n      ],  \n      \"discharge\": [  \n        -15,  \n        40  \n      ]  \n    }  \n  },  \n  \"nominalVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": 48  \n  },  \n  \"nominalAmpere\": {  \n    \"type\": \"Property\",  \n    \"value\": 20  \n  },  \n  \"nominalFrequency\": {  \n    \"type\": \"Property\",  \n    \"value\": 60  \n  },  \n  \"nominalCapacity\": {  \n    \"type\": \"Property\",  \n    \"value\": 63  \n  },  \n  \"storableEnergy\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.025  \n  },  \n  \"usableEnergy\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.012  \n  },  \n  \"operatingVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 38.5,  \n      \"max\": 55.0  \n    }  \n  },  \n  \"operatingAmpere\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 1.0,  \n      \"max\": 1.5  \n    }  \n  },  \n  \"operatingFrequency\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 57,  \n      \"max\": 63  \n    }  \n  },  \n  \"massEnergyDensity\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 30,  \n      \"max\": 50  \n    }  \n  },  \n  \"volEnergyDensity\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 75,  \n      \"max\": 120  \n    }  \n  },  \n  \"maxOutputPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 12.8  \n  },  \n  \"peakPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 5.0  \n  },  \n  \"durationPeakPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"communication\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"CAN 2.0 B\",  \n      \"RS485Inverter\",  \n      \"RS485BMS\",  \n      \"dryContactTerminal\",  \n      \"maintenanceInterface\"  \n    ]  \n  },  \n  \"operatingAltitude\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 0,  \n      \"max\": 500  \n    }  \n  },  \n  \"averageLife\": {  \n    \"type\": \"Property\",  \n    \"value\": 15  \n  },  \n  \"lifeCycleNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 600,  \n      \"max\": 2400  \n    }  \n  },  \n  \"toolBMS\": {  \n    \"type\": \"Property\",  \n    \"value\": true  \n  },  \n  \"chargingModeAllowed\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"normal\"  \n    ]  \n  },  \n  \"overloadAccepted\": {  \n    \"type\": \"Property\",  \n    \"value\": true  \n  },  \n  \"overloadAcceptedTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"T00:00:03\"  \n    }  \n  },  \n  \"selfDischargeRate\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"capacityCnnn\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"C001\": [  \n        153.9,  \n        1.60  \n      ],  \n      \"C005\": [  \n        214.0,  \n        1.75  \n      ],  \n      \"C010\": [  \n        250.0,  \n        1.80  \n      ],  \n      \"C020\": [  \n        260.0,  \n        1.80  \n      ]  \n    }  \n  },  \n  \"roundTripEfficiency\": {  \n    \"type\": \"Property\",  \n    \"value\": 96.8  \n  },  \n  \"chargeDischargeReactivity\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.4  \n  },  \n  \"chargePower\": {  \n    \"type\": \"Property\",  \n    \"value\": 123  \n  },  \n  \"chargeEfficiency\": {  \n    \"type\": \"Property\",  \n    \"value\": 98  \n  },  \n  \"maximumVoltageEOC\": {  \n    \"type\": \"Property\",  \n    \"value\": 48.6  \n  },  \n  \"dischargePower\": {  \n    \"type\": \"Property\",  \n    \"value\": 96.8  \n  },  \n  \"dischargeEfficiency\": {  \n    \"type\": \"Property\",  \n    \"value\": 95  \n  },  \n  \"minimumVoltageEOD\": {  \n    \"type\": \"Property\",  \n    \"value\": 47.3  \n  }  \n}  \n```  \n\r#### StorageBatteryDevice NGSI-LD key-values Example    \n\rHere is an example of a StorageBatteryDevice in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:StorageBatteryDevice:StorageBatteryDevice:MNCA-SBD-T1-G0-027\",  \n  \"type\": \"StorageBatteryDevice\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SBD-T1-G0-027\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AirPort \\u2013 global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Description of the Solar Storage Battery Device\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates \": [  \n        43.66481,  \n        7.196545  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"FR\",  \n      \"addressLocality\": \"Nice\",  \n      \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-03-17T08:45:00Z\"  \n    }  \n  },  \n  \"brandName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"LG ELEC\"  \n  },  \n  \"modelName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SBRESU10H\"  \n  },  \n  \"manufacturerName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"OSCPOWER\"  \n  },  \n  \"serialNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": \"BSSMA10267841259\"  \n  },  \n  \"application\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"energyStorage\",  \n      \"emergencyStorage\"  \n    ]  \n  },  \n  \"typeOfUse\": {  \n    \"type\": \"Property\",  \n    \"value\": \"mixed\"  \n  },  \n  \"installationMode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"ground\"  \n  },  \n  \"installationCondition\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"extremeClimate\"  \n    ]  \n  },  \n  \"possibilityOfUse\": {  \n    \"type\": \"Property\",  \n    \"value\": \"stationary\"  \n  },  \n  \"batteryType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Li-Ion\"  \n  },  \n  \"rechargeEnergySource\": {  \n    \"type\": \"Property\",  \n    \"value\": \"electric\"  \n  },  \n  \"typeEnergySource\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"network\",  \n      \"photovoltaic\"  \n    ]  \n  },  \n  \"documentation\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://www.myStoragebattery.fr\"  \n  },  \n  \"owners\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Airport-Division Maintenance\"  \n    ]  \n  },  \n  \"dimension\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"width\": 74.4,  \n      \"height\": 90.7,  \n      \"depth\": 20.6  \n    }  \n  },  \n  \"weight\": {  \n    \"type\": \"Property\",  \n    \"value\": 175  \n  },  \n  \"protectionIP\": {  \n    \"type\": \"Property\",  \n    \"value\": \"55\"  \n  },  \n  \"protectionIK\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"temperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 25  \n  },  \n  \"operatingTemperature\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"storage\": [  \n        -10,  \n        50  \n      ],  \n      \"charge\": [  \n        0,  \n        40  \n      ],  \n      \"discharge\": [  \n        -15,  \n        40  \n      ]  \n    }  \n  },  \n  \"nominalVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": 48  \n  },  \n  \"nominalAmpere\": {  \n    \"type\": \"Property\",  \n    \"value\": 20  \n  },  \n  \"nominalFrequency\": {  \n    \"type\": \"Property\",  \n    \"value\": 60  \n  },  \n  \"nominalCapacity\": {  \n    \"type\": \"Property\",  \n    \"value\": 63  \n  },  \n  \"storableEnergy\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.025  \n  },  \n  \"usableEnergy\": {  \n    \"type\": \"Property\",  \n    \"value\": 3.012  \n  },  \n  \"operatingVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 38.5,  \n      \"max\": 55.0  \n    }  \n  },  \n  \"operatingAmpere\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 1.0,  \n      \"max\": 1.5  \n    }  \n  },  \n  \"operatingFrequency\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 57,  \n      \"max\": 63  \n    }  \n  },  \n  \"massEnergyDensity\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 30,  \n      \"max\": 50  \n    }  \n  },  \n  \"volEnergyDensity\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 75,  \n      \"max\": 120  \n    }  \n  },  \n  \"maxOutputPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 12.8  \n  },  \n  \"peakPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 5.0  \n  },  \n  \"durationPeakPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"communication\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"CAN 2.0 B\",  \n      \"RS485Inverter\",  \n      \"RS485BMS\",  \n      \"dryContactTerminal\",  \n      \"maintenanceInterface\"  \n    ]  \n  },  \n  \"operatingAltitude\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 0,  \n      \"max\": 500  \n    }  \n  },  \n  \"averageLife\": {  \n    \"type\": \"Property\",  \n    \"value\": 15  \n  },  \n  \"lifeCycleNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 600,  \n      \"max\": 2400  \n    }  \n  },  \n  \"toolBMS\": {  \n    \"type\": \"Property\",  \n    \"value\": true  \n  },  \n  \"chargingModeAllowed\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"normal\"  \n    ]  \n  },  \n  \"overloadAccepted\": {  \n    \"type\": \"Property\",  \n    \"value\": true  \n  },  \n  \"overloadAcceptedTime\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"T00:00:03\"  \n    }  \n  },  \n  \"selfDischargeRate\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"capacityCnnn\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"C001\": [  \n        153.9,  \n        1.6  \n      ],  \n      \"C005\": [  \n        214.0,  \n        1.75  \n      ],  \n      \"C010\": [  \n        250.0,  \n        1.8  \n      ],  \n      \"C020\": [  \n        260.0,  \n        1.8  \n      ]  \n    }  \n  },  \n  \"roundTripEfficiency\": {  \n    \"type\": \"Property\",  \n    \"value\": 96.8  \n  },  \n  \"chargeDischargeReactivity\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.4  \n  },  \n  \"chargePower\": {  \n    \"type\": \"Property\",  \n    \"value\": 123  \n  },  \n  \"chargeEfficiency\": {  \n    \"type\": \"Property\",  \n    \"value\": 98  \n  },  \n  \"maximumVoltageEOC\": {  \n    \"type\": \"Property\",  \n    \"value\": 48.6  \n  },  \n  \"dischargePower\": {  \n    \"type\": \"Property\",  \n    \"value\": 96.8  \n  },  \n  \"dischargeEfficiency\": {  \n    \"type\": \"Property\",  \n    \"value\": 95  \n  },  \n  \"minimumVoltageEOD\": {  \n    \"type\": \"Property\",  \n    \"value\": 47.3  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### StorageBatteryDevice NGSI-LD normalized Example    \n\rHere is an example of a StorageBatteryDevice in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:StorageBatteryDevice:StorageBatteryDevice:MNCA-SBD-T1-G0-027\",  \n  \"type\": \"StorageBatteryDevice\",  \n  \"name\": \"SBD-T1-G0-027\",  \n  \"alternateName\": \"AirPort \\u2013 global Observation\",  \n  \"description\": \"Description of the Solar Storage Battery Device\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.66481,  \n      7.196545  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"brandName\": \"LG ELEC\",  \n  \"modelName\": \"SBRESU10H\",  \n  \"manufacturerName\": \"OSCPOWER\",  \n  \"serialNumber\": \"BSSMA10267841259\",  \n  \"application\": [  \n    \"energyStorage\",  \n    \"emergencyStorage\"  \n  ],  \n  \"typeOfUse\": \"mixed\",  \n  \"installationMode\": \"ground\",  \n  \"installationCondition\": [  \n    \"extremeClimate\"  \n  ],  \n  \"possibilityOfUse\": \"stationary\",  \n  \"batteryType\": \"Li-Ion\",  \n  \"rechargeEnergySource\": \"electric\",  \n  \"typeEnergySource\": [  \n    \"network\",  \n    \"photovoltaic\"  \n  ],  \n  \"documentation\": \"https://www.myStoragebattery.fr\",  \n  \"owners\": [  \n    \"Airport-Division Maintenance\"  \n  ],  \n  \"dimension\": {  \n    \"width\": 74.4,  \n    \"height\": 90.7,  \n    \"depth\": 20.6  \n  },  \n  \"weight\": 175,  \n  \"protectionIP\": \"55\",  \n  \"protectionIK\": 10,  \n  \"temperature\": 25,  \n  \"operatingTemperature\": {  \n    \"storage\": [  \n      -10,  \n      50  \n    ],  \n    \"charge\": [  \n      0,  \n      40  \n    ],  \n    \"discharge\": [  \n      -15,  \n      40  \n    ]  \n  },  \n  \"nominalVoltage\": 48,  \n  \"nominalAmpere\": 20,  \n  \"nominalFrequency\": 60,  \n  \"nominalCapacity\": 63,  \n  \"storableEnergy\": 3.025,  \n  \"usableEnergy\": 3.012,  \n  \"operatingVoltage\": {  \n    \"min\": 38.5,  \n    \"max\": 55.0  \n  },  \n  \"operatingAmpere\": {  \n    \"min\": 1.0,  \n    \"max\": 1.5  \n  },  \n  \"operatingFrequency\": {  \n    \"min\": 57,  \n    \"max\": 63  \n  },  \n  \"massEnergyDensity\": {  \n    \"min\": 30,  \n    \"max\": 50  \n  },  \n  \"volEnergyDensity\": {  \n    \"min\": 75,  \n    \"max\": 120  \n  },  \n  \"maxOutputPower\": 12.8,  \n  \"peakPower\": 5.0,  \n  \"durationPeakPower\": 10,  \n  \"communication\": [  \n    \"CAN 2.0 B\",  \n    \"RS485Inverter\",  \n    \"RS485BMS\",  \n    \"dryContactTerminal\",  \n    \"maintenanceInterface\"  \n  ],  \n  \"operatingAltitude\": {  \n    \"min\": 0,  \n    \"max\": 500  \n  },  \n  \"averageLife\": 15,  \n  \"lifeCycleNumber\": {  \n    \"min\": 600,  \n    \"max\": 2400  \n  },  \n  \"toolBMS\": true,  \n  \"chargingModeAllowed\": [  \n    \"normal\"  \n  ],  \n  \"overloadAccepted\": true,  \n  \"overloadAcceptedTime\": \"00:00:03\",  \n  \"selfDischargeRate\": 0.02,  \n  \"capacityCnnn\": {  \n    \"C001\": [  \n      153.9,  \n      1.6  \n    ],  \n    \"C005\": [  \n      214.0,  \n      1.75  \n    ],  \n    \"C010\": [  \n      250.0,  \n      1.8  \n    ],  \n    \"C020\": [  \n      260.0,  \n      1.8  \n    ]  \n  },  \n  \"roundTripEfficiency\": 0.968,  \n  \"chargeDischargeReactivity\": 0.4,  \n  \"chargePower\": 123,  \n  \"chargeEfficiency\": 0.98,  \n  \"maximumVoltageEOC\": 48.6,  \n  \"dischargePower\": 96.8,  \n  \"dischargeEfficiency\": 0.95,  \n  \"minimumVoltageEOD\": 47.3,  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: StorageBatteryMeasurement
        - MODEL_DESCRIPTION: Storage Battery Observed Data Model is intended to measure the remaining energy capacity in a battery, which can be redistributed in the form of electrical energy. These functions apply from a source which depends on the type of battery (reference to the attribute 'batteryType' of the Data Model `StorageBatteryDevice`).
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              StorageBatteryMeasurement of the Subject Battery.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: StorageBatteryMeasurement  \n=================================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Battery/blob/master/StorageBatteryMeasurement/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Storage Battery Observed Data Model is intended to measure the remaining energy capacity in a battery, which can be redistributed in the form of electrical energy. These functions apply from a source which depends on the type of battery (reference to the attribute 'batteryType' of the Data Model `StorageBatteryDevice`).**  \n\rversion: 0.0.2  \n\n\r## List of properties  \n\n\r- `activePower`: Active Power, where 'phi' is the phase shift of the current compared to the voltage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWT** represents Kilowatt  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `batteryAssessmentMethods`: Assessment and calculation methods for measurements assessing the condition of the battery. Enum:'ampereHourMetry, dischargeTest, electrolyteDensity, highFrequencyImpedance, lowFrequencyImpedance, mathematicalModel, operatingVoltageWithClosedCircuit, quiescentVoltageWithOpenCircuit'  \r- `batteryLevel`: Device's battery level. A unique value of the following value 0.0=battery empty, 1.0=Battery full, -1.0=Transiently not determined.  \r- `batteryStatus`: Status of the battery during the measurement( giving or not energy). Enum:'consumingEnergy, givingEnergy, standby'  \r- `current`: Current. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere.   \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateEnergyMeteringStarted`: The starting date for metering energy in an ISO8601 UTC format  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObservedFrom`: Observation period: Start date and time in an ISO8601 UTC format. The attribute can be used in addition to the 'dateObserved' attribute when it corresponds to a time interval to be highlighted.  \r- `dateObservedTo`: Observation period: End date and time in an ISO8601 UTC format. The attribute can be used in addition to the 'dateObserved' attribute when it corresponds to a time interval to be highlighted.  \r- `deepOfDischarge`: The Deep of Discharge (Code DoD) expressed in % is the ratio between the capacity already discharged and the nominal capacity of the accumulator. That is to say the energy consumed in the battery. Rule  [DOD] = 100 % - [SOC]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `inverterStatus`: Status of the inverter. A combination of values. Enum:'00-Onsector, 01-PowerFailure/OnBattery, 02-LossCommunication, 03-BatteryFault, 04-SystemShutDown, 05-TensionDip, 06-OverVoltage, 07-VoltageDrop, 08-VoltageIncrease, 09-LineNoise, 10-FrequencyVariation, 11-TransientDistortion, 12-HarmonicDistortion'  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `openCircuitVoltage`: The Open Circuit Voltage (Code OCV) expressed in Volt is the difference of electrical potential between two terminals of a device when disconnected from any circuit. There is no external load connected and No external electric current flows between the terminals. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `reactivePower`: Reactive Power used by circuits. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **K5** represents kilovolt-ampere-reactive  \r- `refPointOfInterest`: Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the Repository.  \r- `refStorageBatteryDevice`: Reference to a [Storage Battery Device](https://github.com/FIWARE/data-models/blob/master/specs/Energy/StorageBatteryDevice/doc/spec.md) which captured this observation, if the entity is used.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `stateOfCharge`: The State of Charge (Code SoC) expressed in % is defined as the ratio between the remaining and the current capacities. The current capacity is the maximum capacity that can be withdrawn from the fully charged battery under specific discharge conditions. Rule [SOC] + [DOD] = 100 %. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent  \r- `stateOfHealth`: The State of Health  (Code SoH) expressed in % is defined as the ratio between the maximum amount of charge that a fully charged battery can provide under its nominal discharge regime, and its nominal capacity. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent  \r- `temperature`: Main Temperature recorded at the time of Observation compared to the  nominal reference temperature of the device. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius  \r- `type`: NGSI Entity type. It has to be StorageBatteryMeasurement  \r  \n\rRequired properties  \n- `dateObserved`  \r- `id`  \r- `location`  \r- `stateOfCharge`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nStorageBatteryMeasurement:    \n  description: 'Storage Battery Observed Data Model is intended to measure the remaining energy capacity in a battery, which can be redistributed in the form of electrical energy. These functions apply from a source which depends on the type of battery (reference to the attribute ''batteryType'' of the Data Model `StorageBatteryDevice`).'    \n  properties:    \n    activePower:    \n      description: 'Active Power, where ''phi'' is the phase shift of the current compared to the voltage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KWT** represents Kilowatt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Kilowatt.    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    batteryAssessmentMethods:    \n      description: 'Assessment and calculation methods for measurements assessing the condition of the battery. Enum:''ampereHourMetry, dischargeTest, electrolyteDensity, highFrequencyImpedance, lowFrequencyImpedance, mathematicalModel, operatingVoltageWithClosedCircuit, quiescentVoltageWithOpenCircuit'''    \n      enum:    \n        - ampereHourMetry    \n        - dischargeTest    \n        - electrolyteDensity    \n        - highFrequencyImpedance    \n        - lowFrequencyImpedance    \n        - mathematicalModel    \n        - operatingVoltageWithClosedCircuit    \n        - quiescentVoltageWithOpenCircuit    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    batteryLevel:    \n      description: 'Device''s battery level. A unique value of the following value 0.0=battery empty, 1.0=Battery full, -1.0=Transiently not determined.'    \n      oneOf:    \n        - maximum: 1    \n          minimum: 0    \n          type: number    \n        - enum:    \n            - -1    \n          type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    batteryStatus:    \n      description: 'Status of the battery during the measurement( giving or not energy). Enum:''consumingEnergy, givingEnergy, standby'''    \n      enum:    \n        - consumingEnergy    \n        - givingEnergy    \n        - standby    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    current:    \n      description: 'Current. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere. '    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Ampere    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateEnergyMeteringStarted:    \n      description: 'The starting date for metering energy in an ISO8601 UTC format'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime.    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObservedFrom:    \n      description: 'Observation period: Start date and time in an ISO8601 UTC format. The attribute can be used in addition to the ''dateObserved'' attribute when it corresponds to a time interval to be highlighted.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateObservedTo:    \n      description: 'Observation period: End date and time in an ISO8601 UTC format. The attribute can be used in addition to the ''dateObserved'' attribute when it corresponds to a time interval to be highlighted.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    deepOfDischarge:    \n      description: 'The Deep of Discharge (Code DoD) expressed in % is the ratio between the capacity already discharged and the nominal capacity of the accumulator. That is to say the energy consumed in the battery. Rule  [DOD] = 100 % - [SOC]. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &storagebatterymeasurement_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    inverterStatus:    \n      description: 'Status of the inverter. A combination of values. Enum:''00-Onsector, 01-PowerFailure/OnBattery, 02-LossCommunication, 03-BatteryFault, 04-SystemShutDown, 05-TensionDip, 06-OverVoltage, 07-VoltageDrop, 08-VoltageIncrease, 09-LineNoise, 10-FrequencyVariation, 11-TransientDistortion, 12-HarmonicDistortion'''    \n      items:    \n        enum:    \n          - 00-OnSector    \n          - 01-PowerFailure/OnBattery    \n          - 02-LossCommunication    \n          - 03-BatteryFault    \n          - 04-SystemShutDown    \n          - 05-TensionDip    \n          - 06-OverVoltage    \n          - 07-VoltageDrop    \n          - 08-VoltageIncrease    \n          - 09-LineNoise    \n          - 10-FrequencyVariation    \n          - 11-TransientDistortion    \n          - 12-HarmonicDistortion    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    openCircuitVoltage:    \n      description: 'The Open Circuit Voltage (Code OCV) expressed in Volt is the difference of electrical potential between two terminals of a device when disconnected from any circuit. There is no external load connected and No external electric current flows between the terminals. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Volt.    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *storagebatterymeasurement_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    reactivePower:    \n      description: 'Reactive Power used by circuits. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **K5** represents kilovolt-ampere-reactive'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: kilovolt-ampere-reactive.    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the Repository.'    \n      x-ngsi:    \n        type: Relationship    \n    refStorageBatteryDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to a [Storage Battery Device](https://github.com/FIWARE/data-models/blob/master/specs/Energy/StorageBatteryDevice/doc/spec.md) which captured this observation, if the entity is used.'    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    stateOfCharge:    \n      description: 'The State of Charge (Code SoC) expressed in % is defined as the ratio between the remaining and the current capacities. The current capacity is the maximum capacity that can be withdrawn from the fully charged battery under specific discharge conditions. Rule [SOC] + [DOD] = 100 %. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    stateOfHealth:    \n      description: 'The State of Health  (Code SoH) expressed in % is defined as the ratio between the maximum amount of charge that a fully charged battery can provide under its nominal discharge regime, and its nominal capacity. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    temperature:    \n      description: 'Main Temperature recorded at the time of Observation compared to the  nominal reference temperature of the device. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'celsius degrees .'    \n    type:    \n      description: 'NGSI Entity type. It has to be StorageBatteryMeasurement'    \n      enum:    \n        - StorageBatteryMeasurement    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateObserved    \n    - stateOfCharge    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Battery/blob/master/StorageBatteryMeasurement/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/data-models.Energy/StorageBatteryMeasurement/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### StorageBatteryMeasurement NGSI-v2 key-values Example    \n\rHere is an example of a StorageBatteryMeasurement in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:StorageBatteryMeasurement:StorageBatteryMeasurement:MNCA-SBM-T1-G0-027\",  \n  \"type\": \"StorageBatteryMeasurement\",  \n  \"name\": \"SBM-T1-G0-027\",  \n  \"alternateName\": \"AirPort \u2013 global Observation\",  \n  \"description\": \"Measurement of the level of Solar Storage Battery\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.664810,  \n      7.196545  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"dateObserved\": \"2020-03-17T08:45:00Z\",  \n  \"refStorageBatteryDevice\": \"urn:ngsi-ld:StorageBatteryDevice:SBD-T1-G0-027\",  \n  \"batteryLevel\": -1,  \n  \"batteryStatus\": \"standby\",  \n  \"batteryAssessmentMethods\": \"dischargeTest\",  \n  \"dateEnergyMeteringStarted\": \"2020-03-16T10:30:00Z\",  \n  \"stateOfCharge\": 0.70,  \n  \"deepOfDischarge\": 0.286,  \n  \"stateOfHealth\": 0.8235,  \n  \"openCircuitVoltage\": 47.3,  \n  \"inverterStatus\": [  \n    \"00-OnSector\",  \n    \"06-OverVoltage\"  \n  ]  \n}  \n```  \n\r#### StorageBatteryMeasurement NGSI-v2 normalized Example    \n\rHere is an example of a StorageBatteryMeasurement in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:StorageBatteryMeasurement:StorageBatteryMeasurement:MNCA-SBM-T1-G0-027\",  \n  \"type\": \"StorageBatteryMeasurement\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SBM-T1-G0-027\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AirPort \u2013 global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Measurement of the level of Solar Storage Battery\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates \": [  \n        43.664810,  \n        7.196545  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"FR\",  \n      \"addressLocality\": \"Nice\",  \n      \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-03-17T08:45:00Z\"  \n    }  \n  },  \n  \"refStorageBatteryDevice\": {  \n    \"type\": \"RelationShip\",  \n    \"object\": \"urn:ngsi-ld:StorageBatteryDevice:SBD-T1-G0-027\"  \n  },  \n  \"batteryLevel\": {  \n    \"type\": \"Property\",  \n    \"value\": -1  \n  },  \n  \"batteryStatus\": {  \n    \"type\": \"Property\",  \n    \"value\": \"standby\"  \n  },  \n  \"batteryAssessmentMethods\": {  \n    \"type\": \"Property\",  \n    \"value\": \"dischargeTest\"  \n  },  \n  \"dateEnergyMeteringStarted\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-03-16T10:30:00Z\"  \n    }  \n  },  \n  \"stateOfCharge\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.70  \n  },  \n  \"measurementInterval\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"temperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 25.2  \n  },  \n  \"deepOfDischarge\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.286  \n  },  \n  \"measurementInterval\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"temperature\": {  \n    \"type\": \"Property\",  \n    \"value\": 24.3  \n  },  \n  \"stateOfHealth\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.8235  \n  },  \n  \"openCircuitVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": 47.3  \n  },  \n  \"inverterStatus\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"00-OnSector\",  \n      \"06-OverVoltage\"  \n    ]  \n  }  \n}  \n```  \n\r#### StorageBatteryMeasurement NGSI-LD key-values Example    \n\rHere is an example of a StorageBatteryMeasurement in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:StorageBatteryMeasurement:StorageBatteryMeasurement:MNCA-SBM-T1-G0-027\",  \n    \"type\": \"StorageBatteryMeasurement\",  \n    \"address\": {  \n        \"addressCountry\": \"FR\",  \n        \"addressLocality\": \"Nice\",  \n        \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n    },  \n    \"alternateName\": \"AirPort \\u2013 global Observation\",  \n    \"areaServed\": \"Nice Aeroport\",  \n    \"batteryAssessmentMethods\": \"dischargeTest\",  \n    \"batteryLevel\": -1,  \n    \"batteryStatus\": \"standby\",  \n    \"dateEnergyMeteringStarted\": \"2020-03-16T10:30:00Z\",  \n    \"dateObserved\": \"2020-03-17T08:45:00Z\",  \n    \"deepOfDischarge\": 0.286,  \n    \"description\": \"Measurement of the level of Solar Storage Battery\",  \n    \"inverterStatus\": [  \n        \"00-OnSector\",  \n        \"06-OverVoltage\"  \n    ],  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            43.66481,  \n            7.196545  \n        ]  \n    },  \n    \"name\": \"SBM-T1-G0-027\",  \n    \"openCircuitVoltage\": 47.3,  \n    \"refStorageBatteryDevice\": \"urn:ngsi-ld:StorageBatteryDevice:SBD-T1-G0-027\",  \n    \"stateOfCharge\": 0.7,  \n    \"stateOfHealth\": 0.8235,  \n    \"@context\": [  \n        \"https://schema.lab.fiware.org/ld/context\",  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Battery/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### StorageBatteryMeasurement NGSI-LD normalized Example    \n\rHere is an example of a StorageBatteryMeasurement in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:StorageBatteryMeasurement:StorageBatteryMeasurement:MNCA-SBM-T1-G0-027\",  \n    \"type\": \"StorageBatteryMeasurement\",  \n    \"address\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"addressCountry\": \"FR\",  \n            \"addressLocality\": \"Nice\",  \n            \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n        }  \n    },  \n    \"alternateName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"AirPort \\u2013 global Observation\"  \n    },  \n    \"areaServed\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice Aeroport\"  \n    },  \n    \"batteryAssessmentMethods\": {  \n        \"type\": \"Property\",  \n        \"value\": \"dischargeTest\"  \n    },  \n    \"batteryLevel\": {  \n        \"type\": \"Property\",  \n        \"value\": -1  \n    },  \n    \"batteryStatus\": {  \n        \"type\": \"Property\",  \n        \"value\": \"standby\"  \n    },  \n    \"dateEnergyMeteringStarted\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2020-03-16T10:30:00Z\"  \n        }  \n    },  \n    \"dateObserved\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2020-03-17T08:45:00Z\"  \n        }  \n    },  \n    \"deepOfDischarge\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.286  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Measurement of the level of Solar Storage Battery\"  \n    },  \n    \"inverterStatus\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"00-OnSector\",  \n            \"06-OverVoltage\"  \n        ]  \n    },  \n    \"location\": {  \n        \"type\": \"GeoProperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates \": [  \n                43.66481,  \n                7.196545  \n            ]  \n        }  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"SBM-T1-G0-027\"  \n    },  \n    \"openCircuitVoltage\": {  \n        \"type\": \"Property\",  \n        \"value\": 47.3  \n    },  \n    \"refStorageBatteryDevice\": {  \n        \"type\": \"RelationShip\",  \n        \"object\": \"urn:ngsi-ld:StorageBatteryDevice:SBD-T1-G0-027\"  \n    },  \n    \"stateOfCharge\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.7  \n    },  \n    \"stateOfHealth\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.8235  \n    },  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: Consumption
      MODELS:
    - SUBMODULE_SHORT_NAME: Energy
      MODELS:
        - MODEL_NAME: ACMeasurement
        - MODEL_DESCRIPTION: The Data Model intended to measure the electrical energies consumed by an electrical system which uses an Alternating Current (AC) for a three-phase (L1, L2, L3) or single-phase (L) and neutral (N). It integrates the initial version of the data Modem [THREEPHASEMEASUREMENT], extended to also perform single-phase measurements. It includes attributes for various electrical measurements such as power, frequency, current and voltage.
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              InverterDevice of the Subject Energy.

        - MODEL_DOCUMENTATION: "Entity: ACMeasurement  \n=====================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Energy/blob/master/ACMeasurement/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The Data Model intended to measure the electrical energies consumed by an electrical system which uses an Alternating Current (AC) for a three-phase (L1, L2, L3) or single-phase (L) and neutral (N). It integrates the initial version of the data Modem [THREEPHASEMEASUREMENT], extended to also perform single-phase measurements. It includes attributes for various electrical measurements such as power, frequency, current and voltage.**  \n\rversion:   \n\n\r## List of properties  \n\n\r- `activeEnergyExport`: Active energy exported per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `activeEnergyImport`: Active energy imported i.e. consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `activePower`: Active power consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `apparentEnergyExport`: Apparent energy exported per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `apparentEnergyImport`: Apparent energy imported i.e. consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `apparentPower`: Apparent power consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `current`: Electrical current. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateEnergyMeteringStarted`: The starting date for metering energy in an ISO8601 UTC format.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `dateObserved`: Date and time of this observation represented by an ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval to separate attributes `dateObservedFrom`,`dateObservedTo`.  \r- `dateObservedFrom`: Observation period: Start date and time in an ISO8601 UTC format. The attribute can be used in addition to the `dateObserved` attribute when it corresponds to a time interval to be highlighted.  \r- `dateObservedTo`: Observation period: End date and time in an ISO8601 UTC format. The attribute can be used in addition to the `dateObserved` attribute when it corresponds to a time interval to be highlighted.  \r- `description`: A description of this item  \r- `displacementPowerFactor`: Displacement power factor for each phase. The quantity is based on the fundamental frequency of the system.  \r- `frequency`: The frequency of the circuit. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `phaseToPhaseVoltage`: Voltage between phases. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `phaseType`: Type of Phase. A unique value. Enum:'singlePhase, threePhase'  \r- `phaseVoltage`: The voltage between each phase and neutral conductor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `powerFactor`: Power factor for each phase.  \r- `reactiveEnergyExport`: Fundamental frequency reactive energy exported per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `reactiveEnergyImport`: Fundamental frequency reactive energy imported i.e. consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `reactivePower`: Fundamental frequency reactive power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `refDevice`: Reference to the devices which captured this observation  \r- `refTargetDevice`: Reference to a list of the devices for which the measurement was taken  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `thdCurrent`: Total harmonic distortion of current for each phase.  \r- `thdVoltage`: Total harmonic distortion of voltage for each phase.  \r- `totalActiveEnergyExport`: Total energy imported i.e. consumed . The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalActiveEnergyImport`: Total energy imported i.e. consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalActivePower`: Total Active Power consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalApparentEnergyExport`: Total energy exported (with regards to apparent power). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalApparentEnergyImport`: Total energy imported i.e. consumed (with regards to apparent power). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalApparentPower`: Total Apparent Power consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalDisplacementPowerFactor`: Sum of Displacement power factor including all phases. The quantity is based on the fundamental frequency of the system.  \r- `totalPowerFactor`: Sum of Power factor including all phases.  \r- `totalReactiveEnergyExport`: Total fundamental frequency reactive energy exported. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalReactiveEnergyImport`: Total energy imported i.e. consumed (with regards to fundamental frequency reactive power). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `totalReactivePower`: Total Reactive Power consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)  \r- `type`: NGSI property type. It has to be ACMeasurement  \r  \n\rRequired properties  \n- `id`  \r- `phaseType`  \r- `type`  \r  \n\rAdditional Information about Attributes.  For some attributes such as current and voltage the value is a structured value with properties for the Single-Phase (L) or three different phases (L1, L2 and L3). For some measurements such as the different power types (active, reactive and apparent power) there is an attribute for the total from all phases. The rules are defined as  - Three Phase - Total = L1 + L2 + L3 - Single Phase - Total = L.  For most of the attributes, there are various ways they can be actually measured. For this purpose the measurementType Meta Data Attribute can be used. It can have the following values average, rms, minimum, maximum. When using the values [average, rms, minimum, maximum], another metadata attribute called measurementInterval should be used to give the length of the measurement period in seconds. Also a timestamp attribute should be the end time of the measurement period.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nACMeasurement:    \n  description: 'The Data Model intended to measure the electrical energies consumed by an electrical system which uses an Alternating Current (AC) for a three-phase (L1, L2, L3) or single-phase (L) and neutral (N). It integrates the initial version of the data Modem [THREEPHASEMEASUREMENT], extended to also perform single-phase measurements. It includes attributes for various electrical measurements such as power, frequency, current and voltage.'    \n  properties:    \n    activeEnergyExport:    \n      description: 'Active energy exported per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: 'kilowatt hour'    \n    activeEnergyImport:    \n      description: 'Active energy imported i.e. consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: 'kilowatt hour'    \n    activePower:    \n      description: 'Active power consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: Watt    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    apparentEnergyExport:    \n      description: 'Apparent energy exported per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: kilovolt-ampere-hour    \n    apparentEnergyImport:    \n      description: 'Apparent energy imported i.e. consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: kilovolt-ampere-hour    \n    apparentPower:    \n      description: 'Apparent power consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: Watt    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    current:    \n      description: 'Electrical current. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          type: number    \n        L2:    \n          type: number    \n        L3:    \n          type: number    \n        N:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: Ampere    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateEnergyMeteringStarted:    \n      description: 'The starting date for metering energy in an ISO8601 UTC format.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateObserved:    \n      description: 'Date and time of this observation represented by an ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval to separate attributes `dateObservedFrom`,`dateObservedTo`.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateObservedFrom:    \n      description: 'Observation period: Start date and time in an ISO8601 UTC format. The attribute can be used in addition to the `dateObserved` attribute when it corresponds to a time interval to be highlighted.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateObservedTo:    \n      description: 'Observation period: End date and time in an ISO8601 UTC format. The attribute can be used in addition to the `dateObserved` attribute when it corresponds to a time interval to be highlighted.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    displacementPowerFactor:    \n      description: 'Displacement power factor for each phase. The quantity is based on the fundamental frequency of the system.'    \n      properties:    \n        L1:    \n          maximum: 1    \n          minimum: -1    \n          type: number    \n        L2:    \n          maximum: 1    \n          minimum: -1    \n          type: number    \n        L3:    \n          maximum: 1    \n          minimum: -1    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    frequency:    \n      description: 'The frequency of the circuit. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Hertz    \n    id:    \n      anyOf: &acmeasurement_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *acmeasurement_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    phaseToPhaseVoltage:    \n      description: 'Voltage between phases. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L12:    \n          minimum: 0    \n          type: number    \n        L23:    \n          minimum: 0    \n          type: number    \n        L31:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: Volts    \n    phaseType:    \n      description: 'Type of Phase. A unique value. Enum:''singlePhase, threePhase'''    \n      enum:    \n        - singlePhase    \n        - threePhase    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    phaseVoltage:    \n      description: 'The voltage between each phase and neutral conductor. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: Volts    \n    powerFactor:    \n      description: 'Power factor for each phase.'    \n      properties:    \n        L1:    \n          maximum: 1    \n          minimum: -1    \n          type: number    \n        L2:    \n          maximum: 1    \n          minimum: -1    \n          type: number    \n        L3:    \n          maximum: 1    \n          minimum: -1    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    reactiveEnergyExport:    \n      description: 'Fundamental frequency reactive energy exported per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: kilovolt-ampere-reactive-hour    \n    reactiveEnergyImport:    \n      description: 'Fundamental frequency reactive energy imported i.e. consumed per phase. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          minimum: 0    \n          type: number    \n        L2:    \n          minimum: 0    \n          type: number    \n        L3:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: kilovolt-ampere-reactive-hour    \n    reactivePower:    \n      description: 'Fundamental frequency reactive power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      properties:    \n        L1:    \n          type: number    \n        L2:    \n          type: number    \n        L3:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: volts-ampere-reactive    \n    refDevice:    \n      description: 'Reference to the devices which captured this observation'    \n      items:    \n        anyOf: *acmeasurement_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    refTargetDevice:    \n      description: 'Reference to a list of the devices for which the measurement was taken'    \n      items:    \n        anyOf: *acmeasurement_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    thdCurrent:    \n      description: 'Total harmonic distortion of current for each phase.'    \n      properties:    \n        L1:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n        L2:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n        L3:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    thdVoltage:    \n      description: 'Total harmonic distortion of voltage for each phase.'    \n      properties:    \n        L1:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n        L2:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n        L3:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    totalActiveEnergyExport:    \n      description: 'Total energy imported i.e. consumed . The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'kilowatt hour'    \n    totalActiveEnergyImport:    \n      description: 'Total energy imported i.e. consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'kilowatt hour'    \n    totalActivePower:    \n      description: 'Total Active Power consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Watt    \n    totalApparentEnergyExport:    \n      description: 'Total energy exported (with regards to apparent power). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: kilovolt-ampere-hour    \n    totalApparentEnergyImport:    \n      description: 'Total energy imported i.e. consumed (with regards to apparent power). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: kilovolt-ampere-hour.    \n    totalApparentPower:    \n      description: 'Total Apparent Power consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volt-ampere    \n    totalDisplacementPowerFactor:    \n      description: 'Sum of Displacement power factor including all phases. The quantity is based on the fundamental frequency of the system.'    \n      maximum: 1    \n      minimum: -1    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    totalPowerFactor:    \n      description: 'Sum of Power factor including all phases.'    \n      maximum: 1    \n      minimum: -1    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    totalReactiveEnergyExport:    \n      description: 'Total fundamental frequency reactive energy exported. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n        units: kilovolt-ampere-reactive-hour    \n    totalReactiveEnergyImport:    \n      description: 'Total energy imported i.e. consumed (with regards to fundamental frequency reactive power). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: kilovolt-ampere-reactive-hour.    \n    totalReactivePower:    \n      description: 'Total Reactive Power consumed. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes)'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: volt-ampere-reactive    \n    type:    \n      description: 'NGSI property type. It has to be ACMeasurement'    \n      enum:    \n        - ACMeasurement    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - phaseType    \n  type: object    \n  version: \"\"    \n```  \n</details>    \n\rNote. The values will be conveyed by 1 or 3 sub properties depending The Type of Phase for each phase Single-Phase. Individual values L. ThreePhase. Sum of the individual values. L1, L2, L3. All values are calculated from the start date of the measurement [dateEnergyMeteringStarted]  \n\r## Example payloads    \n\r#### ACMeasurement NGSI-v2 key-values Example    \n\rHere is an example of a ACMeasurement in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:ACMeasurement:ACMeasurement:MNCA-ACM-001\",  \n  \"type\": \"ACMeasurement\",  \n  \"name\": \" AirPort-NCE-T1-F01-TR05-ACTP\",  \n  \"alternateName\": \"AirPort global Observation\",  \n  \"description\": \" Measurement corresponding to the ventilation machine of the technical rooms Terminal 1 T1 Floor 01 Technical Room 05 for Triphase alternating current.\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.66481,  \n      7.196545  \n    ]  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"dateObserved\": \"2020-03-17T08:45:00Z\"  \n  ,  \n  \"refDevice\": [  \n      \"urn:ngsi-ld:Device:T1-F01-TR05-ACTP\"  \n    ]  \n  ,  \n  \"phaseType\": \"threePhase\",  \n  \"frequency\": 50.020672,  \n  \"dateEnergyMeteringStarted\":  \"2020-07-07T15:05:59.408Z\"  \n  ,  \n  \"totalActiveEnergyImport\": 150781.96448,  \n  \"totalReactiveEnergyImport\": 20490.3392,  \n  \"totalActiveEnergyExport\": 1059.80176,  \n  \"totalReactiveEnergyExport\": 93275.02176,  \n  \"activePower\": {  \n    \"L1\": 11996.416016,  \n    \"L2\": 9461.501953,  \n    \"L3\": 10242.351562  \n  },  \n  \"reactivePower\": {  \n    \"L1\": -2612.606934,  \n    \"L2\": -2209.906006,  \n    \"L3\": -3007.81958  \n  },  \n  \"apparentPower\": {  \n    \"L1\": 13201.412109,  \n    \"L2\": 10755.304688,  \n    \"L3\": 11941.094727  \n  },  \n  \"totalActivePower\": 31700.269531,  \n  \"totalReactivePower\": -7830.332031,  \n  \"totalApparentPower\": 36019.089844,  \n  \"powerFactor\": {  \n    \"L1\": 0.908817,  \n    \"L2\": 0.879906,  \n    \"L3\": 0.859293  \n  },  \n  \"displacementPowerFactor\": {  \n    \"L1\": 0.978013,  \n    \"L2\": 0.973317,  \n    \"L3\": 0.960382  \n  },  \n  \"current\": {  \n    \"L1\": 56.126038,  \n    \"L2\": 45.894356,  \n    \"L3\": 50.872452,  \n    \"N\": 0.0  \n  },  \n  \"phaseVoltage\": {  \n    \"L1\": 234.961304,  \n    \"L2\": 234.563477,  \n    \"L3\": 235.354034  \n  },  \n  \"phaseToPhaseVoltage\": {  \n    \"L12\": 406.769196,  \n    \"L23\": 407.081238,  \n    \"L31\": 407.734558  \n  },  \n  \"thdVoltage\": {  \n    \"L1\": 0.01471114,  \n    \"L2\": 0.01600046,  \n    \"L3\": 0.01541459  \n  },  \n  \"thdCurrent\": {  \n    \"L1\": 0.38497337,  \n    \"L2\": 0.45807529,  \n    \"L3\": 0.4938652  \n  }  \n}  \n```  \n\r#### ACMeasurement NGSI-v2 normalized Example    \n\rHere is an example of a ACMeasurement in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:ACMeasurement:ACMeasurement:MNCA-ACM-001\",  \n  \"type\": \"ACMeasurement\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \" AirPort-NCE-T1-F01-TR05-ACTP\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AirPort  global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \" Measurement corresponding to the ventilation machine of the technical rooms Terminal 1 T1  Floor 01  Technical Room 05 for Triphase alternating current.\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        43.664810,  \n        7.196545  \n      ]  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-03-17TT08:45:00Z\"  \n    }  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"object\": [  \n      \"urn:ngsi-ld:Device:T1-F01-TR05-ACTP\"  \n    ]  \n  },  \n  \"phaseType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"threePhase\"  \n  },  \n  \"frequency\": {  \n    \"type\": \"Property\",  \n    \"value\": 50.020672,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"dateEnergyMeteringStarted\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-07-07T15:05:59.408Z\"  \n    }  \n  },  \n  \"totalActiveEnergyImport\": {  \n    \"type\": \"Property\",  \n    \"value\": 150781.96448,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"totalReactiveEnergyImport\": {  \n    \"type\": \"Property\",  \n    \"value\": 20490.3392,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"totalActiveEnergyExport\": {  \n    \"type\": \"Property\",  \n    \"value\": 1059.80176,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"totalReactiveEnergyExport\": {  \n    \"type\": \"Property\",  \n    \"value\": 93275.02176,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"activePower\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 11996.416016,  \n      \"L2\": 9461.501953,  \n      \"L3\": 10242.351562  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"reactivePower\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": -2612.606934,  \n      \"L2\": -2209.906006,  \n      \"L3\": -3007.81958  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"apparentPower\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 13201.412109,  \n      \"L2\": 10755.304688,  \n      \"L3\": 11941.094727  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"totalActivePower\": {  \n    \"type\": \"Property\",  \n    \"value\": 31700.269531,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"totalReactivePower\": {  \n    \"type\": \"Property\",  \n    \"value\": -7830.332031,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"totalApparentPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 36019.089844,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"powerFactor\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.908817,  \n      \"L2\": 0.879906,  \n      \"L3\": 0.859293  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    },  \n    \"onlyPositive\": {  \n      \"type\": \"Property\",  \n      \"value\": true  \n    }  \n  },  \n  \"displacementPowerFactor\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.978013,  \n      \"L2\": 0.973317,  \n      \"L3\": 0.960382  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    },  \n    \"onlyPositive\": {  \n      \"type\": \"Property\",  \n      \"value\": true  \n    }  \n  },  \n  \"current\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 56.126038,  \n      \"L2\": 45.894356,  \n      \"L3\": 50.872452,  \n      \"N\": 0.0  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"rms\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"phaseVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 234.961304,  \n      \"L2\": 234.563477,  \n      \"L3\": 235.354034  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"rms\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"phaseToPhaseVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L12\": 406.769196,  \n      \"L23\": 407.081238,  \n      \"L31\": 407.734558  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"rms\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"thdVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.01471114,  \n      \"L2\": 0.01600046,  \n      \"L3\": 0.01541459  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"thdCurrent\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.38497337,  \n      \"L2\": 0.45807529,  \n      \"L3\": 0.4938652  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  }  \n}  \n```  \n\r#### ACMeasurement NGSI-LD key-values Example    \n\rHere is an example of a ACMeasurement in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:ACMeasurement:ACMeasurement:MNCA-ACM-001\",  \n  \"type\": \"ACMeasurement\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \" AirPort-NCE-T1-F01-TR05-ACTP\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AirPort  global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \" Measurement corresponding to the ventilation machine of the technical rooms Terminal 1 T1  Floor 01  Technical Room 05 for Triphase alternating current.\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        43.66481,  \n        7.196545  \n      ]  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"dateObserved\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-03-17TT08:45:00Z\"  \n    }  \n  },  \n  \"refDevice\": {  \n    \"type\": \"Relationship\",  \n    \"object\": [  \n      \"urn:ngsi-ld:Device:T1-F01-TR05-ACTP\"  \n    ]  \n  },  \n  \"phaseType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"threePhase\"  \n  },  \n  \"frequency\": {  \n    \"type\": \"Property\",  \n    \"value\": 50.020672,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"dateEnergyMeteringStarted\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-07-07T15:05:59.408Z\"  \n    }  \n  },  \n  \"totalActiveEnergyImport\": {  \n    \"type\": \"Property\",  \n    \"value\": 150781.96448,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"totalReactiveEnergyImport\": {  \n    \"type\": \"Property\",  \n    \"value\": 20490.3392,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"totalActiveEnergyExport\": {  \n    \"type\": \"Property\",  \n    \"value\": 1059.80176,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"totalReactiveEnergyExport\": {  \n    \"type\": \"Property\",  \n    \"value\": 93275.02176,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\"  \n  },  \n  \"activePower\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 11996.416016,  \n      \"L2\": 9461.501953,  \n      \"L3\": 10242.351562  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"reactivePower\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": -2612.606934,  \n      \"L2\": -2209.906006,  \n      \"L3\": -3007.81958  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"apparentPower\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 13201.412109,  \n      \"L2\": 10755.304688,  \n      \"L3\": 11941.094727  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"totalActivePower\": {  \n    \"type\": \"Property\",  \n    \"value\": 31700.269531,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"totalReactivePower\": {  \n    \"type\": \"Property\",  \n    \"value\": -7830.332031,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"totalApparentPower\": {  \n    \"type\": \"Property\",  \n    \"value\": 36019.089844,  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"powerFactor\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.908817,  \n      \"L2\": 0.879906,  \n      \"L3\": 0.859293  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    },  \n    \"onlyPositive\": {  \n      \"type\": \"Property\",  \n      \"value\": true  \n    }  \n  },  \n  \"displacementPowerFactor\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.978013,  \n      \"L2\": 0.973317,  \n      \"L3\": 0.960382  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    },  \n    \"onlyPositive\": {  \n      \"type\": \"Property\",  \n      \"value\": true  \n    }  \n  },  \n  \"current\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 56.126038,  \n      \"L2\": 45.894356,  \n      \"L3\": 50.872452,  \n      \"N\": 0.0  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"rms\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"phaseVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 234.961304,  \n      \"L2\": 234.563477,  \n      \"L3\": 235.354034  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"rms\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"phaseToPhaseVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L12\": 406.769196,  \n      \"L23\": 407.081238,  \n      \"L31\": 407.734558  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"rms\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"thdVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.01471114,  \n      \"L2\": 0.01600046,  \n      \"L3\": 0.01541459  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"thdCurrent\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"L1\": 0.38497337,  \n      \"L2\": 0.45807529,  \n      \"L3\": 0.4938652  \n    },  \n    \"observedAt\": \"2020-02-24T22:00:00.173Z\",  \n    \"measurementType\": {  \n      \"type\": \"Property\",  \n      \"value\": \"average\"  \n    },  \n    \"measurementInterval\": {  \n      \"type\": \"Property\",  \n      \"value\": 1  \n    }  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### ACMeasurement NGSI-LD normalized Example    \n\rHere is an example of a ACMeasurement in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:ACMeasurement:ACMeasurement:MNCA-ACM-001\",  \n  \"type\": \"ACMeasurement\",  \n  \"name\": \" AirPort-NCE-T1-F01-TR05-ACTP\",  \n  \"alternateName\": \"AirPort global Observation\",  \n  \"description\": \" Measurement corresponding to the ventilation machine of the technical rooms Terminal 1 T1 Floor 01 Technical Room 05 for Triphase alternating current.\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.66481,  \n      7.196545  \n    ]  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"dateObserved\": \"2020-03-17T08:45:00Z\",  \n  \"refDevice\": [  \n    \"urn:ngsi-ld:Device:T1-F01-TR05-ACTP\"  \n  ],  \n  \"phaseType\": \"threePhase\",  \n  \"frequency\": 50.020672,  \n  \"dateEnergyMeteringStarted\": \"2020-07-07T15:05:59.408Z\",  \n  \"totalActiveEnergyImport\": 150781.96448,  \n  \"totalReactiveEnergyImport\": 20490.3392,  \n  \"totalActiveEnergyExport\": 1059.80176,  \n  \"totalReactiveEnergyExport\": 93275.02176,  \n  \"activePower\": {  \n    \"L1\": 11996.416016,  \n    \"L2\": 9461.501953,  \n    \"L3\": 10242.351562  \n  },  \n  \"reactivePower\": {  \n    \"L1\": -2612.606934,  \n    \"L2\": -2209.906006,  \n    \"L3\": -3007.81958  \n  },  \n  \"apparentPower\": {  \n    \"L1\": 13201.412109,  \n    \"L2\": 10755.304688,  \n    \"L3\": 11941.094727  \n  },  \n  \"totalActivePower\": 31700.269531,  \n  \"totalReactivePower\": -7830.332031,  \n  \"totalApparentPower\": 36019.089844,  \n  \"powerFactor\": {  \n    \"L1\": 0.908817,  \n    \"L2\": 0.879906,  \n    \"L3\": 0.859293  \n  },  \n  \"displacementPowerFactor\": {  \n    \"L1\": 0.978013,  \n    \"L2\": 0.973317,  \n    \"L3\": 0.960382  \n  },  \n  \"current\": {  \n    \"L1\": 56.126038,  \n    \"L2\": 45.894356,  \n    \"L3\": 50.872452,  \n    \"N\": 0.0  \n  },  \n  \"phaseVoltage\": {  \n    \"L1\": 234.961304,  \n    \"L2\": 234.563477,  \n    \"L3\": 235.354034  \n  },  \n  \"phaseToPhaseVoltage\": {  \n    \"L12\": 406.769196,  \n    \"L23\": 407.081238,  \n    \"L31\": 407.734558  \n  },  \n  \"thdVoltage\": {  \n    \"L1\": 0.01471114,  \n    \"L2\": 0.01600046,  \n    \"L3\": 0.01541459  \n  },  \n  \"thdCurrent\": {  \n    \"L1\": 0.38497337,  \n    \"L2\": 0.45807529,  \n    \"L3\": 0.4938652  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/data-models/context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: InverterDevice
        - MODEL_DESCRIPTION: {'The data model is intended to describe the mechanical, electrical characteristics of an Inverter according to *DC - Direct Current Information* supplied as input and *AC - Alternating Current Information*  returned as output. *Remark*': 'This Data Model can be used directly as a main entity to describe the device [Inverter] or as a sub-entity of the Data Model {DEVICE] using a reference by the [refDevice] attribute.'}
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              InverterDevice of the Subject Energy.

        - MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: InverterDevice  \n======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Energy/blob/master/InverterDevice/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **The data model is intended to describe the mechanical, electrical characteristics of an Inverter according to *DC - Direct Current Information* supplied as input and *AC - Alternating Current Information*  returned as output. *Remark*: This Data Model can be used directly as a main entity to describe the device [Inverter] or as a sub-entity of the Data Model {DEVICE] using a reference by the [refDevice] attribute.**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `application`: Target application of the Device regarding the environment. A unique value. Enum:'electricMobility, energyStorage, emergencyStorage, lighting, industrialStorage, houseHoldStorage, robotics, production, other'  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `brandName`: Brand Name of the item  \r- `coolingSystem`:  Cooling System of the Device. Enum:'Convection, OptiCool, Regulated-fan, Other'  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: A timestamps which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `dimension`: External dimension of a Panel. The format is structured by a sub-property of 3 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter  \r- `documentation`: Technical Documentation (Installation / maintenance / used)  \r- `id`: Unique identifier of the entity  \r- `installationCondition`: Condition and possibility of use in the following environments. Enum:'extremeHeat, extremeCold, extremeHumidity, extremeClimate, desert, sand, marine, saline, dust, seismic, other'.  \r- `installationMode`: Positioning of the device in relation to a ground reference system. A unique value. Enum:'aerial, ground, pole, roofing, underGround, wall, other'  \r- `inverterStatus`: Status of the inverter. A combination of values.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `mPPTPVVoltageDC`: Minimum and Maximum Photo-voltaic voltage range, MPPT allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `manufacturerName`: Manufacturer Name of the item  \r- `maxInputCurrentParallelAssembly`: Max. Current Input with an Parallel Assembly. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere. Unis:'Ampere'  \r- `maxOutputPowerAC`: Maximum Power or Apparent Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **D46** represents Volt Ampere  \r- `modelName`: Model name of the item  \r- `moduleYieldRate`: Yield Rate of the Device. The format is structured by a sub-property of 2 items (European Standard - Manufacturer Standard). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent  \r- `name`: The name of this item.  \r- `nbInputParallelDC`: Maximum Number of inputs (in parallel)  \r- `nbMPPTrackersDC`: Number of MPP trackers  \r- `noiseLevel`: Sound Power level of the Device. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **2N** represents Decibel  \r- `nominalAmpereAC`: Nominal Amperage *(Code I)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere  \r- `nominalAmpereDC`: Nominal Amperage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere  \r- `nominalFrequencyAC`: Nominal Frequency. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz  \r- `nominalFrequencyDC`:  Nominal Frequency. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz  \r- `nominalPowerAC`: Nominal Power . The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **WTT** represents Watt  \r- `nominalPowerDC`: Nominal Power or Maximum Power factor for cos phi=1. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **WTT** represents Watt  \r- `nominalVoltageAC`: Nominal battery voltage *(Code U)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `nominalVoltageDC`: Nominal voltage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `operatingAirHumidity`: Ambient operating Air Humidity range. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.  \r- `operatingAmpereAC`: Minimum and Maximum Ampere allowed.. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere  \r- `operatingAmpereDC`: Minimum and Maximum Ampere allowed.. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere  \r- `operatingFrequencyAC`: Minimum and Maximum Frequency allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz  \r- `operatingFrequencyDC`: Minimum and Maximum Frequency allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz  \r- `operatingTemperature`: Ambient operating temperature range. This is the minimum and maximum resistance to cold and heat. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius.  \r- `operatingVoltageAC`: Minimum and Maximum voltage allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `operatingVoltageDC`: Minimum and Maximum voltage allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt.  \r- `overVoltageCategory`: Over voltage category. - I : connection to circuits with transient over voltages at an appropriate low level. - II : main insulation and additional insulation (earth terminal). - III : fixed installations with reliability and availability making subject to specific specifications. - IV : materials at the origin of the electrical installation such as electric meters and main materials over current protection.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `phaseType`: Type of Phase. A unique value. Enum:'singlePhase,threePhase'  \r- `possibilityOfUse`: Possibility of use. Enum:'mixed, mobile, stationary, other'  \r- `powerFactorAC`: Power factor for cos phi  \r- `protectionClassSLK`: Protection class (SKL). - 0 : main insulation without earth connection. - 1 : main insulation and additional insulation (earth terminal). - 2 : double or reinforced insulation (equivalent to twice the main insulation) without accessible metal part. - 3 : operating in very low safety voltage (SELV) (50V maximum).  \r- `protectionIK`: IK '*Mecanic Protection*' level relating to numeric classification for the degrees of protection provided by enclosures for electrical equipment against external mechanical impacts, according to International Electro technical Commission standard (EN 62-262). - IK varies from 0 (minimum resistance) to 10 (maximum resistance) which represents an Impact Energy (Unit Joule)  \r- `protectionIP`: IP '*Ingress Protection*' for the Junction Box. This is the level classifies and rates the degree of protection provided by mechanical casings and electrical enclosures against intrusion, dust, accidental contact, and water according to International Electrotechnical Commission standard (EN 60-529). - First digit: Solid particle protection (Single numeral: 0\u20136 or 'X'). - Second digit: Liquid ingress protection (Single numeral: 0\u20139 or 'X' ).- Third digit: Personal Protection  against access to dangerous parts (optional additional letter).- Fourth digit: Other protections (optional additional letter).  \r- `refDevice`: Reference to the Main Entity [Device](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) if used as second link.  \r- `refPointOfInterest`: Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the observation.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `self-consumption`: Self-consumption during nigth. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes).  For instance, **WTT** represents Watt  \r- `serialNumber`: Serial numbers of the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `startingVoltageDC`: Starting voltage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `supplyPhaseNb`: Number of power supply phases  \r- `topology`: Description of the topology of the installation.  \r- `type`: NGSI Entity type. It has to be InverterDevice  \r- `typeOfUse`: Accepted use regarding its positioning in an indoor / outdoor environment.. Enum:'indoor, outdoor, mixed, other'  \r- `weight`: Weight. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KGM** represents Kilogram  \r  \n\rRequired properties  \n- `dateLastReported`  \r- `id`  \r- `location`  \r- `phaseType`  \r- `type`  \r  \n\rAdditional Information about Data Model. This Data Model can be used directly as a main entity to describe the device [INVERTER] or as a sub-entity of the Data Model [DEVICE] using a reference by the `refDevice` attribute.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nInverterDevice:    \n  description: 'The data model is intended to describe the mechanical, electrical characteristics of an Inverter according to *DC - Direct Current Information* supplied as input and *AC - Alternating Current Information*  returned as output. *Remark*: This Data Model can be used directly as a main entity to describe the device [Inverter] or as a sub-entity of the Data Model {DEVICE] using a reference by the [refDevice] attribute.'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    application:    \n      description: 'Target application of the Device regarding the environment. A unique value. Enum:''electricMobility, energyStorage, emergencyStorage, lighting, industrialStorage, houseHoldStorage, robotics, production, other'''    \n      items:    \n        enum:    \n          - electricMobility    \n          - energyStorage    \n          - emergencyStorage    \n          - lighting    \n          - industrialStorage    \n          - houseHoldStorage    \n          - robotics    \n          - production    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    brandName:    \n      description: 'Brand Name of the item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/brand    \n        type: Property    \n    coolingSystem:    \n      description: ' Cooling System of the Device. Enum:''Convection, OptiCool, Regulated-fan, Other'''    \n      enum:    \n        - Convection    \n        - OptiCool    \n        - Regulated-fan    \n        - Other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'A timestamps which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dimension:    \n      description: 'External dimension of a Panel. The format is structured by a sub-property of 3 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter'    \n      properties:    \n        depth:    \n          minimum: 0    \n          type: number    \n        height:    \n          minimum: 0    \n          type: number    \n        length:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n        units: Centimeters    \n    documentation:    \n      description: 'Technical Documentation (Installation / maintenance / used)'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    id:    \n      anyOf: &inverterdevice_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    installationCondition:    \n      description: 'Condition and possibility of use in the following environments. Enum:''extremeHeat, extremeCold, extremeHumidity, extremeClimate, desert, sand, marine, saline, dust, seismic, other''.'    \n      items:    \n        enum:    \n          - extremeHeat    \n          - extremeCold    \n          - extremeHumidity    \n          - extremeClimate    \n          - desert    \n          - sand    \n          - marine    \n          - saline    \n          - dust    \n          - seismic    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    installationMode:    \n      description: 'Positioning of the device in relation to a ground reference system. A unique value. Enum:''aerial, ground, pole, roofing, underGround, wall, other'''    \n      enum:    \n        - aerial    \n        - ground    \n        - pole    \n        - roofing    \n        - underGround    \n        - wall    \n        - other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    inverterStatus:    \n      description: 'Status of the inverter. A combination of values.'    \n      items:    \n        enum:    \n          - 00-OnSector    \n          - 01-PowerFailure/OnBattery    \n          - 02-LossCommunication    \n          - 03-BatteryFault    \n          - 04-SystemShutDown    \n          - 05-TensionDip    \n          - 06-OverVoltage    \n          - 07-VoltageDrop    \n          - 08-VoltageIncrease    \n          - 09-LineNoise    \n          - 10-FrequencyVariation    \n          - 11-TransientDistortion    \n          - 12-HarmonicDistortion    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    mPPTPVVoltageDC:    \n      description: 'Minimum and Maximum Photo-voltaic voltage range, MPPT allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Volt    \n    manufacturerName:    \n      description: 'Manufacturer Name of the item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/manufacturer    \n        type: Property    \n    maxInputCurrentParallelAssembly:    \n      description: 'Max. Current Input with an Parallel Assembly. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Ampere    \n    maxOutputPowerAC:    \n      description: 'Maximum Power or Apparent Power. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **D46** represents Volt Ampere'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: 'Volt Ampere'    \n    modelName:    \n      description: 'Model name of the item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/model    \n        type: Property    \n    moduleYieldRate:    \n      description: 'Yield Rate of the Device. The format is structured by a sub-property of 2 items (European Standard - Manufacturer Standard). The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent'    \n      properties:    \n        eta:    \n          type: number    \n        euro:    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: http://schema.org/StructuredValue    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    nbInputParallelDC:    \n      description: 'Maximum Number of inputs (in parallel)'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    nbMPPTrackersDC:    \n      description: 'Number of MPP trackers'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number.    \n        type: Property    \n    noiseLevel:    \n      description: 'Sound Power level of the Device. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **2N** represents Decibel'    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n        units: dB    \n    nominalAmpereAC:    \n      description: 'Nominal Amperage *(Code I)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Ampere    \n    nominalAmpereDC:    \n      description: 'Nominal Amperage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Ampere    \n    nominalFrequencyAC:    \n      description: 'Nominal Frequency. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Hertz    \n    nominalFrequencyDC:    \n      description: ' Nominal Frequency. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Hertz    \n    nominalPowerAC:    \n      description: 'Nominal Power . The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **WTT** represents Watt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Watt    \n    nominalPowerDC:    \n      description: 'Nominal Power or Maximum Power factor for cos phi=1. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **WTT** represents Watt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Watt    \n    nominalVoltageAC:    \n      description: 'Nominal battery voltage *(Code U)*. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Volt    \n    nominalVoltageDC:    \n      description: 'Nominal voltage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Volt    \n    operatingAirHumidity:    \n      description: 'Ambient operating Air Humidity range. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **P1** represents Percent.'    \n      properties:    \n        max:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n        min:    \n          maximum: 1    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    operatingAmpereAC:    \n      description: 'Minimum and Maximum Ampere allowed.. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n        units: Ampere    \n    operatingAmpereDC:    \n      description: 'Minimum and Maximum Ampere allowed.. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **AMP** represents Ampere'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Ampere    \n    operatingFrequencyAC:    \n      description: 'Minimum and Maximum Frequency allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: http://schema.org/StructuredValue    \n        type: Property    \n        units: Hertz    \n    operatingFrequencyDC:    \n      description: 'Minimum and Maximum Frequency allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **HTZ** represents Hertz'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Hertz    \n    operatingTemperature:    \n      description: 'Ambient operating temperature range. This is the minimum and maximum resistance to cold and heat. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius.'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: -50    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    operatingVoltageAC:    \n      description: 'Minimum and Maximum voltage allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: http://schema.org/StructuredValue    \n        type: Property    \n        units: Volt    \n    operatingVoltageDC:    \n      description: 'Minimum and Maximum voltage allowed. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt.'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Volt    \n    overVoltageCategory:    \n      description: 'Over voltage category. - I : connection to circuits with transient over voltages at an appropriate low level. - II : main insulation and additional insulation (earth terminal). - III : fixed installations with reliability and availability making subject to specific specifications. - IV : materials at the origin of the electrical installation such as electric meters and main materials over current protection.'    \n      enum:    \n        - I    \n        - II    \n        - III    \n        - IV    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *inverterdevice_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    phaseType:    \n      description: 'Type of Phase. A unique value. Enum:''singlePhase,threePhase'''    \n      enum:    \n        - singlePhase    \n        - threePhase    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    possibilityOfUse:    \n      description: 'Possibility of use. Enum:''mixed, mobile, stationary, other'''    \n      enum:    \n        - mixed    \n        - mobile    \n        - stationary    \n        - other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    powerFactorAC:    \n      description: 'Power factor for cos phi'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n        units: 'A value between [0,1] Volt'    \n    protectionClassSLK:    \n      description: 'Protection class (SKL). - 0 : main insulation without earth connection. - 1 : main insulation and additional insulation (earth terminal). - 2 : double or reinforced insulation (equivalent to twice the main insulation) without accessible metal part. - 3 : operating in very low safety voltage (SELV) (50V maximum).'    \n      enum:    \n        - 0    \n        - 1    \n        - 2    \n        - 3    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    protectionIK:    \n      description: 'IK ''*Mecanic Protection*'' level relating to numeric classification for the degrees of protection provided by enclosures for electrical equipment against external mechanical impacts, according to International Electro technical Commission standard (EN 62-262). - IK varies from 0 (minimum resistance) to 10 (maximum resistance) which represents an Impact Energy (Unit Joule)'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    protectionIP:    \n      description: 'IP ''*Ingress Protection*'' for the Junction Box. This is the level classifies and rates the degree of protection provided by mechanical casings and electrical enclosures against intrusion, dust, accidental contact, and water according to International Electrotechnical Commission standard (EN 60-529). - First digit: Solid particle protection (Single numeral: 0\u20136 or ''X''). - Second digit: Liquid ingress protection (Single numeral: 0\u20139 or ''X'' ).- Third digit: Personal Protection  against access to dangerous parts (optional additional letter).- Fourth digit: Other protections (optional additional letter).'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    refDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to the Main Entity [Device](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) if used as second link.'    \n      x-ngsi:    \n        type: Relationship    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the observation.'    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    self-consumption:    \n      description: 'Self-consumption during nigth. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes).  For instance, **WTT** represents Watt'    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n        units: Watt    \n    serialNumber:    \n      description: 'Serial numbers of the item'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/brand    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    startingVoltageDC:    \n      description: 'Starting voltage. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Volt    \n    supplyPhaseNb:    \n      description: 'Number of power supply phases'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    topology:    \n      description: 'Description of the topology of the installation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be InverterDevice'    \n      enum:    \n        - InverterDevice    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    typeOfUse:    \n      description: 'Accepted use regarding its positioning in an indoor / outdoor environment.. Enum:''indoor, outdoor, mixed, other'''    \n      enum:    \n        - indoor    \n        - outdoor    \n        - mixed    \n        - other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    weight:    \n      description: 'Weight. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KGM** represents Kilogram'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n        units: Kilograms    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateLastReported    \n    - phaseType    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Energy/blob/master/InverterDevice/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/data-models.Energy/InverterDevice/schema.json    \n  x-model-tags: \"\"    \n  x-version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### InverterDevice NGSI-v2 key-values Example    \n\rHere is an example of a InverterDevice in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:InverterDevice:InverterDevice:MNCA-INVDEV-T1-G0-027\",  \n  \"type\": \"InverterDevice\",  \n  \"name\": \"INVDEV-T1-G0-027\",  \n  \"alternateName\": \"AirPort \u2013 global Observation\",  \n  \"description\": \"Description of the Inverter linked to Battery and PhotoVoltaic Devices\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      43.66481,  \n      7.196545  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"brandName\": \"KOSTAL ELEC\",  \n  \"modelName\": \"SB 4000TL-20\",  \n  \"manufacturerName\": \"SOLAR ELECTRIC CPY\",  \n  \"serialNumber\": \"SEKOPI10327458712\",  \n  \"application\": [  \n    \"robotics\"  \n  ],  \n  \"typeOfUse\": \"indoor\",  \n  \"installationMode\": \"wall\",  \n  \"installationCondition\": [  \n    \"extremeClimate\"  \n  ],  \n  \"possibilityOfUse\": \"stationary\",  \n  \"documentation\": \"https://www.myInverter.fr\",  \n  \"owners\": [  \n    \"Airport-Division Maintenance\"  \n  ],  \n  \"phaseType\": \"threePhase\",  \n  \"supplyPhaseNb\": 3,  \n  \"dimension\": {  \n    \"length\": 52.75,  \n    \"depth\": 23.5,  \n    \"height\": 45.25  \n  },  \n  \"weight\": 34,  \n  \"protectionIP\": \"55\",  \n  \"protectionIK\": 10,  \n  \"protectionClassSLK\": \"1\",  \n  \"overVoltageCategory\": \"III\",  \n  \"operatingTemperature\": {  \n    \"min\": -25,  \n    \"max\": 60  \n  },  \n  \"operatingAirHumidity\": {  \n    \"min\": 0,  \n    \"max\": 0.95  \n  },  \n  \"nominalPowerDC\": 4200,  \n  \"nominalVoltageDC\": 400,  \n  \"nominalAmpereDC \": 17,  \n  \"nominalFrequencyDC\": 50,  \n  \"operatingVoltageDC\": {  \n    \"min\": 125,  \n    \"max\": 550  \n  },  \n  \"operatingAmpereDC\": {  \n    \"min\": 17,  \n    \"max\": 17  \n  },  \n  \"operatingFrequencyDC\": {  \n    \"min\": 50,  \n    \"max\": 50  \n  },  \n  \"mPPTPVVoltageDC\": {  \n    \"min\": 188,  \n    \"max\": 440  \n  },  \n  \"startingVoltageDC\": 150,  \n  \"nbMPPTrackersDC\": 3,  \n  \"nbInputParallelDC\": \"A:2,B:2\",  \n  \"maxInputCurrentParallelAssembly\": 25,  \n  \"nominalPowerAC\": 3680,  \n  \"maxOutputPowerAC\": 4000,  \n  \"nominalVoltageAC\": 230,  \n  \"nominalAmpereAC \": 16,  \n  \"nominalFrequencyAC\": 50,  \n  \"operatingVoltageAC\": {  \n    \"min\": 180,  \n    \"max\": 280  \n  },  \n  \"operatingAmpereAC\": {  \n    \"min\": 16,  \n    \"max\": 22  \n  },  \n  \"operatingFrequencyAC\": {  \n    \"min\": 50,  \n    \"max\": 60  \n  },  \n  \"powerFactorAC\": 1,  \n  \"moduleYieldRate\": {  \n    \"euro\": 97.1,  \n    \"eta\": 96.4  \n  },  \n  \"noiseLevel\": 29,  \n  \"self-consumption\": 0.5,  \n  \"topology\": \"without transformer\",  \n  \"coolingSystem\": \"OptiCool\",  \n  \"inverterStatus\": [  \n    \"00-OnSector\",  \n    \"06-OverVoltage\"  \n  ]  \n}  \n```  \n\r#### InverterDevice NGSI-v2 normalized Example    \n\rHere is an example of a InverterDevice in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:InverterDevice:InverterDevice:MNCA-INVDEV-T1-G0-027\",  \n  \"type\": \"InverterDevice\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"INVDEV-T1-G0-027\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AirPort \u2013 global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Description of the Inverter linked to Battery and PhotoVoltaic Devices\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates \": [  \n        43.664810,  \n        7.196545  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"FR\",  \n      \"addressLocality\": \"Nice\",  \n      \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"DateTime\",  \n      \"@value\": \"2020-03-17T08:45:00Z\"  \n    }  \n  },  \n  \"brandName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"KOSTAL ELEC\"  \n  },  \n  \"modelName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SB 4000TL-20\"  \n  },  \n  \"manufacturerName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SOLAR ELECTRIC CPY\"  \n  },  \n  \"serialNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": \"SEKOPI10327458712\"  \n  },  \n  \"application\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"robotics\"  \n    ]  \n  },  \n  \"typeOfUse\": {  \n    \"type\": \"Property\",  \n    \"value\": \"indoor\"  \n  },  \n  \"installationMode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"wall\"  \n  },  \n  \"installationCondition\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"extremeClimate\"  \n    ]  \n  },  \n  \"possibilityOfUse\": {  \n    \"type\": \"Property\",  \n    \"value\": \"stationary\"  \n  },  \n  \"documentation\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://www.myInverter.fr\"  \n  },  \n  \"owners\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Airport-Division Maintenance\"  \n    ]  \n  },  \n  \"phaseType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"threePhase\"  \n  },  \n  \"supplyPhaseNb\": {  \n    \"type\": \"Property\",  \n    \"value\": 3  \n  },  \n  \"dimension\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"length\": 52.75,  \n      \"depth\": 23.5,  \n      \"height\": 45.25  \n    }  \n  },  \n  \"weight\": {  \n    \"type\": \"Property\",  \n    \"value\": 34  \n  },  \n  \"protectionIP\": {  \n    \"type\": \"Property\",  \n    \"value\": \"55\"  \n  },  \n  \"protectionIK\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"protectionClassSLK\": {  \n    \"type\": \"Property\",  \n    \"value\": \"1\"  \n  },  \n  \"overVoltageCategory\": {  \n    \"type\": \"Property\",  \n    \"value\": \"III\"  \n  },  \n  \"operatingTemperature\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": -25,  \n      \"max\": 60  \n    }  \n  },  \n  \"operatingAirHumidity\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 0,  \n      \"max\": 0.95  \n    }  \n  },  \n  \"nominalPowerDC\": {  \n    \"type\": \"Property\",  \n    \"value\": 4200  \n  },  \n  \"nominalVoltageDC\": {  \n    \"type\": \"Property\",  \n    \"value\": 400  \n  },  \n  \"nominalAmpereDC \": {  \n    \"type\": \"Property\",  \n    \"value\": 17  \n  },  \n  \"nominalFrequencyDC\": {  \n    \"type\": \"Property\",  \n    \"value\": 50  \n  },  \n  \"operatingVoltageDC\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 125,  \n      \"max\": 550  \n    }  \n  },  \n  \"operatingAmpereDC\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 17,  \n      \"max\": 17  \n    }  \n  },  \n  \"operatingFrequencyDC\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 50,  \n      \"max\": 50  \n    }  \n  },  \n  \"mPPTPVVoltageDC\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 188,  \n      \"max\": 440  \n    }  \n  },  \n  \"startingVoltageDC\": {  \n    \"type\": \"Property\",  \n    \"value\": 150  \n  },  \n  \"nbMPPTrackersDC\": {  \n    \"type\": \"Property\",  \n    \"value\": 3  \n  },  \n  \"nbInputParallelDC\": {  \n    \"type\": \"Property\",  \n    \"value\": \"A:2,B:2\"  \n  },  \n  \"maxInputCurrentParallelAssembly\": {  \n    \"type\": \"Property\",  \n    \"value\": 25  \n  },  \n  \"nominalPowerAC\": {  \n    \"type\": \"Property\",  \n    \"value\": 3680  \n  },  \n  \"maxOutputPowerAC\": {  \n    \"type\": \"Property\",  \n    \"value\": 4000  \n  },  \n  \"nominalVoltageAC\": {  \n    \"type\": \"Property\",  \n    \"value\": 230  \n  },  \n  \"nominalAmpereAC \": {  \n    \"type\": \"Property\",  \n    \"value\": 16  \n  },  \n  \"nominalFrequencyAC\": {  \n    \"type\": \"Property\",  \n    \"value\": 50  \n  },  \n  \"operatingVoltageAC\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 180,  \n      \"max\": 280  \n    }  \n  },  \n  \"operatingAmpereAC\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 16,  \n      \"max\": 22  \n    }  \n  },  \n  \"operatingFrequencyAC\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": 50,  \n      \"max\": 60  \n    }  \n  },  \n  \"powerFactorAC\": {  \n    \"type\": \"Property\",  \n    \"value\": 1  \n  },  \n  \"moduleYieldRate\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"euro\": 97.1,  \n      \"eta\": 96.4  \n    }  \n  },  \n  \"noiseLevel\": {  \n    \"type\": \"Property\",  \n    \"value\": 29  \n  },  \n  \"self-consumption\": {  \n    \"type\": \"Property\",  \n    \"value\": 0.5  \n  },  \n  \"topology\": {  \n    \"type\": \"Property\",  \n    \"value\": \"without transformer\"  \n  },  \n  \"coolingSystem\": {  \n    \"type\": \"Property\",  \n    \"value\": \"OptiCool\"  \n  },  \n  \"inverterStatus\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"00-OnSector\",  \n      \"06-OverVoltage\"  \n    ]  \n  }  \n}  \n```  \n\r#### InverterDevice NGSI-LD key-values Example    \n\rHere is an example of a InverterDevice in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:InverterDevice:InverterDevice:MNCA-INVDEV-T1-G0-027\",  \n    \"type\": \"InverterDevice\",  \n    \"address\": {  \n        \"addressCountry\": \"FR\",  \n        \"addressLocality\": \"Nice\",  \n        \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n    },  \n    \"alternateName\": \"AirPort \\u2013 global Observation\",  \n    \"application\": [  \n        \"robotics\"  \n    ],  \n    \"areaServed\": \"Nice Aeroport\",  \n    \"brandName\": \"KOSTAL ELEC\",  \n    \"coolingSystem\": \"OptiCool\",  \n    \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n    \"description\": \"Description of the Inverter linked to Battery and PhotoVoltaic Devices\",  \n    \"dimension\": {  \n        \"length\": 52.75,  \n        \"depth\": 23.5,  \n        \"height\": 45.25  \n    },  \n    \"documentation\": \"https://www.myInverter.fr\",  \n    \"installationCondition\": [  \n        \"extremeClimate\"  \n    ],  \n    \"installationMode\": \"wall\",  \n    \"inverterStatus\": [  \n        \"00-OnSector\",  \n        \"06-OverVoltage\"  \n    ],  \n    \"location\": {  \n        \"type\": \"Point\",  \n        \"coordinates\": [  \n            43.66481,  \n            7.196545  \n        ]  \n    },  \n    \"mPPTPVVoltageDC\": {  \n        \"min\": 188,  \n        \"max\": 440  \n    },  \n    \"manufacturerName\": \"SOLAR ELECTRIC CPY\",  \n    \"maxInputCurrentParallelAssembly\": 25,  \n    \"maxOutputPowerAC\": 4000,  \n    \"modelName\": \"SB 4000TL-20\",  \n    \"moduleYieldRate\": {  \n        \"euro\": 97.1,  \n        \"eta\": 96.4  \n    },  \n    \"name\": \"INVDEV-T1-G0-027\",  \n    \"nbInputParallelDC\": \"A:2,B:2\",  \n    \"nbMPPTrackersDC\": 3,  \n    \"noiseLevel\": 29,  \n    \"nominalAmpereAC \": 16,  \n    \"nominalAmpereDC \": 17,  \n    \"nominalFrequencyAC\": 50,  \n    \"nominalFrequencyDC\": 50,  \n    \"nominalPowerAC\": 3680,  \n    \"nominalPowerDC\": 4200,  \n    \"nominalVoltageAC\": 230,  \n    \"nominalVoltageDC\": 400,  \n    \"operatingAirHumidity\": {  \n        \"min\": 0,  \n        \"max\": 0.95  \n    },  \n    \"operatingAmpereAC\": {  \n        \"min\": 16,  \n        \"max\": 22  \n    },  \n    \"operatingAmpereDC\": {  \n        \"min\": 17,  \n        \"max\": 17  \n    },  \n    \"operatingFrequencyAC\": {  \n        \"min\": 50,  \n        \"max\": 60  \n    },  \n    \"operatingFrequencyDC\": {  \n        \"min\": 50,  \n        \"max\": 50  \n    },  \n    \"operatingTemperature\": {  \n        \"min\": -25,  \n        \"max\": 60  \n    },  \n    \"operatingVoltageAC\": {  \n        \"min\": 180,  \n        \"max\": 280  \n    },  \n    \"operatingVoltageDC\": {  \n        \"min\": 125,  \n        \"max\": 550  \n    },  \n    \"overVoltageCategory\": \"III\",  \n    \"owners\": [  \n        \"Airport-Division Maintenance\"  \n    ],  \n    \"phaseType\": \"threePhase\",  \n    \"possibilityOfUse\": \"stationary\",  \n    \"powerFactorAC\": 1,  \n    \"protectionClassSLK\": \"1\",  \n    \"protectionIK\": 10,  \n    \"protectionIP\": \"55\",  \n    \"self-consumption\": 0.5,  \n    \"serialNumber\": \"SEKOPI10327458712\",  \n    \"startingVoltageDC\": 150,  \n    \"supplyPhaseNb\": 3,  \n    \"topology\": \"without transformer\",  \n    \"typeOfUse\": \"indoor\",  \n    \"weight\": 34,  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Energy/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### InverterDevice NGSI-LD normalized Example    \n\rHere is an example of a InverterDevice in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:InverterDevice:InverterDevice:MNCA-INVDEV-T1-G0-027\",  \n    \"type\": \"InverterDevice\",  \n    \"address\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"addressCountry\": \"FR\",  \n            \"addressLocality\": \"Nice\",  \n            \"streetAddress\": \"Airport - Terminal 1 - Ground 0 - Local  27\"  \n        }  \n    },  \n    \"alternateName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"AirPort \\u2013 global Observation\"  \n    },  \n    \"application\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"robotics\"  \n        ]  \n    },  \n    \"areaServed\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Nice Aeroport\"  \n    },  \n    \"brandName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"KOSTAL ELEC\"  \n    },  \n    \"coolingSystem\": {  \n        \"type\": \"Property\",  \n        \"value\": \"OptiCool\"  \n    },  \n    \"dateLastReported\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"type\": \"DateTime\",  \n            \"value\": \"2020-03-17T08:45:00Z\"  \n        }  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Description of the Inverter linked to Battery and PhotoVoltaic Devices\"  \n    },  \n    \"dimension\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"length\": 52.75,  \n            \"depth\": 23.5,  \n            \"height\": 45.25  \n        }  \n    },  \n    \"documentation\": {  \n        \"type\": \"Property\",  \n        \"value\": \"https://www.myInverter.fr\"  \n    },  \n    \"installationCondition\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"extremeClimate\"  \n        ]  \n    },  \n    \"installationMode\": {  \n        \"type\": \"Property\",  \n        \"value\": \"wall\"  \n    },  \n    \"inverterStatus\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"00-OnSector\",  \n            \"06-OverVoltage\"  \n        ]  \n    },  \n    \"location\": {  \n        \"type\": \"GeoProperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates \": [  \n                43.66481,  \n                7.196545  \n            ]  \n        }  \n    },  \n    \"mPPTPVVoltageDC\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 188,  \n            \"max\": 440  \n        }  \n    },  \n    \"manufacturerName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"SOLAR ELECTRIC CPY\"  \n    },  \n    \"maxInputCurrentParallelAssembly\": {  \n        \"type\": \"Property\",  \n        \"value\": 25  \n    },  \n    \"maxOutputPowerAC\": {  \n        \"type\": \"Property\",  \n        \"value\": 4000  \n    },  \n    \"modelName\": {  \n        \"type\": \"Property\",  \n        \"value\": \"SB 4000TL-20\"  \n    },  \n    \"moduleYieldRate\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"euro\": 97.1,  \n            \"eta\": 96.4  \n        }  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"INVDEV-T1-G0-027\"  \n    },  \n    \"nbInputParallelDC\": {  \n        \"type\": \"Property\",  \n        \"value\": \"A:2,B:2\"  \n    },  \n    \"nbMPPTrackersDC\": {  \n        \"type\": \"Property\",  \n        \"value\": 3  \n    },  \n    \"noiseLevel\": {  \n        \"type\": \"Property\",  \n        \"value\": 29  \n    },  \n    \"nominalAmpereAC \": {  \n        \"type\": \"Property\",  \n        \"value\": 16  \n    },  \n    \"nominalAmpereDC \": {  \n        \"type\": \"Property\",  \n        \"value\": 17  \n    },  \n    \"nominalFrequencyAC\": {  \n        \"type\": \"Property\",  \n        \"value\": 50  \n    },  \n    \"nominalFrequencyDC\": {  \n        \"type\": \"Property\",  \n        \"value\": 50  \n    },  \n    \"nominalPowerAC\": {  \n        \"type\": \"Property\",  \n        \"value\": 3680  \n    },  \n    \"nominalPowerDC\": {  \n        \"type\": \"Property\",  \n        \"value\": 4200  \n    },  \n    \"nominalVoltageAC\": {  \n        \"type\": \"Property\",  \n        \"value\": 230  \n    },  \n    \"nominalVoltageDC\": {  \n        \"type\": \"Property\",  \n        \"value\": 400  \n    },  \n    \"operatingAirHumidity\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 0,  \n            \"max\": 0.95  \n        }  \n    },  \n    \"operatingAmpereAC\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 16,  \n            \"max\": 22  \n        }  \n    },  \n    \"operatingAmpereDC\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 17,  \n            \"max\": 17  \n        }  \n    },  \n    \"operatingFrequencyAC\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 50,  \n            \"max\": 60  \n        }  \n    },  \n    \"operatingFrequencyDC\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 50,  \n            \"max\": 50  \n        }  \n    },  \n    \"operatingTemperature\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": -25,  \n            \"max\": 60  \n        }  \n    },  \n    \"operatingVoltageAC\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 180,  \n            \"max\": 280  \n        }  \n    },  \n    \"operatingVoltageDC\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"min\": 125,  \n            \"max\": 550  \n        }  \n    },  \n    \"overVoltageCategory\": {  \n        \"type\": \"Property\",  \n        \"value\": \"III\"  \n    },  \n    \"owners\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"Airport-Division Maintenance\"  \n        ]  \n    },  \n    \"phaseType\": {  \n        \"type\": \"Property\",  \n        \"value\": \"threePhase\"  \n    },  \n    \"possibilityOfUse\": {  \n        \"type\": \"Property\",  \n        \"value\": \"stationary\"  \n    },  \n    \"powerFactorAC\": {  \n        \"type\": \"Property\",  \n        \"value\": 1  \n    },  \n    \"protectionClassSLK\": {  \n        \"type\": \"Property\",  \n        \"value\": \"1\"  \n    },  \n    \"protectionIK\": {  \n        \"type\": \"Property\",  \n        \"value\": 10  \n    },  \n    \"protectionIP\": {  \n        \"type\": \"Property\",  \n        \"value\": \"55\"  \n    },  \n    \"self-consumption\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.5  \n    },  \n    \"serialNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": \"SEKOPI10327458712\"  \n    },  \n    \"startingVoltageDC\": {  \n        \"type\": \"Property\",  \n        \"value\": 150  \n    },  \n    \"supplyPhaseNb\": {  \n        \"type\": \"Property\",  \n        \"value\": 3  \n    },  \n    \"topology\": {  \n        \"type\": \"Property\",  \n        \"value\": \"without transformer\"  \n    },  \n    \"typeOfUse\": {  \n        \"type\": \"Property\",  \n        \"value\": \"indoor\"  \n    },  \n    \"weight\": {  \n        \"type\": \"Property\",  \n        \"value\": 34  \n    },  \n    \"@context\": [  \n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
        - MODEL_NAME: TechnicalCabinetDevice
        - MODEL_DESCRIPTION: {'Technical Cabinet Device Data Model is intended to to describe the technical characteristics of the Device, designed to be placed in an urban or interurban environment. The main objective of these cabinets for this Data Model is to protect the electrical equipment necessary for the control, surveillance, reading and management of urban lighting, signaling, video and electrical distribution. The scope of use of some of these cabinets can extend to an additional protection for installations of modular apparatuses of telephony, data processing, meteorological stations, photo-voltaic stations, wind turbines stations, telecommunications, networks, data, bre Optics , etc. *Remark*': "This Data Model can be used directly as a main entity to describe the device `Technical Cabinet`  or as a sub-entity of the Data Model  `DEVICE` using a reference by the `refDevice` attribute. It can also refer to the list of all the components it contains, with the `refDeviceList` attribute, using the Data Model 'DEVICE'"}
        - MODEL_ADOPTERS: 
            currentAdopters:
            - {adopter: Stephane ROUX, comments: SmartCity Project, description: Project Manager,
              mail: stephane.Roux@nicecotedazur.org, organization: Métropole Nice Côte d'Azur,
              project: Data Lake, startDate: January 2019}
            description: This is a compilation list of the current adopters of the data model
              TechnicalCabinetDevice of the Subject StreetLightting.

        - MODEL_DOCUMENTATION: "Entity: TechnicalCabinetDevice  \n==============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Energy/blob/master/TechnicalCabinetDevice/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Technical Cabinet Device Data Model is intended to to describe the technical characteristics of the Device, designed to be placed in an urban or interurban environment. The main objective of these cabinets for this Data Model is to protect the electrical equipment necessary for the control, surveillance, reading and management of urban lighting, signaling, video and electrical distribution. The scope of use of some of these cabinets can extend to an additional protection for installations of modular apparatuses of telephony, data processing, meteorological stations, photo-voltaic stations, wind turbines stations, telecommunications, networks, data, bre Optics , etc. *Remark* : This Data Model can be used directly as a main entity to describe the device `Technical Cabinet`  or as a sub-entity of the Data Model  `DEVICE` using a reference by the `refDevice` attribute. It can also refer to the list of all the components it contains, with the `refDeviceList` attribute, using the Data Model  `DEVICE`**  \n\n\r## List of properties  \n\n\r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `application`: Target application of the Device regarding the environment. A combination of these values. Enum:'commercial, distributionService, industrial, other, publicWorks, road, tertiary, urbanService'  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `brandName`: Name of the brand  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateLastReported`: A timestamp which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `designMaterials`: Design materials to build the cabinet. A combination of  these values. Enum:'ABS-Plastic, aluminum, fiberGlass, galvanizedSteel, other, polyester, stainlessSteel'  \r- `dimension`: The format is structured by a sub-property of 3 items. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter.  \r- `documentation`: A link to device's documentation  \r- `doorClosingMode`: Door closing mode. A unique value of these values. Enum:'fixedHandle, other, revolvingHandle, triangleHandle'  \r- `doorCount`: Count of doors of the technical Cabinet.  \r- `doorOpeningAngle`: Door opening angle expressed in decimal degrees with a range from 0 to 180 degree. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **DD** represents Decimal Degrees.  \r- `doorType`: Type of door of the technical Cabinet. A unique value of these values. Enum:'mixed, other, solid, transparent'  \r- `exteriorCoating`: Interior Coating. A combination of these values. Enum:'fiberGlass, other, plastic, polyester, polyesterResin, steel  \r- `exteriorFinish`: Exterior finish. A combination of these values. Enum:'graffiti, other, raised, roughcast, smooth, textured'  \r- `id`: Unique identifier of the entity  \r- `installationCondition`: Condition and possibility of use in the following environments. A combination of these values. Enum:'desert, dust, extremeCold, extremeClimate, extremeHeat, extremeHumidity, marine, none, other, saline, seismic, sand'  \r- `installationMode`: Positioning of the device in relation to a ground reference system. Enum:'aerial, ground, other, pole, roofing, underground, wall'  \r- `interiorCoating`: Interior Coating. A combination of these values. Enum:'fiberGlass, heatInsulating, other, plastic, polyester, polyesterResin, steel'  \r- `internalDimension`: Internal dimension corresponding to the place to work inside the technical cabinet. The format is structured by a sub-property of 3 items. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `manufacturerName`: Name of the manufacturer  \r- `maximumSystemVoltage`: Maximum system voltage permitted for the **module**. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt  \r- `modelName`: Name of the model as given by the manufacturer.  \r- `name`: The name of this item.  \r- `operatingTemperature`: Ambient operating temperature range. This is the minimum and maximum resistance to cold and heat. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `possibilityOfUse`: Possibility of use. A unique value. Enum:'mixed, mobile, other, stationary'  \r- `protectionIK`: IK '*Mecanic Protection*' level relating to numeric classification for the degrees of protection provided by enclosures for electrical equipment against external mechanical impacts, according to International Electro technical Commission standard (EN 62-262). - IK varies from 0 (minimum resistance) to 10 (maximum resistance) which represents an Impact Energy (Unit Joule)  \r- `protectionIP`: IP 'Ingress Protection' for the Junction Box. This is the level classifies and rates the degree of protection provided by mechanical casings and electrical enclosures against intrusion, dust, accidental contact, and water according to International Electrotechnical Commission standard (EN 60-529). First digit: Solid particle protection (Single numeral: 06 or 'X'). Second digit: Liquid ingress protection (Single numeral: 09 or 'X' ).Third digit: Personal Protection against access to dangerous parts (optional additional letter). Fourth digit: Other protections (optional additional letter)  \r- `protectionOthers`: Others protection of the technical cabinet. A combination of these values. Enum:'abrasion, basement, dampProof, display, doorTearing, dust, forcedOpening, graffiti, insect, other, roofOverload, saltSpray, shielding, solar, vandalism, water'  \r- `refDevice`: The device used to obtain the data expressed by this record  \r- `refDeviceList`: A list of reference to the [Devices](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) which are inside the technical Cabinet Device.  \r- `refPointOfInterest`: Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the observation.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `serialNumber`: Serial number of the container  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be TechnicalCabinetDevice  \r- `typeOfUse`: Accepted use regarding its positioning in an indoor / outdoor environment. A unique value of these values. Enum:'indoor, mixed, outdoor, other'  \r- `ventilationMode`: Ventilation mode. A combination of these values. Enum:'airConditioners, dehumidifier, none, other, selfVentilatedGills'  \r- `weight`: Weight of the item. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KGM** represents Kilograms  \r  \n\rRequired properties  \n- `dateLastReported`  \r- `dimension`  \r- `id`  \r- `location`  \r- `type`  \r- `typeOfUse`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nTechnicalCabinetDevice:    \n  description: 'Technical Cabinet Device Data Model is intended to to describe the technical characteristics of the Device, designed to be placed in an urban or interurban environment. The main objective of these cabinets for this Data Model is to protect the electrical equipment necessary for the control, surveillance, reading and management of urban lighting, signaling, video and electrical distribution. The scope of use of some of these cabinets can extend to an additional protection for installations of modular apparatuses of telephony, data processing, meteorological stations, photo-voltaic stations, wind turbines stations, telecommunications, networks, data, bre Optics , etc. *Remark* : This Data Model can be used directly as a main entity to describe the device `Technical Cabinet`  or as a sub-entity of the Data Model  `DEVICE` using a reference by the `refDevice` attribute. It can also refer to the list of all the components it contains, with the `refDeviceList` attribute, using the Data Model  `DEVICE`'    \n  properties:    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    application:    \n      description: 'Target application of the Device regarding the environment. A combination of these values. Enum:''commercial, distributionService, industrial, other, publicWorks, road, tertiary, urbanService'''    \n      items:    \n        enum:    \n          - commercial    \n          - distributionService    \n          - industrial    \n          - other    \n          - publicWorks    \n          - road    \n          - tertiary    \n          - urbanService    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    brandName:    \n      description: 'Name of the brand'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/brand    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateLastReported:    \n      description: 'A timestamp which denotes the last time when the device successfully reported data. Date and time in an ISO8601 UTCformat'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    designMaterials:    \n      description: 'Design materials to build the cabinet. A combination of  these values. Enum:''ABS-Plastic, aluminum, fiberGlass, galvanizedSteel, other, polyester, stainlessSteel'''    \n      items:    \n        enum:    \n          - ABS-Plastic    \n          - aluminum    \n          - fiberGlass    \n          - galvanizedSteel    \n          - other    \n          - polyester    \n          - stainlessSteel    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    dimension:    \n      description: 'The format is structured by a sub-property of 3 items. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter.'    \n      properties:    \n        depth:    \n          description: 'Property. '    \n          minimum: 0    \n          type: number    \n        height:    \n          minimum: 0    \n          type: number    \n        width:    \n          description: 'Property. '    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    documentation:    \n      description: 'A link to device''s documentation'    \n      format: uri    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    doorClosingMode:    \n      description: 'Door closing mode. A unique value of these values. Enum:''fixedHandle, other, revolvingHandle, triangleHandle'''    \n      items:    \n        enum:    \n          - fixedHandle    \n          - other    \n          - revolvingHandle    \n          - triangleHandle    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    doorCount:    \n      description: 'Count of doors of the technical Cabinet.'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    doorOpeningAngle:    \n      description: 'Door opening angle expressed in decimal degrees with a range from 0 to 180 degree. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **DD** represents Decimal Degrees.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    doorType:    \n      description: 'Type of door of the technical Cabinet. A unique value of these values. Enum:''mixed, other, solid, transparent'''    \n      enum:    \n        - mixed    \n        - other    \n        - solid    \n        - transparent    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    exteriorCoating:    \n      description: 'Interior Coating. A combination of these values. Enum:''fiberGlass, other, plastic, polyester, polyesterResin, steel'    \n      items:    \n        enum:    \n          - fiberGlass    \n          - other    \n          - plastic    \n          - polyester    \n          - polyesterResin    \n          - steel    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    exteriorFinish:    \n      description: 'Exterior finish. A combination of these values. Enum:''graffiti, other, raised, roughcast, smooth, textured'''    \n      items:    \n        enum:    \n          - graffiti    \n          - other    \n          - raised    \n          - roughcast    \n          - smooth    \n          - textured    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &technicalcabinetdevice_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    installationCondition:    \n      description: 'Condition and possibility of use in the following environments. A combination of these values. Enum:''desert, dust, extremeCold, extremeClimate, extremeHeat, extremeHumidity, marine, none, other, saline, seismic, sand'''    \n      items:    \n        enum:    \n          - desert    \n          - dust    \n          - extremeCold    \n          - extremeClimate    \n          - extremeHeat    \n          - extremeHumidity    \n          - marine    \n          - none    \n          - other    \n          - saline    \n          - seismic    \n          - sand    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    installationMode:    \n      description: 'Positioning of the device in relation to a ground reference system. Enum:''aerial, ground, other, pole, roofing, underground, wall'''    \n      enum:    \n        - aerial    \n        - ground    \n        - other    \n        - pole    \n        - roofing    \n        - underground    \n        - wall    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    interiorCoating:    \n      description: 'Interior Coating. A combination of these values. Enum:''fiberGlass, heatInsulating, other, plastic, polyester, polyesterResin, steel'''    \n      items:    \n        enum:    \n          - fiberGlass    \n          - heatInsulating    \n          - other    \n          - plastic    \n          - polyester    \n          - polyesterResin    \n          - steel    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    internalDimension:    \n      description: 'Internal dimension corresponding to the place to work inside the technical cabinet. The format is structured by a sub-property of 3 items. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CMT** represents Centimeter'    \n      properties:    \n        depth:    \n          minimum: 0    \n          type: number    \n        height:    \n          minimum: 0    \n          type: number    \n        width:    \n          minimum: 0    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/StructuredValue    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    manufacturerName:    \n      description: 'Name of the manufacturer'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/manufacturer    \n        type: Property    \n    maximumSystemVoltage:    \n      description: 'Maximum system voltage permitted for the **module**. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **VLT** represents Volt'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    modelName:    \n      description: 'Name of the model as given by the manufacturer.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    operatingTemperature:    \n      description: 'Ambient operating temperature range. This is the minimum and maximum resistance to cold and heat. The format is structured by a sub-property of 2 items. The unit code (text) is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **CEL** represents Degree Celsius.'    \n      properties:    \n        max:    \n          minimum: 0    \n          type: number    \n        min:    \n          minimum: -80    \n          type: number    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *technicalcabinetdevice_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    possibilityOfUse:    \n      description: 'Possibility of use. A unique value. Enum:''mixed, mobile, other, stationary'''    \n      enum:    \n        - mixed    \n        - mobile    \n        - other    \n        - stationary    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    protectionIK:    \n      description: 'IK ''*Mecanic Protection*'' level relating to numeric classification for the degrees of protection provided by enclosures for electrical equipment against external mechanical impacts, according to International Electro technical Commission standard (EN 62-262). - IK varies from 0 (minimum resistance) to 10 (maximum resistance) which represents an Impact Energy (Unit Joule)'    \n      type: number    \n      x-ngsi:    \n        type: Property    \n    protectionIP:    \n      description: 'IP ''Ingress Protection'' for the Junction Box. This is the level classifies and rates the degree of protection provided by mechanical casings and electrical enclosures against intrusion, dust, accidental contact, and water according to International Electrotechnical Commission standard (EN 60-529). First digit: Solid particle protection (Single numeral: 06 or ''X''). Second digit: Liquid ingress protection (Single numeral: 09 or ''X'' ).Third digit: Personal Protection against access to dangerous parts (optional additional letter). Fourth digit: Other protections (optional additional letter)'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    protectionOthers:    \n      description: 'Others protection of the technical cabinet. A combination of these values. Enum:''abrasion, basement, dampProof, display, doorTearing, dust, forcedOpening, graffiti, insect, other, roofOverload, saltSpray, shielding, solar, vandalism, water'''    \n      items:    \n        enum:    \n          - abrasion    \n          - basement    \n          - dampProof    \n          - display    \n          - doorTearing    \n          - dust    \n          - forcedOpening    \n          - graffiti    \n          - insect    \n          - other    \n          - roofOverload    \n          - saltSpray    \n          - shielding    \n          - solar    \n          - vandalism    \n          - water    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refDevice:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'The device used to obtain the data expressed by this record'    \n      x-ngsi:    \n        type: Relationship    \n    refDeviceList:    \n      description: 'A list of reference to the [Devices](https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md) which are inside the technical Cabinet Device.'    \n      items:    \n        anyOf:    \n          - description: 'Property. Identifier format of any NGSI entity'    \n            maxLength: 256    \n            minLength: 1    \n            pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n            type: string    \n          - description: 'Property. Identifier format of any NGSI entity'    \n            format: uri    \n            type: string    \n      type: array    \n      x-ngsi:    \n        type: Relationship    \n    refPointOfInterest:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Reference to a [PointOfInterest](https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md) linked with the observation.'    \n      x-ngsi:    \n        type: Relationship    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    serialNumber:    \n      description: 'Serial number of the container'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/serialNumber    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be TechnicalCabinetDevice'    \n      enum:    \n        - TechnicalCabinetDevice    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    typeOfUse:    \n      description: 'Accepted use regarding its positioning in an indoor / outdoor environment. A unique value of these values. Enum:''indoor, mixed, outdoor, other'''    \n      enum:    \n        - indoor    \n        - mixed    \n        - outdoor    \n        - other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    ventilationMode:    \n      description: 'Ventilation mode. A combination of these values. Enum:''airConditioners, dehumidifier, none, other, selfVentilatedGills'''    \n      items:    \n        enum:    \n          - airConditioners    \n          - dehumidifier    \n          - none    \n          - other    \n          - selfVentilatedGills    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    weight:    \n      description: 'Weight of the item. The unit code (text) of measurement  is given using the [UN/CEFACT Common Codes](http://wiki.goodrelations-vocabulary.org/Documentation/UN/CEFACT_Common_Codes). For instance, **KGM** represents Kilograms'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/weigth    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n    - dateLastReported    \n    - typeOfUse    \n    - dimension    \n  type: object    \n```  \n</details>    \n\r## Example payloads    \n\r#### TechnicalCabinetDevice NGSI-v2 key-values Example    \n\rHere is an example of a TechnicalCabinetDevice in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-TechnicalCabinetDevice:MNCA-TCD-AP-T2-F1-022\",  \n  \"type\": \"TechnicalCabinetDevice\",  \n  \"name\": \"MNCA-TCD-AP-T2-F1-022\",  \n  \"alternateName\": \"AirPort \u2013 global Observation\",  \n  \"description\": \"Technical Cabinet description\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      7.196545,  \n      43.664810  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Airport Terminal 2 - Floor 1\"  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"refDeviceList\": [  \n    \"urn:ngsi-ld:Device:NCE-CE-025\",  \n    \"urn:ngsi-ld:Device:NCE-FU-048\",  \n    \"urn:ngsi-ld:Device:NCE-CE-058\"  \n  ],  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"brandName\": \"EATON\",  \n  \"modelName\": \"xEnergy L\",  \n  \"manufacturerName\": \"ElDorado\",  \n  \"serialNumber\": \"L257589A4587J56\",  \n  \"application\": [  \n    \"industrial\",  \n    \"distributionService\"  \n  ],  \n  \"typeOfUse\": \"outdoor\",  \n  \"installationMode\": \"ground\",  \n  \"installationCondition\": [  \n    \"none\"  \n  ],  \n  \"possibilityOfUsed\": \"stationary\",  \n  \"documentation\": \"https://www.myTechnicalCabinet.fr\",  \n  \"deviceOwner\": [  \n    \"Airport-Division Maintenance\"  \n  ],  \n  \"dimension\": {  \n    \"width\": 150,  \n    \"height\": 175,  \n    \"depth\": 75  \n  },  \n  \"weight\": 60,  \n  \"internalDimension\": {  \n    \"width\": 140,  \n    \"height\": 165,  \n    \"depth\": 70  \n  },  \n  \"protectionIP\": \"65\",  \n  \"protectionIK\": 10,  \n  \"maximumSystemVoltage\": 1000,  \n  \"operatingTemperature\": {  \n    \"min\": -40,  \n    \"max\": 100  \n  },  \n  \"protectionOthers\": [  \n    \"dust\",  \n    \"forcedOpening\",  \n    \"saltSpray\",  \n    \"abrasion\",  \n    \"doorTearing\",  \n    \"vandalism\"  \n  ],  \n  \"doorCount\": 2,  \n  \"doorType\": \"solid\",  \n  \"doorOpeningAngle\": 180,  \n  \"doorClosingMode\": [  \n    \"fixedHandle\"  \n  ],  \n  \"designMaterials\": [  \n    \"stainlessSteel\",  \n    \"polyester\"  \n  ],  \n  \"interiorCoating\": [  \n    \"heatInsulating\",  \n    \"polyesterResin\"  \n  ],  \n  \"exteriorCoating\": [  \n    \"polyesterResin\"  \n  ],  \n  \"exteriorFinish\": [  \n    \"roughcast\"  \n  ],  \n  \"ventilationMode\": [  \n    \"selfVentilatedGills\"  \n  ]  \n}  \n```  \n\r#### TechnicalCabinetDevice NGSI-v2 normalized Example    \n\rHere is an example of a TechnicalCabinetDevice in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-TechnicalCabinetDevice:MNCA-TCD-AP-T2-F1-022\",  \n  \"type\": \"TechnicalCabinetDevice\",  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"MNCA-TCD-AP-T2-F1-022\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"AirPort \u2013 global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Technical Cabinet description\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"point\",  \n      \"coordinates\": [  \n        7.196545,  \n        43.664810  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"addressCountry\": \"FR\",  \n      \"addressLocality\": \"Nice\",  \n      \"streetAddress\": \"Airport Terminal 2 - Floor 1\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"refDeviceList\": {  \n    \"type\": \"Relationship\",  \n    \"object\": [  \n      \"urn:ngsi-ld:Device:NCE-CE-025\",  \n      \"urn:ngsi-ld:Device:NCE-FU-048\",  \n      \"urn:ngsi-ld:Device:NCE-CE-058\"  \n    ]  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2020-03-17T08:45:00Z\"  \n  },  \n  \"brandName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"EATON\"  \n  },  \n  \"modelName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"xEnergy L\"  \n  },  \n  \"manufacturerName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"ElDorado\"  \n  },  \n  \"serialNumber\": {  \n    \"type\": \"Text\",  \n    \"value\": \"L257589A4587J56\"  \n  },  \n  \"application\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"industrial\",  \n      \"distributionService\"  \n    ]  \n  },  \n  \"typeOfUse\": {  \n    \"type\": \"Text\",  \n    \"value\": \"outDoor\"  \n  },  \n  \"installationMode\": {  \n    \"type\": \"Text\",  \n    \"value\": \"ground\"  \n  },  \n  \"installationCondition\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"none\"  \n    ]  \n  },  \n  \"possibilityOfUsed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"stationary\"  \n  },  \n  \"documentation\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://www.myTechnicalCabinet.fr\"  \n  },  \n  \"owner\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"Airport-Division Maintenance\"  \n    ]  \n  },  \n  \"dimension\": {  \n    \"type\": \"StructuredObject\",  \n    \"value\": {  \n      \"width\": 150,  \n      \"height\": 175,  \n      \"depth\": 75  \n    }  \n  },  \n  \"weight\": {  \n    \"type\": \"Number\",  \n    \"value\": 60  \n  },  \n  \"internalDimension\": {  \n    \"type\": \"StructuredObject\",  \n    \"value\": {  \n      \"width\": 140,  \n      \"height\": 165,  \n      \"depth\": 70  \n    }  \n  },  \n  \"protectionIP\": {  \n    \"type\": \"Text\",  \n    \"value\": \"65\"  \n  },  \n  \"protectionIK\": {  \n    \"type\": \"Number\",  \n    \"value\": 10  \n  },  \n  \"maximumSystemVoltage\": {  \n    \"type\": \"Number\",  \n    \"value\": 1000  \n  },  \n  \"operatingTemperature\": {  \n    \"type\": \"StructuredObject\",  \n    \"value\": {  \n      \"min\": -40,  \n      \"max\": 100  \n    }  \n  },  \n  \"protectionOthers\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"dust\",  \n      \"forcedOpening\",  \n      \"saltSpray\",  \n      \"abrasion\",  \n      \"doorTearing\",  \n      \"vandalism\"  \n    ]  \n  },  \n  \"doorCount\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"doorType\": {  \n    \"type\": \"Text\",  \n    \"value\": \"solid\"  \n  },  \n  \"doorOpeningAngle\": {  \n    \"type\": \"Number\",  \n    \"value\": 180  \n  },  \n  \"doorClosingMode\": {  \n    \"type\": \"Text\",  \n    \"value\": \"fixedHandle\"  \n  },  \n  \"designMaterials\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"stainlessSteel\",  \n      \"polyester\"  \n    ]  \n  },  \n  \"interiorCoating\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"heatInsulating\",  \n      \"polyesterResin\"  \n    ]  \n  },  \n  \"exteriorCoating\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"polyesterResin\"  \n    ]  \n  },  \n  \"exteriorFinish\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"roughcast\"  \n    ]  \n  },  \n  \"ventilationMode\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"selfVentilatedGills\"  \n    ]  \n  }  \n}  \n```  \n\r#### TechnicalCabinetDevice NGSI-LD key-values Example    \n\rHere is an example of a TechnicalCabinetDevice in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-TechnicalCabinetDevice:MNCA-TCD-AP-T2-F1-022\",  \n  \"type\": \"TechnicalCabinetDevice\",  \n  \"name\": \"MNCA-TCD-AP-T2-F1-022\",  \n  \"alternateName\": \"AirPort \u00e2\u20ac\u201c global Observation\",  \n  \"description\": \"Technical Cabinet description\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      7.196545,  \n      43.664810  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"FR\",  \n    \"addressLocality\": \"Nice\",  \n    \"streetAddress\": \"Airport Terminal 2 - Floor 1\"  \n  },  \n  \"areaServed\": \"Nice Aeroport\",  \n  \"refDeviceList\": [  \n    \"urn:ngsi-ld:Device:NCE-CE-025\",  \n    \"urn:ngsi-ld:Device:NCE-FU-048\",  \n    \"urn:ngsi-ld:Device:NCE-CE-058\"  \n  ],  \n  \"dateLastReported\": \"2020-03-17T08:45:00Z\",  \n  \"brandName\": \"EATON\",  \n  \"modelName\": \"xEnergy L\",  \n  \"manufacturerName\": \"ElDorado\",  \n  \"serialNumber\": \"L257589A4587J56\",  \n  \"application\": [  \n    \"industrial\",  \n    \"distributionService\"  \n  ],  \n  \"typeOfUse\": \"outdoor\",  \n  \"installationMode\": \"ground\",  \n  \"installationCondition\": [  \n    \"none\"  \n  ],  \n  \"possibilityOfUsed\": \"stationary\",  \n  \"documentation\": \"https://www.myTechnicalCabinet.fr\",  \n  \"deviceOwner\": [  \n    \"Airport-Division Maintenance\"  \n  ],  \n  \"dimension\": {  \n    \"width\": 150,  \n    \"height\": 175,  \n    \"depth\": 75  \n  },  \n  \"weight\": 60,  \n  \"internalDimension\": {  \n    \"width\": 140,  \n    \"height\": 165,  \n    \"depth\": 70  \n  },  \n  \"protectionIP\": \"65\",  \n  \"protectionIK\": 10,  \n  \"maximumSystemVoltage\": 1000,  \n  \"operatingTemperature\": {  \n    \"min\": -40,  \n    \"max\": 100  \n  },  \n  \"protectionOthers\": [  \n    \"dust\",  \n    \"forcedOpening\",  \n    \"saltSpray\",  \n    \"abrasion\",  \n    \"doorTearing\",  \n    \"vandalism\"  \n  ],  \n  \"doorCount\": 2,  \n  \"doorType\": \"solid\",  \n  \"doorOpeningAngle\": 180,  \n  \"doorClosingMode\": [  \n    \"fixedHandle\"  \n  ],  \n  \"designMaterials\": [  \n    \"stainlessSteel\",  \n    \"polyester\"  \n  ],  \n  \"interiorCoating\": [  \n    \"heatInsulating\",  \n    \"polyesterResin\"  \n  ],  \n  \"exteriorCoating\": [  \n    \"polyesterResin\"  \n  ],  \n  \"exteriorFinish\": [  \n    \"roughcast\"  \n  ],  \n  \"ventilationMode\": [  \n    \"selfVentilatedGills\"  \n  ],  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### TechnicalCabinetDevice NGSI-LD normalized Example    \n\rHere is an example of a TechnicalCabinetDevice in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-TechnicalCabinetDevice:MNCA-TCD-AP-T2-F1-022\",  \n  \"type\": \"TechnicalCabinetDevice\",  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"MNCA-TCD-AP-T2-F1-022\"  \n  },  \n  \"alternateName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"AirPort \u00e2\u20ac\u201c global Observation\"  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Technical Cabinet description\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"point\",  \n      \"coordinates\": [  \n        7.196545,  \n        43.664810  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"FR\",  \n      \"addressLocality\": \"Nice\",  \n      \"streetAddress\": \"Airport Terminal 2 - Floor 1\"  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Nice Aeroport\"  \n  },  \n  \"refDeviceList\": {  \n    \"type\": \"Relationship\",  \n    \"object\": [  \n      \"urn:ngsi-ld:Device:NCE-CE-025\",  \n      \"urn:ngsi-ld:Device:NCE-FU-048\",  \n      \"urn:ngsi-ld:Device:NCE-CE-058\"  \n    ]  \n  },  \n  \"dateLastReported\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"type\": \"DateTime\",  \n      \"value\": \"2020-03-17T08:45:00Z\"  \n    }  \n  },  \n  \"brandName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"EATON\"  \n  },  \n  \"modelName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"xEnergy L\"  \n  },  \n  \"manufacturerName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"ElDorado\"  \n  },  \n  \"serialNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": \"L257589A4587J56\"  \n  },  \n  \"application\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"industrial\",  \n      \"distributionService\"  \n    ]  \n  },  \n  \"typeOfUse\": {  \n    \"type\": \"Property\",  \n    \"value\": \"outDoor\"  \n  },  \n  \"installationMode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"ground\"  \n  },  \n  \"installationCondition\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"none\"  \n    ]  \n  },  \n  \"possibilityOfUsed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"stationary\"  \n  },  \n  \"documentation\": {  \n    \"type\": \"Property\",  \n    \"value\": \"https://www.myTechnicalCabinet.fr\"  \n  },  \n  \"owner\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"Airport-Division Maintenance\"  \n    ]  \n  },  \n  \"dimension\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"width\": 150,  \n      \"height\": 175,  \n      \"depth\": 75  \n    }  \n  },  \n  \"weight\": {  \n    \"type\": \"Property\",  \n    \"value\": 60  \n  },  \n  \"internalDimension\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"width\": 140,  \n      \"height\": 165,  \n      \"depth\": 70  \n    }  \n  },  \n  \"protectionIP\": {  \n    \"type\": \"Property\",  \n    \"value\": \"65\"  \n  },  \n  \"protectionIK\": {  \n    \"type\": \"Property\",  \n    \"value\": 10  \n  },  \n  \"maximumSystemVoltage\": {  \n    \"type\": \"Property\",  \n    \"value\": 1000  \n  },  \n  \"operatingTemperature\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"min\": -40,  \n      \"max\": 100  \n    }  \n  },  \n  \"protectionOthers\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"dust\",  \n      \"forcedOpening\",  \n      \"saltSpray\",  \n      \"abrasion\",  \n      \"doorTearing\",  \n      \"vandalism\"  \n    ]  \n  },  \n  \"doorCount\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"doorType\": {  \n    \"type\": \"Property\",  \n    \"value\": \"solid\"  \n  },  \n  \"doorOpeningAngle\": {  \n    \"type\": \"Property\",  \n    \"value\": 180  \n  },  \n  \"doorClosingMode\": {  \n    \"type\": \"Property\",  \n    \"value\": \"fixedHandle\"  \n  },  \n  \"designMaterials\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"stainlessSteel\",  \n      \"polyester\"  \n    ]  \n  },  \n  \"interiorCoating\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"heatInsulating\",  \n      \"polyesterResin\"  \n    ]  \n  },  \n  \"exteriorCoating\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"polyesterResin\"  \n    ]  \n  },  \n  \"exteriorFinish\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"roughcast\"  \n    ]  \n  },  \n  \"ventilationMode\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"selfVentilatedGills\"  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://smart-data-models.github.io/data-models/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
    - SUBMODULE_SHORT_NAME: EnergyCIM
      MODELS:
