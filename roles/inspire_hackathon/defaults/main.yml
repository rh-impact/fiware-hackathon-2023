---
TEAM_ID: "..."
# The name of the Github organization for the course. 
GITHUB_ORG: "..."
# The github token of the instructor's Github account. See Github Settings, Developer Settings, Personal access tokens. 
# Make sure the token has the following roles (admin:org, repo): https://github.com/settings/tokens
GITHUB_TOKEN: "..."
# The name of the forked Github repository for the course containing the ansible scripts and ansible vaults for the project. 
GITHUB_REPO_NAME: "..."
# The path to the cloned repository. 
GITHUB_REPO_PATH: "/usr/local/src/{{ GITHUB_REPO_NAME }}"
# The SSH URL to the git repository. 
GITHUB_REPO: "git@github.com:{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}.git"
# The Web URL to the git repository. 
GITHUB_REPO_WEB: "https://github.com/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}"
# The Ansible inventory name. 
ANSIBLE_INVENTORY_NAME: "..."
# The path to the Ansible vault. 
GITHUB_VAULT_PATH: "{{ GITHUB_REPO_PATH }}/vaults/{{ ANSIBLE_INVENTORY_NAME }}"
# The same repository name or a different one if the Ansible vaults are kept in a private repository. 
ANSIBLE_REPO_NAME: "{{ GITHUB_REPO_NAME }}"
# The same repository path or a different one if the Ansible vaults are kept in a private repository. 
ANSIBLE_REPO_PATH: "/usr/local/src/{{ ANSIBLE_REPO_NAME }}"
# The same repository SSH URL or a different one if the Ansible vaults are kept in a private repository. 
ANSIBLE_REPO: "git@github.com:{{ GITHUB_ORG }}/{{ ANSIBLE_REPO_NAME }}.git"
# The display name of the Github project. 
PROJECT_NAME: "Red Hat Impact Hackathon 2021"
# The description of the Github project. 
PROJECT_DESCRIPTION: "A Red Hat Impact Hackathon. "
# The name of the application to deploy. 
APP_NAME: "..."
# The git repository name of the application to deploy. 
APP_REPO_NAME: "{{ APP_NAME }}"
# The path to the cloned repository of the application to deploy. 
APP_REPO_PATH: "/usr/local/src/{{ APP_REPO_NAME }}"
# The SSH URL to the repository of the application to deploy. 
APP_REPO: "git@github.com:{{ GITHUB_ORG }}/{{ APP_REPO_NAME }}.git"
# The Ansible friendly name of the the repository of the application to deploy. 
APP_NAME_ANSIBLE: "{{ APP_NAME | regex_replace('-', '_') }}"

# The URL to the OpenShift cluster to deploy. 
REDHAT_OPENSHIFT_HOST: https://console.rh-us-east-1.openshift.com
# The URL to manage the OpenShift cluster to deploy. 
REDHAT_OPENSHIFT_MANAGE_HOST: https://employee.openshift.com
# The OpenShift project name that will be used. 
REDHAT_OPENSHIFT_NAMESPACE: school
# The OpenShift login IDs that will be managing the OpenShift cluster. 
REDHAT_OPENSHIFT_LOGIN_IDS: 
  - christophertate

FIWARE_SMART_DATA_MODEL_DOMAIN_REPOS:
  - DOMAIN_NAME: Smart Cities
    REPO_URL: https://github.com/smart-data-models/SmartCities
  - DOMAIN_NAME: Smart Agrifood
    REPO_URL: https://github.com/smart-data-models/SmartAgrifood
  - DOMAIN_NAME: Smart Water
    REPO_URL: https://github.com/smart-data-models/SmartWater
  - DOMAIN_NAME: Smart Energy
    REPO_URL: https://github.com/smart-data-models/SmartEnergy
  - DOMAIN_NAME: Smart Environment
    REPO_URL: https://github.com/smart-data-models/SmartEnvironment
  - DOMAIN_NAME: Smart Sensoring
    REPO_URL: https://github.com/smart-data-models/Smart-Sensoring
  - DOMAIN_NAME: Smart Aeronautics
    REPO_URL: https://github.com/smart-data-models/SmartAeronautics
  - DOMAIN_NAME: Smart Destination
    REPO_URL: https://github.com/smart-data-models/SmartDestination
  - DOMAIN_NAME: Cross Sector
    REPO_URL: https://github.com/smart-data-models/CrossSector
  - DOMAIN_NAME: Smart Robotics
    REPO_URL: https://github.com/smart-data-models/SmartRobotics
  - DOMAIN_NAME: Smart Health
    REPO_URL: https://github.com/smart-data-models/SmartHealth
  - DOMAIN_NAME: Smart Manufacturing
    REPO_URL: https://github.com/smart-data-models/SmartManufacturing
HACKATHON_LOCATIONS:
  - REGION: Europe
    SMART_DATA_MODELS:
      - Building
      - BuildingOperation
      - BicycleParkingStation
      - ResourceReport
  - REGION: North America
    SMART_DATA_MODELS:
      - Building
      - BuildingOperation
      - BicycleParkingStation
      - ResourceReport
      - 
ANSIBLE_PROJECTS:
  - title: FIWARE NA 2023 Hackathon
    shortDescription: Work with Smart Data Models and the FIWARE Context broker in North America
    public: true
    GITHUB_REPO_NAME: fiware-hackathon-2023
    GITHUB_README: https://github.com/rh-impact/fiware-hackathon-2023/blob/main/README.md
    SOLR_APP_NAME: fiware-hackathon-2023
    ANSIBLE_COLUMNS:
      - name: BicycleParkingStation - OSLO - Smart Cities
        DOMAIN_NAME: Smart Cities
        SUBMODULE_SHORT_NAME: OSLO
        ANSIBLE_ISSUES:
          - ISSUE_LABEL: BicycleParkingStation
            ISSUE_MISSION: using the BicycleParkingStation Smart Data Model, import, visualize, and document the data deployed on your teams own OpenShift Local environment
            ISSUE_TITLE: BicycleParkingStation Smart Data Model
            ISSUE_DESCRIPTION: Using the BicycleParkingStation Smart Data Model, import, visualize, and document the data deployed on your teams own OpenShift Local environment. 
            ISSUE_SKILLS: YAML, OpenShift, REST APIs
            ISSUE_LABELS:
              - Smart Cities
              - OSLO
            ISSUE_BODY: |
              
              Using the BicycleParkingStation Smart Data Model, import, visualize, and document the data deployed on your teams own OpenShift Local environment. 
  - title: FIWARE EMEA 2023 Hackathon
    shortDescription: Work with Smart Data Models and the FIWARE Context broker in Europe
    public: true
    GITHUB_REPO_NAME: fiware-hackathon-2023
    GITHUB_README: https://github.com/rh-impact/fiware-hackathon-2023/blob/main/README.md
    SOLR_APP_NAME: fiware-hackathon-2023
    ANSIBLE_COLUMNS:
      - name: Agrifood
        DOMAIN_NAME: Smart Agrifood
        SUBMODULE_SHORT_NAME: AgriCrop
        ANSIBLE_ISSUES:
          - ISSUE_LABEL: AgriCrop
            ISSUE_MISSION: using the AgriCrop Smart Data Model, import, visualize, and document the data deployed on your teams own OpenShift Local environment
            ISSUE_TITLE: AgriCrop Smart Data Model
            ISSUE_DESCRIPTION: Using the AgriCrop Smart Data Model, import, visualize, and document the data deployed on your teams own OpenShift Local environment. 
            ISSUE_SKILLS: YAML, OpenShift, REST APIs
            ISSUE_LABELS:
              - Smart Agrifood
              - AgriCrop
            ISSUE_BODY: |
              
              Using the AgriCrop Smart Data Model, import, visualize, and document the data deployed on your teams own OpenShift Local environment. 

FIWARE_SMART_DATA_MODELS:
  Smart Cities:
    DOMAIN_NAME: Smart Cities
    REPO_URL: https://github.com/smart-data-models/SmartCities.git
    SUBMODULES:
      Building:
        SUBMODULE_SHORT_NAME: Building
        MODELS:
      OSLO:
        SUBMODULE_SHORT_NAME: OSLO
        MODELS:
          BicycleParkingStation:
            MODEL_NAME: BicycleParkingStation
            MODEL_DESCRIPTION: Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification
            MODEL_ADOPTERS: 
              currentAdopters:
                - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                    datamodel soon. Current version:https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
                  description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
                  mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
                  startDate: null}
                - {adopter: velopark.be, comments: 'Catalogue:https://data.velopark.be/data/catalog',
                  description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
                  mail: null, organization: Nazka, project: null, startDate: null}
              description: This is a compilation list of the current adopters of the data model
                BicycleParkingStation of the Subject dataModel.OSLO

            MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: BicycleParkingStation  \n=============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/BicycleParkingStation/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification**  \n\rversion: 0.0.1  \n\n\r## List of properties  \n\n\r- `InfrastructureElement.geometry`: The geometry corresponding to the infrastructure element.  \r- `ParkingFacility.^capacity`: Capacity of a civic structure.   \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be BicycleParkingStation  \r  \n\rRequired properties  \n- `InfrastructureElement.geometry`  \r- `ParkingFacility.^capacity`  \r- `id`  \r- `location`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBicycleParkingStation:    \n  description: 'Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification'    \n  properties:    \n    InfrastructureElement.geometry:    \n      description: 'The geometry corresponding to the infrastructure element.'    \n      properties:    \n        Geometry.wkt:    \n          description: \"Property. Model:'http://www.opengis.net/ont/geosparql#asWKT'. Geometry expressed in wkt format.\"    \n          properties: {}    \n          type: string    \n        type:    \n          description: \"Property. Model: 'http://www.w3.org/ns/locn#Geometry'\"    \n          enum:    \n            - Geometry    \n          type: string    \n      required:    \n        - type    \n        - Geometry.wkt    \n      type: object    \n      x-ngsi:    \n        model: \"http://www.w3.org/ns/locn#geometry\"    \n        type: Property    \n    ParkingFacility.^capacity:    \n      description: 'Capacity of a civic structure. '    \n      properties:    \n        Capacity.total:    \n          description: \"Property. Model: 'http://schema.mobivoc.org/#totalCapacity'. Indicates the capacity of a resource.\"    \n          type: number    \n        type:    \n          enum:    \n            - Capacity    \n          type: string    \n      required:    \n        - type    \n        - Capacity.total    \n      type: object    \n      x-ngsi:    \n        model: \"http://schema.mobivoc.org/#capacity\"    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &bicycleparkingstation_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *bicycleparkingstation_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be BicycleParkingStation'    \n      enum:    \n        - BicycleParkingStation    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - ParkingFacility.^capacity    \n    - InfrastructureElement.geometry    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/BicycleParkingStation/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/incubated/dataModel.OSLO.PassengerTransportHubs/raw/master/BicycleParkingStationPTH-AP/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.0.1    \n```  \n</details>    \n\r## Example payloads    \n\r#### BicycleParkingStation NGSI-v2 key-values Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  }  \n}  \n```  \n\r#### BicycleParkingStation NGSI-v2 normalized Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Number\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  }  \n}  \n```  \n\r#### BicycleParkingStation NGSI-LD key-values Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### BicycleParkingStation NGSI-LD normalized Example    \n\rHere is an example of a BicycleParkingStation in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Property\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
          BicycleParkingStationForecast:
            MODEL_NAME: BicycleParkingStationForecast
            MODEL_DESCRIPTION: Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification
            MODEL_ADOPTERS: 
              currentAdopters:
                - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                    datamodel soon. Current version:https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
                  description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
                  mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
                  startDate: null}
                - {adopter: velopark.be, comments: 'Catalogue:https://data.velopark.be/data/catalog',
                  description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
                  mail: null, organization: Nazka, project: null, startDate: null}

            MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: BicycleParkingStationForecast  \n=====================================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/BicycleParkingStationForecast/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification**  \n\rversion: 0.1.0  \n\n\r## List of properties  \n\n\r- `InfrastructureElement.geometry`: The geometry corresponding to the infrastructure element.  \r- `ParkingFacility.capacity`: Capacity of a civic structure.   \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be BicycleParkingStation  \r- `validFrom`: Validity period start date and time.  \r- `validTo`: Validity period end date and time.  \r- `validity`: Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.  \r  \n\rRequired properties  \n- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nBicycleParkingStationForecast:    \n  description: 'Bicycle Parking Station Schema meeting Passenger Transport Hubs AP Schema specification'    \n  properties:    \n    InfrastructureElement.geometry:    \n      description: 'The geometry corresponding to the infrastructure element.'    \n      properties:    \n        Geometry.wkt:    \n          description: \"Property. Model:'http://www.opengis.net/ont/geosparql#asWKT'. Geometry expressed in wkt format.\"    \n          properties: {}    \n          type: string    \n        type:    \n          description: \"Property. Model: 'http://www.w3.org/ns/locn#Geometry'\"    \n          enum:    \n            - Geometry    \n          type: string    \n      required:    \n        - type    \n        - Geometry.wkt    \n      type: object    \n      x-ngsi:    \n        model: \"http://www.w3.org/ns/locn#geometry\"    \n        type: Property    \n    ParkingFacility.capacity:    \n      description: 'Capacity of a civic structure. '    \n      properties:    \n        Capacity.total:    \n          description: \"Property. Model: 'http://schema.mobivoc.org/#totalCapacity'. Indicates the capacity of a resource.\"    \n          type: number    \n        type:    \n          enum:    \n            - Capacity    \n          type: string    \n      required:    \n        - type    \n        - Capacity.total    \n      type: object    \n      x-ngsi:    \n        model: \"http://schema.mobivoc.org/#capacity\"    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &bicycleparkingstationforecast_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *bicycleparkingstationforecast_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be BicycleParkingStation'    \n      enum:    \n        - BicycleParkingStationForecast    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    validFrom:    \n      description: 'Validity period start date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validTo:    \n      description: 'Validity period end date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validity:    \n      description: 'Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n  required:    \n    - id    \n    - type    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/BicycleParkingStationForecast/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/dataModel.OSLO/raw/master/BicycleParkingStationForecast/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.1.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### BicycleParkingStationForecast NGSI-v2 key-values Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  }  \n}  \n```  \n\r#### BicycleParkingStationForecast NGSI-v2 normalized Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Number\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  }  \n}  \n```  \n\r#### BicycleParkingStationForecast NGSI-LD key-values Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Capacity\",  \n    \"Capacity.total\": 20  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Geometry\",  \n    \"Geometry.wkt\": \"POINT(3.313743000000 50.855703000000)\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### BicycleParkingStationForecast NGSI-LD normalized Example    \n\rHere is an example of a BicycleParkingStationForecast in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"https://blue-bike.be/stations/141\",  \n  \"type\": \"BicycleParkingStation\",  \n  \"ParkingFacility.^capacity\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Capacity\",  \n      \"Capacity.total\": {  \n        \"type\": \"Property\",  \n        \"value\": 20  \n      }  \n    }  \n  },  \n  \"InfrastructureElement.geometry\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"Geometry\",  \n      \"Geometry.wkt\": {  \n        \"type\": \"Property\",  \n        \"value\": \"POINT(3.313743000000 50.855703000000)\"  \n      }  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
          ResourceReport:
            MODEL_NAME: ResourceReport
            MODEL_DESCRIPTION: Resource Report Schema meeting Passenger Transport Hubs AP Schema specification. A summary of resources connected to mobility services based on defined filters by the person requesting the report.
            MODEL_ADOPTERS: 
              currentAdopters:
                - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                    datamodel soon. Current version: https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
                  description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
                  mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
                  startDate: null}
                - {adopter: velopark.be, comments: 'Catalogue: https://data.velopark.be/data/catalog',
                  description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
                  mail: null, organization: Nazka, project: null, startDate: null}

            MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: ResourceReport  \n======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/ResourceReport/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Resource Report Schema meeting Passenger Transport Hubs AP Schema specification. A summary of resources connected to mobility services based on defined filters by the person requesting the report.**  \n\rversion: 0.0.3  \n\n\r## List of properties  \n\n\r- `ResourceReport.actuator`: Engine of the means of transport.  \r- `ResourceReport.location`: Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.  \r- `ResourceReport.meansOfTransport`: The type of means of transport of the Resource.  \r- `ResourceReport.number`: The number of resources.  \r- `ResourceReport.reportTime`: Point in time for which the report is valid.  \r- `ResourceReport.service`: The MobilityService used within the ResourceReport.  \r- `ResourceReport.status`: State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.  \r- `ResourceReport.type`: Nature of the Resource.  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be ResourceReport.  \r  \n\rRequired properties  \n- `ResourceReport.number`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nResourceReport:    \n  description: 'Resource Report Schema meeting Passenger Transport Hubs AP Schema specification. A summary of resources connected to mobility services based on defined filters by the person requesting the report.'    \n  properties:    \n    ResourceReport.actuator:    \n      description: 'Engine of the means of transport.'    \n      properties:    \n        ActuatorType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'combustionEngine, electric, electricWithSupport, human'\"    \n          enum:    \n            - combustionEngine    \n            - electric    \n            - electricWithSupport    \n            - human    \n          type: string    \n        type:    \n          enum:    \n            - ActuatorType    \n          type: string    \n      required:    \n        - type    \n        - ActuatorType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#actuator\"    \n        type: Property    \n    ResourceReport.location:    \n      description: 'Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#location\"    \n        type: Property    \n    ResourceReport.meansOfTransport:    \n      description: 'The type of means of transport of the Resource.'    \n      properties:    \n        MeansOfTransport.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'airplane, bicycle, boat, bus, car, escalator, lift, motorcycle, onFoot, pedelec, scooter, skateboard, step, subway, train, tram, treadmill, truck'\"    \n          enum:    \n            - airplane    \n            - bicycle    \n            - boat    \n            - bus    \n            - car    \n            - escalator    \n            - lift    \n            - motorcycle    \n            - onFoot    \n            - pedelec    \n            - scooter    \n            - skateboard    \n            - step    \n            - subway    \n            - train    \n            - tram    \n            - treadmill    \n            - truck    \n          type: string    \n        type:    \n          enum:    \n            - MeansOfTransport    \n          type: string    \n      required:    \n        - type    \n        - MeansOfTransport.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#Mobiliteitsdienst.vervoermiddel\"    \n        type: Property    \n    ResourceReport.number:    \n      description: 'The number of resources.'    \n      type: integer    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#number\"    \n        type: Property    \n    ResourceReport.reportTime:    \n      description: 'Point in time for which the report is valid.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: http://purl.org/dc/elements/1.1/date    \n        type: Property    \n    ResourceReport.service:    \n      description: 'The MobilityService used within the ResourceReport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#service\"    \n        type: Property    \n    ResourceReport.status:    \n      description: 'State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.'    \n      properties:    \n        ResourceStatus.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'available, deleted, inactive, inUse, relocated, reserved, unavailable'\"    \n          enum:    \n            - available    \n            - deleted    \n            - inactive    \n            - inUse    \n            - relocated    \n            - reserved    \n            - unavailable    \n          type: string    \n        type:    \n          enum:    \n            - ResourceStatus    \n          type: string    \n      required:    \n        - type    \n        - ResourceStatus.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#status\"    \n        type: Property    \n    ResourceReport.type:    \n      description: 'Nature of the Resource.'    \n      properties:    \n        ResourceType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'chargingStation, parkingSpace, room, seating, vehicle'\"    \n          enum:    \n            - chargingStation    \n            - parkingSpace    \n            - room    \n            - seating    \n            - vehicle    \n          type: string    \n        type:    \n          enum:    \n            - ResourceType    \n          type: string    \n      required:    \n        - type    \n        - ResourceType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: http://purl.org/dc/terms/type    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &resourcereport_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *resourcereport_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be ResourceReport.'    \n      enum:    \n        - ResourceReport    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - ResourceReport.number    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/ResourceReport/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/dataModel.OSLO/raw/master/ResourceReport/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.0.3    \n```  \n</details>    \n\r## Example payloads    \n\r#### ResourceReport NGSI-v2 key-values Example    \n\rHere is an example of a ResourceReport in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  }  \n}  \n```  \n\r#### ResourceReport NGSI-v2 normalized Example    \n\rHere is an example of a ResourceReport in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"ActuatorType\",  \n        \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"MeansOfTransport\",  \n        \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"ResourceStatus\",  \n        \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n        \"type\": \"ResourceType\",  \n        \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  }  \n}  \n```  \n\r#### ResourceReport NGSI-LD key-values Example    \n\rHere is an example of a ResourceReport in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### ResourceReport NGSI-LD normalized Example    \n\rHere is an example of a ResourceReport in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"ActuatorType\",  \n        \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"MeansOfTransport\",  \n        \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"ResourceStatus\",  \n        \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n        \"type\": \"ResourceType\",  \n        \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n\t\"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
          ResourceReportForecast:
            MODEL_NAME: ResourceReportForecast
            MODEL_DESCRIPTION: Resource Report Forecast Schema meeting Passenger Transport Hubs AP Schema specification. A summary of the expectations of the resources connected to mobility services based on defined filters by the person requesting the report.
            MODEL_ADOPTERS: 
              currentAdopters:
                - {adopter: Blue Bike LDES, comments: 'Mappings will be updated according to this
                    datamodel soon. Current version: https://www.pieter.pm/Blue-Bike-to-Linked-GBFS/root.ttl',
                  description: An Linked Data Event Stream (LDES) exposed from a Blue Bike endpoint,
                  mail: pieter.colpaert@ugent.be, organization: IDLab (university Ghent - imec), project: null,
                  startDate: null}
                - {adopter: velopark.be, comments: 'Catalogue: https://data.velopark.be/data/catalog',
                  description: Velopark uses Linked Open Data to describe bike parks in Belgium.,
                  mail: null, organization: Nazka, project: null, startDate: null}

            MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: ResourceReportForecast  \n==============================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.OSLO/blob/master/ResourceReportForecast/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Resource Report Forecast Schema meeting Passenger Transport Hubs AP Schema specification. A summary of the expectations of the resources connected to mobility services based on defined filters by the person requesting the report.**  \n\rversion: 0.0.2  \n\n\r## List of properties  \n\n\r- `ResourceReport.actuator`: Engine of the means of transport.  \r- `ResourceReport.location`: Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.  \r- `ResourceReport.meansOfTransport`: The type of means of transport of the Resource.  \r- `ResourceReport.number`: The number of resources.  \r- `ResourceReport.reportTime`: Point in time for which the report is valid.  \r- `ResourceReport.service`: The MobilityService used within the ResourceReport.  \r- `ResourceReport.status`: State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.  \r- `ResourceReport.type`: Nature of the Resource.  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be ResourceReportForecast  \r- `validFrom`: Validity period start date and time.  \r- `validTo`: Validity period end date and time.  \r- `validity`: Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.  \r  \n\rRequired properties  \n- `ResourceReport.number`  \r- `id`  \r- `type`  \r\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nResourceReportForecast:    \n  description: 'Resource Report Forecast Schema meeting Passenger Transport Hubs AP Schema specification. A summary of the expectations of the resources connected to mobility services based on defined filters by the person requesting the report.'    \n  properties:    \n    ResourceReport.actuator:    \n      description: 'Engine of the means of transport.'    \n      properties:    \n        ActuatorType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'combustionEngine, electric, electricWithSupport, human'\"    \n          enum:    \n            - combustionEngine    \n            - electric    \n            - electricWithSupport    \n            - human    \n          type: string    \n        type:    \n          enum:    \n            - ActuatorType    \n          type: string    \n      required:    \n        - type    \n        - ActuatorType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#actuator\"    \n        type: Property    \n    ResourceReport.location:    \n      description: 'Location of the Resource. This could be a bike parking station or the real-time location of the vehicle, e.g. in free-floating part transport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#location\"    \n        type: Property    \n    ResourceReport.meansOfTransport:    \n      description: 'The type of means of transport of the Resource.'    \n      properties:    \n        MeansOfTransport.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'airplane, bicycle, boat, bus, car, escalator, lift, motorcycle, onFoot, pedelec, scooter, skateboard, step, subway, train, tram, treadmill, truck'\"    \n          enum:    \n            - airplane    \n            - bicycle    \n            - boat    \n            - bus    \n            - car    \n            - escalator    \n            - lift    \n            - motorcycle    \n            - onFoot    \n            - pedelec    \n            - scooter    \n            - skateboard    \n            - step    \n            - subway    \n            - train    \n            - tram    \n            - treadmill    \n            - truck    \n          type: string    \n        type:    \n          enum:    \n            - MeansOfTransport    \n          type: string    \n      required:    \n        - type    \n        - MeansOfTransport.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#Mobiliteitsdienst.vervoermiddel\"    \n        type: Property    \n    ResourceReport.number:    \n      description: 'The number of resources.'    \n      type: integer    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#number\"    \n        type: Property    \n    ResourceReport.reportTime:    \n      description: 'Point in time for which the report is valid.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: http://purl.org/dc/elements/1.1/date    \n        type: Property    \n    ResourceReport.service:    \n      description: 'The MobilityService used within the ResourceReport.'    \n      properties:    \n        object:    \n          format: uri    \n          type: string    \n        type:    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#service\"    \n        type: Property    \n    ResourceReport.status:    \n      description: 'State of a Resource. E.g. reserved, inactive, available. Determines whether a resource can be used.'    \n      properties:    \n        ResourceStatus.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'available, deleted, inactive, inUse, relocated, reserved, unavailable'\"    \n          enum:    \n            - available    \n            - deleted    \n            - inactive    \n            - inUse    \n            - relocated    \n            - reserved    \n            - unavailable    \n          type: string    \n        type:    \n          enum:    \n            - ResourceStatus    \n          type: string    \n      required:    \n        - type    \n        - ResourceStatus.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: \"https://purl.eu/ns/mobility/passenger-transport-hubs#status\"    \n        type: Property    \n    ResourceReport.type:    \n      description: 'Nature of the Resource.'    \n      properties:    \n        ResourceType.preferredLabel:    \n          description: \"Property. Model: 'http://www.w3.org/2004/02/skos/core#prefLabel'. Preferred label. Enum:'chargingStation, parkingSpace, room, seating, vehicle'\"    \n          enum:    \n            - chargingStation    \n            - parkingSpace    \n            - room    \n            - seating    \n            - vehicle    \n          type: string    \n        type:    \n          enum:    \n            - ResourceType    \n          type: string    \n      required:    \n        - type    \n        - ResourceType.preferredLabel    \n      type: object    \n      x-ngsi:    \n        model: http://purl.org/dc/terms/type    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &resourcereportforecast_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *resourcereportforecast_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be ResourceReportForecast'    \n      enum:    \n        - ResourceReportForecast    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    validFrom:    \n      description: 'Validity period start date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validTo:    \n      description: 'Validity period end date and time.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    validity:    \n      description: 'Includes the validity period for this forecast as a ISO8601 time interval. It can be also used two separate attributes: `validFrom`, `validTo`.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - ResourceReport.number    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.OSLO/blob/master/ResourceReportForecast/LICENSE.md    \n  x-model-schema: https://github.com/smart-data-models/dataModel.OSLO/raw/master/ResourceReport/schema.json    \n  x-model-tags: GreenMov    \n  x-version: 0.0.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### ResourceReportForecast NGSI-v2 key-values Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReportForecast\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"validFrom\": \"2022-05-07T06:43:37Z\",  \n  \"validTo\": \"2022-05-07T07:43:37Z\"  \n}  \n```  \n\r#### ResourceReportForecast NGSI-v2 normalized Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReportForecast\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"ActuatorType\",  \n      \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"MeansOfTransport\",  \n      \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Number\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"URL\",  \n    \"value\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"ResourceStatus\",  \n      \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"type\": \"ResourceType\",  \n      \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  },  \n  \"validFrom\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-05-07T06:43:37Z\"  \n  },  \n  \"validTo\": {  \n    \"type\": \"Date-Time\",  \n    \"value\": \"2022-05-07T07:43:37Z\"  \n  }  \n}  \n```  \n\r#### ResourceReportForecast NGSI-LD key-values Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReportForecast\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"ActuatorType\",  \n    \"ActuatorType.preferredLabel\": \"human\"  \n  },  \n  \"ResourceReport.location\": \"https://blue-bike.be/stations/141\",  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"MeansOfTransport\",  \n    \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n  },  \n  \"ResourceReport.number\": 5,  \n  \"ResourceReport.service\": \"https://blue-bike.be/#me\",  \n  \"ResourceReport.status\": {  \n    \"type\": \"ResourceStatus\",  \n    \"ResourceStatus.preferredLabel\": \"available\"  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"ResourceType\",  \n    \"ResourceType.preferredLabel\": \"vehicle\"  \n  },  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      3.313743000000,  \n      50.855703000000  \n    ]  \n  },  \n  \"validFrom\": \"2022-05-07T06:43:37Z\",  \n  \"validTo\": \"2022-05-07T07:43:37Z\",  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### ResourceReportForecast NGSI-LD normalized Example    \n\rHere is an example of a ResourceReportForecast in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"http://example.org/resourcereport/1\",  \n  \"type\": \"ResourceReport\",  \n  \"ResourceReport.actuator\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"ActuatorType\",  \n      \"ActuatorType.preferredLabel\": \"human\"  \n    }  \n  },  \n  \"ResourceReport.location\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/stations/141\"  \n  },  \n  \"ResourceReport.meansOfTransport\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"MeansOfTransport\",  \n      \"MeansOfTransport.preferredLabel\": \"bicycle\"  \n    }  \n  },  \n  \"ResourceReport.number\": {  \n    \"type\": \"Property\",  \n    \"value\": 5  \n  },  \n  \"ResourceReport.service\": {  \n    \"type\": \"Relationship\",  \n    \"object\": \"https://blue-bike.be/#me\"  \n  },  \n  \"ResourceReport.status\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"ResourceStatus\",  \n      \"ResourceStatus.preferredLabel\": \"available\"  \n    }  \n  },  \n  \"ResourceReport.type\": {  \n    \"type\": \"Relationship\",  \n    \"object\": {  \n      \"type\": \"ResourceType\",  \n      \"ResourceType.preferredLabel\": \"vehicle\"  \n    }  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        3.313743000000,  \n        50.855703000000  \n      ]  \n    }  \n  },  \n  \"validFrom\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-05-07T06:43:37Z\"  \n    }  \n  },  \n  \"validTo\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"@type\": \"Date-Time\",  \n      \"@value\": \"2022-05-07T07:43:37Z\"  \n    }  \n  },  \n  \"@context\": [  \n    \"https://brechtvdv.github.io/incubated/dataModel.OSLO.PassengerTransportHubs/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
      Parking:
        SUBMODULE_SHORT_NAME: Parking
        MODELS:
          OffStreetParking:
            MODEL_NAME: OffStreetParking
            MODEL_DESCRIPTION: Off street parking
            MODEL_ADOPTERS: 
              currentAdopters:
                - {adopter: IUDX, comments: null, description: A parking facility Data Model., mail: null,
                  organization: IUDX, project: null, startDate: null}

            MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: OffStreetParking  \n========================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Parking/blob/master/OffStreetParking/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **Off street parking**  \n\rversion: 0.1.2  \n\n\r## List of properties  \n\n\r- `acceptedPaymentMethod`: Enum:'ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'. Accepted payment method(s).  \r- `accessModified`: Timestamp when `vehicleEntranceCount` and `vehicleExitCount` was updated. Allowed values: ISO8601  \r- `address`: The mailing address  \r- `aggregateRating`: Aggregated rating for this parking site.  \r- `allowedVehicleType`:  Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. Free spot numbers of other allowed vehicle types might be reported under the attribute `extraSpotNumber` and through specific entities of type _ParkingGroup_. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html). Enum:'agriculturalVehicle, anyVehicle, bicycle, bus, car, caravan, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, trailer, van'  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `availableSpotNumber`: The number of spots available (_including_ all  vehicle types or reserved spaces, such as those for disabled people, long term parkers and so on). This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines. Allowed values: A positive integer number, including 0. It must lower or equal than `totalSpotNumber`.  \r- `averageSpotLength`: The average length of parking spots.  \r- `averageSpotWidth`: The average width of parking spots.  \r- `category`: Parking site's category(ies). The purpose of this field is to allow to tag, generally speaking, off street parking entities  \r- `chargeType`: Type(s) of charge performed by the parking site. Allowed values: Some of those defined by the DATEX II version 2.3 _ ChargeTypeEnum_ enumeration. Enum:'additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, other, seasonTicket, temporaryPrice'. Or any other application-specific  \r- `contactPoint`: Parking site contact point.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `extCategory`: External category to complement category.  \r- `extraSpotNumber`: The number of extra spots _available_, i.e. free. This value must aggregate free spots from all groups mentioned below: A/ Those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). B/ Those reserved for other vehicle types different than the principal allowed vehicle type. C/ Any other group of parking spots not subject to the general condition rules conveyed by this entity.  \r- `facilities`: Allowed values: The following defined by the _EquipmentTypeEnum_ enumeration of DATEX II version 2.3. Enum:'bikeParking, cashMachine, copyMachineOrService, defibrillator, dumpingStation, electricChargingStation, elevator, faxMachineOrService, fireHose, fireExtinguisher, fireHydrant, firstAidEquipment, freshWater, iceFreeScaffold, informationPoint, internetWireless, luggageLocker, payDesk, paymentMachine, playground, publicPhone, refuseBin, safeDeposit, shower, toilet, tollTerminal, vendingMachine, wasteDisposal' . Any other application-specific  \r- `firstAvailableFloor`: Number of the floor closest to the ground which currently has available parking spots. Allowed values: Stories are numbered between -n and n, being 0 ground floor.  \r- `fourWheelerSlots`: Four wheeler parking spot availability status in parking site corresponding to this observation.  \r- `highestFloor`: For parking sites with multiple floor levels, highest floor. An integer number. 0 is ground level. Upper floors are positive numbers. Lower floors are negative ones.  \r- `id`: Unique identifier of the entity  \r- `images`: A URL containing a photo of this parking site  \r- `layout`: Parking layout. Gives more details to the `category` attribute. Allowed values: As per the _ParkingLayoutEnum_ of DATEX II version 2.3. Enum:'automatedParkingGarage, carports, covered, field, garageBoxes, multiLevel, multiStorey, nested, openSpace, rooftop, sheds, singleLevel, surface, other'. See also [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Tag:amenity%3Dparking). Or any other value useful for the application and not covered above.  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `lowestFloor`: For parking sites with multiple floor levels, lowest floor. Allowed values: An integer number.  \r- `maximumAllowedHeight`: Maximum allowed height for vehicles. If there are multiple zones, it will be the minimum height of all the zones.  \r- `maximumAllowedWidth`: Maximum allowed width for vehicles. If there are multiple zones, it will be the minimum width of all the zones.  \r- `maximumParkingDuration`: Maximum allowed stay at site, on a general basis, encoded as a ISO8601 duration or with any other string relevant for parking.  An empty value or when non present indicates an indefinite duration  \r- `measuresPeriod`: The measures period related to availableSpotNumber and priceRatePerMinute.  \r- `measuresPeriodUnit`: The measures period unit related to availableSpotNumber and PriceRatePerMinute.  \r- `municipalityInfo`: Municipality information corresponding to this observation.  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `occupancy`: Relative value of occupied spots out of the total spots.  \r- `occupancyDetectionType`: Occupancy detection method(s).  Allowed values: The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_. Enum:'balancing, manual, modelBased, none, singleSpaceDetection'. Or any other application-specific  \r- `occupancyModified`: Relative value of occupied spots out of the total spots. Allowed values: 0 - 1  \r- `occupiedSpotNumber`: Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber  \r- `openingHours`: Opening hours of the parking site.  \r- `outOfServiceSlotNumber`: The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `parkingMode`: Parking mode(s). Allowed values: Those defined by the DATEX II version 2.3 _ParkingModeEnum_ enumeration. Enum:'echelonParking, parallelParking, perpendicularParking'  \r- `parkingSiteId`: The unique ID of the parking site or parking lot corresponding to this observation.  \r- `priceCurrency`: Price currency of price rate per minute  \r- `priceRatePerMinute`: Price rate per minute.  \r- `provider`: Parking site service provider  \r- `refParkingAccess`: Parking site's access point(s).  \r- `refParkingGroup`: Parking site identified group(s). A group can correspond to a zone, a complete storey, a group of spots, etc.  \r- `refParkingSpot`: Individual parking spots belonging to this offStreet parking site.  \r- `requiredPermit`: This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a ','. For instance 'residentPermit,disabledPermit' stays that both, at the same time, a resident and a disabled permit are needed to park. If the list is empty no permit is needed. Allowed values: The following, defined by the _PermitTypeEnum_ enumeration of DATEX II version 2.3. Enum:'employeePermit, fairPermit, governmentPermit, noPermitNeeded, residentPermit, specificIdentifiedVehiclePermit, studentPermit, visitorPermit'. Or any other application-specific  \r- `reservationType`: he following specified by _ReservationTypeEnum_ of DATEX II version 2.3. Enum:'mandatory, notAvailable, optional, partly'  \r- `security`: Security aspects provided by this parking site. Allowed values: The following, some of them, defined by _ParkingSecurityEnum_ of DATEX II version 2.3. Enum:'areaSeparatedFromSurroundings, cctv, dog, externalSecurity, fences, floodLight, guard24hours, lighting, patrolled, securityStaff' . or any other application-specific  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `specialLocation`: If the parking site is at a special location (airport, department store, etc.) it conveys what is such special location.  Allowed values: Those defined by _ParkingSpecialLocationEnum_ of [DATEX II version 2.3](http://www.datex2.eu/content/parking-publications-extension-v10a). Enum:'airportTerminal, cableCarStation, campground, cinema, coachStation, conventionCentre, exhibitionCentre, ferryTerminal, hotel, market, publicTransportStation, religiousCentre, shoppingCentre, skilift, specificFacility, themePark, trainStation, vehicleOnRailTerminal, other'  \r- `status`: Status of the parking site. Allowed values: The following defined by the following enumerations defined by DATEX II version 2.3. Enum:'almostFull, closed, closedAbnormal, full, fullAtEntrance, open, openingTimesInForce, spacesAvailable'. Or any other application-specific  \r- `totalSpotNumber`: The total number of spots offered by this parking site.  This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Allowed values: Any positive integer number or 0. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.  \r- `twoWheelerSlots`: Two wheeler parking spot availability status in parking site corresponding to this observation.  \r- `type`: It has to be OffStreetParking  \r- `unclassifiedSlots`: Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.  \r- `usageScenario`: Usage scenario(s). Gives more details to the `category` attribute. Allowed values: Those defined by the enumeration _ParkingUsageScenarioEnum_ of DATEX II version 2.3. Enum:'automaticParkingGuidance, carSharing, dropOffWithValet, dropOffMechanical, dropOff, eventParking, kissAndRide, liftShare, loadingBay, overnightParking, parkAndCycle, parkAndRide, parkAndWalk, restArea, serviceArea, staffGuidesToSpace, truckParking, vehicleLift, other'. Or any other value useful for the application and not covered above.  \r- `vehicleEntranceCount`: Aggregated number of vehicle that enter the parking site in a period of time.  \r- `vehicleExitCount`: Aggregated number of vehicle that leave the parking site in a period of time.  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `type`  \r  \n\rA site, off street, intended to park vehicles, managed independently and with suitable and clearly marked access points (entrances and exits). If necessary, and for management purposes or to deal with multi-location parking sites, it can be divided into different zones modelled by the entity type [ParkingGroup](../ParkingGroup/README.md) . In DATEX 2 version 2.3 terminology it corresponds to a _UrbanParkingSite_ of type _offStreetParking_. A data dictionary for DATEX II terms can be found at [http://datexbrowser.tamtamresearch.com/](http://datexbrowser.tamtamresearch.com/).  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOffStreetParking:    \n  description: 'Off street parking'    \n  properties:    \n    acceptedPaymentMethod:    \n      description: 'Enum:''ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm''. Accepted payment method(s).'    \n      items:    \n        enum:    \n          - ByBankTransferInAdvance    \n          - ByInvoice    \n          - Cash    \n          - CheckInAdvance    \n          - COD    \n          - DirectDebit    \n          - GoogleCheckout    \n          - PayPal    \n          - PaySwarm    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/acceptedPaymentMethod    \n        type: Property    \n    accessModified:    \n      description: 'Timestamp when `vehicleEntranceCount` and `vehicleExitCount` was updated. Allowed values: ISO8601'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    aggregateRating:    \n      description: 'Aggregated rating for this parking site.'    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/aggregateRating    \n        type: Property    \n    allowedVehicleType:    \n      description: ' Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. Free spot numbers of other allowed vehicle types might be reported under the attribute `extraSpotNumber` and through specific entities of type _ParkingGroup_. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html). Enum:''agriculturalVehicle, anyVehicle, bicycle, bus, car, caravan, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, trailer, van'''    \n      items:    \n        enum:    \n          - agriculturalVehicle    \n          - anyVehicle    \n          - bicycle    \n          - bus    \n          - car    \n          - caravan    \n          - carWithCaravan    \n          - carWithTrailer    \n          - constructionOrMaintenanceVehicle    \n          - lorry    \n          - moped    \n          - motorcycle    \n          - motorcycleWithSideCar    \n          - motorscooter    \n          - tanker    \n          - trailer    \n          - van    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    availableSpotNumber:    \n      description: 'The number of spots available (_including_ all  vehicle types or reserved spaces, such as those for disabled people, long term parkers and so on). This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines. Allowed values: A positive integer number, including 0. It must lower or equal than `totalSpotNumber`.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    averageSpotLength:    \n      description: 'The average length of parking spots.'    \n      exclusiveMinimum: true    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/length    \n        type: Property    \n        units: meters    \n    averageSpotWidth:    \n      description: 'The average width of parking spots.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/width    \n        type: Property    \n        units: meters    \n    category:    \n      description: 'Parking site''s category(ies). The purpose of this field is to allow to tag, generally speaking, off street parking entities'    \n      items:    \n        enum:    \n          - barrierAccess    \n          - feeCharged    \n          - forCustomers    \n          - forDisabled    \n          - forElectricalCharging    \n          - forEmployees    \n          - forMembers    \n          - forResidents    \n          - forStudents    \n          - forVisitors    \n          - free    \n          - freeAccess    \n          - gateAccess    \n          - guarded    \n          - ground    \n          - longTerm    \n          - mediumTerm    \n          - onlyResidents    \n          - onlyWithPermit    \n          - parkingGarage    \n          - parkingLot    \n          - private    \n          - public    \n          - publicPrivate    \n          - shortTerm    \n          - staffed    \n          - underground    \n          - urbanDeterrentParking    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    chargeType:    \n      description: 'Type(s) of charge performed by the parking site. Allowed values: Some of those defined by the DATEX II version 2.3 _ ChargeTypeEnum_ enumeration. Enum:''additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, other, seasonTicket, temporaryPrice''. Or any other application-specific'    \n      items:    \n        enum:    \n          - additionalIntervalPrice    \n          - annualPayment    \n          - firstIntervalPrice    \n          - flat    \n          - free    \n          - minimum    \n          - maximum    \n          - monthlyPayment    \n          - other    \n          - seasonTicket    \n          - temporaryPrice    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    contactPoint:    \n      description: 'Parking site contact point.'    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/contactPoint    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    extCategory:    \n      description: 'External category to complement category.'    \n      items:    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    extraSpotNumber:    \n      description: 'The number of extra spots _available_, i.e. free. This value must aggregate free spots from all groups mentioned below: A/ Those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). B/ Those reserved for other vehicle types different than the principal allowed vehicle type. C/ Any other group of parking spots not subject to the general condition rules conveyed by this entity.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    facilities:    \n      description: 'Allowed values: The following defined by the _EquipmentTypeEnum_ enumeration of DATEX II version 2.3. Enum:''bikeParking, cashMachine, copyMachineOrService, defibrillator, dumpingStation, electricChargingStation, elevator, faxMachineOrService, fireHose, fireExtinguisher, fireHydrant, firstAidEquipment, freshWater, iceFreeScaffold, informationPoint, internetWireless, luggageLocker, payDesk, paymentMachine, playground, publicPhone, refuseBin, safeDeposit, shower, toilet, tollTerminal, vendingMachine, wasteDisposal'' . Any other application-specific'    \n      items:    \n        enum:    \n          - bikeParking    \n          - cashMachine    \n          - copyMachineOrService    \n          - defibrillator    \n          - dumpingStation    \n          - electricChargingStation    \n          - elevator    \n          - faxMachineOrService    \n          - fireHose    \n          - fireExtinguisher    \n          - fireHydrant    \n          - firstAidEquipment    \n          - freshWater    \n          - iceFreeScaffold    \n          - informationPoint    \n          - internetWireless    \n          - luggageLocker    \n          - payDesk    \n          - paymentMachine    \n          - playground    \n          - publicPhone    \n          - refuseBin    \n          - safeDeposit    \n          - shower    \n          - toilet    \n          - tollTerminal    \n          - vendingMachine    \n          - wasteDisposal    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: \"\"    \n        type: Property    \n    firstAvailableFloor:    \n      description: 'Number of the floor closest to the ground which currently has available parking spots. Allowed values: Stories are numbered between -n and n, being 0 ground floor.'    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    fourWheelerSlots:    \n      description: 'Four wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    highestFloor:    \n      description: 'For parking sites with multiple floor levels, highest floor. An integer number. 0 is ground level. Upper floors are positive numbers. Lower floors are negative ones.'    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    id:    \n      anyOf: &offstreetparking_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    images:    \n      description: 'A URL containing a photo of this parking site'    \n      items:    \n        format: uri    \n        type: string    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/image    \n        type: Property    \n    layout:    \n      description: 'Parking layout. Gives more details to the `category` attribute. Allowed values: As per the _ParkingLayoutEnum_ of DATEX II version 2.3. Enum:''automatedParkingGarage, carports, covered, field, garageBoxes, multiLevel, multiStorey, nested, openSpace, rooftop, sheds, singleLevel, surface, other''. See also [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Tag:amenity%3Dparking). Or any other value useful for the application and not covered above.'    \n      items:    \n        enum:    \n          - automatedParkingGarage    \n          - carports    \n          - covered    \n          - field    \n          - garageBoxes    \n          - multiLevel    \n          - multiStorey    \n          - nested    \n          - openSpace    \n          - rooftop    \n          - sheds    \n          - singleLevel    \n          - surface    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    lowestFloor:    \n      description: 'For parking sites with multiple floor levels, lowest floor. Allowed values: An integer number.'    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    maximumAllowedHeight:    \n      description: 'Maximum allowed height for vehicles. If there are multiple zones, it will be the minimum height of all the zones.'    \n      exclusiveMinimum: true    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/heigth    \n        type: Property    \n        units: meters    \n    maximumAllowedWidth:    \n      description: 'Maximum allowed width for vehicles. If there are multiple zones, it will be the minimum width of all the zones.'    \n      exclusiveMinimum: true    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/width    \n        type: Property    \n        units: Meters    \n    maximumParkingDuration:    \n      description: 'Maximum allowed stay at site, on a general basis, encoded as a ISO8601 duration or with any other string relevant for parking.  An empty value or when non present indicates an indefinite duration'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    measuresPeriod:    \n      description: 'The measures period related to availableSpotNumber and priceRatePerMinute.'    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    measuresPeriodUnit:    \n      description: 'The measures period unit related to availableSpotNumber and PriceRatePerMinute.'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/unitText    \n        type: Property    \n    municipalityInfo:    \n      description: 'Municipality information corresponding to this observation.'    \n      properties:    \n        cityId:    \n          description: 'Property. Model:''https://schema.org/Text''. City ID corresponding to this observation.'    \n          type: string    \n        cityName:    \n          description: 'Property. Model:''https://schema.org/Text''. City name corresponding to this observation'    \n          type: string    \n        district:    \n          description: 'Property. Model:''https://schema.org/Text''. District name corresponding to this observation.'    \n          type: string    \n        stateName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the state corresponding to this observation.'    \n          type: string    \n        ulbName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the Urban Local Body corresponding to this observation.'    \n          type: string    \n        wardId:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward ID corresponding to this observation.'    \n          type: string    \n        wardName:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward name corresponding to this observation.'    \n          type: string    \n        wardNum:    \n          description: 'Property. Model:''https://schema.org/Number''. Ward number corresponding to this observation.'    \n          type: number    \n        zoneId:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone ID corresponding to this observation.'    \n          type: string    \n        zoneName:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone name corresponding to this observation.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    occupancy:    \n      description: 'Relative value of occupied spots out of the total spots.'    \n      maximum: 1    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    occupancyDetectionType:    \n      description: 'Occupancy detection method(s).  Allowed values: The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_. Enum:''balancing, manual, modelBased, none, singleSpaceDetection''. Or any other application-specific'    \n      items:    \n        enum:    \n          - balancing    \n          - manual    \n          - modelBased    \n          - none    \n          - singleSpaceDetection    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    occupancyModified:    \n      description: 'Relative value of occupied spots out of the total spots. Allowed values: 0 - 1'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    occupiedSpotNumber:    \n      description: 'Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    openingHours:    \n      description: 'Opening hours of the parking site.'    \n      type: string    \n      x-ngsi:    \n        model: http://schema.org/openingHours    \n        type: Property    \n    outOfServiceSlotNumber:    \n      description: 'The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *offstreetparking_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    parkingMode:    \n      description: 'Parking mode(s). Allowed values: Those defined by the DATEX II version 2.3 _ParkingModeEnum_ enumeration. Enum:''echelonParking, parallelParking, perpendicularParking'''    \n      items:    \n        enum:    \n          - echelonParking    \n          - parallelParking    \n          - perpendicularParking    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    parkingSiteId:    \n      description: 'The unique ID of the parking site or parking lot corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    priceCurrency:    \n      description: 'Price currency of price rate per minute'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/priceCurrency    \n        type: Property    \n    priceRatePerMinute:    \n      description: 'Price rate per minute.'    \n      type: number    \n      x-ngsi:    \n        model: ' https://schema.org/Number'    \n        type: Property    \n    provider:    \n      description: 'Parking site service provider'    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/provider    \n        type: Property    \n    refParkingAccess:    \n      anyOf:    \n        - maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - format: uri    \n          type: string    \n      description: 'Parking site''s access point(s).'    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    refParkingGroup:    \n      anyOf:    \n        - maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - format: uri    \n          type: string    \n      description: 'Parking site identified group(s). A group can correspond to a zone, a complete storey, a group of spots, etc.'    \n      x-ngsi:    \n        model: http://schema.org/URL    \n        type: Relationship    \n    refParkingSpot:    \n      anyOf:    \n        - maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - format: uri    \n          type: string    \n      description: 'Individual parking spots belonging to this offStreet parking site.'    \n      x-ngsi:    \n        type: Relationship    \n    requiredPermit:    \n      description: 'This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a '',''. For instance ''residentPermit,disabledPermit'' stays that both, at the same time, a resident and a disabled permit are needed to park. If the list is empty no permit is needed. Allowed values: The following, defined by the _PermitTypeEnum_ enumeration of DATEX II version 2.3. Enum:''employeePermit, fairPermit, governmentPermit, noPermitNeeded, residentPermit, specificIdentifiedVehiclePermit, studentPermit, visitorPermit''. Or any other application-specific'    \n      items:    \n        enum:    \n          - employeePermit    \n          - fairPermit    \n          - governmentPermit    \n          - noPermitNeeded    \n          - residentPermit    \n          - specificIdentifiedVehiclePermit    \n          - studentPermit    \n          - visitorPermit    \n        type: string    \n      minItems: 0    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        type: Property    \n    reservationType:    \n      description: 'he following specified by _ReservationTypeEnum_ of DATEX II version 2.3. Enum:''mandatory, notAvailable, optional, partly'''    \n      items:    \n        enum:    \n          - mandatory    \n          - notAvailable    \n          - optional    \n          - partly    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    security:    \n      description: 'Security aspects provided by this parking site. Allowed values: The following, some of them, defined by _ParkingSecurityEnum_ of DATEX II version 2.3. Enum:''areaSeparatedFromSurroundings, cctv, dog, externalSecurity, fences, floodLight, guard24hours, lighting, patrolled, securityStaff'' . or any other application-specific'    \n      items:    \n        enum:    \n          - areaSeparatedFromSurroundings    \n          - cctv    \n          - dog    \n          - externalSecurity    \n          - fences    \n          - floodLight    \n          - guard24hours    \n          - lighting    \n          - patrolled    \n          - securityStaff    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    specialLocation:    \n      description: 'If the parking site is at a special location (airport, department store, etc.) it conveys what is such special location.  Allowed values: Those defined by _ParkingSpecialLocationEnum_ of [DATEX II version 2.3](http://www.datex2.eu/content/parking-publications-extension-v10a). Enum:''airportTerminal, cableCarStation, campground, cinema, coachStation, conventionCentre, exhibitionCentre, ferryTerminal, hotel, market, publicTransportStation, religiousCentre, shoppingCentre, skilift, specificFacility, themePark, trainStation, vehicleOnRailTerminal, other'''    \n      items:    \n        enum:    \n          - airportTerminal    \n          - cableCarStation    \n          - campground    \n          - cinema    \n          - coachStation    \n          - conventionCentre    \n          - exhibitionCentre    \n          - ferryTerminal    \n          - hotel    \n          - market    \n          - publicTransportStation    \n          - religiousCentre    \n          - shoppingCentre    \n          - skilift    \n          - specificFacility    \n          - themePark    \n          - trainStation    \n          - vehicleOnRailTerminal    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    status:    \n      description: 'Status of the parking site. Allowed values: The following defined by the following enumerations defined by DATEX II version 2.3. Enum:''almostFull, closed, closedAbnormal, full, fullAtEntrance, open, openingTimesInForce, spacesAvailable''. Or any other application-specific'    \n      items:    \n        enum:    \n          - almostFull    \n          - closed    \n          - closedAbnormal    \n          - full    \n          - fullAtEntrance    \n          - open    \n          - openingTimesInForce    \n          - spacesAvailable    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    totalSpotNumber:    \n      description: 'The total number of spots offered by this parking site.  This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Allowed values: Any positive integer number or 0. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.'    \n      minimum: 1    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    twoWheelerSlots:    \n      description: 'Two wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'It has to be OffStreetParking'    \n      enum:    \n        - OffStreetParking    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    unclassifiedSlots:    \n      description: 'Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    usageScenario:    \n      description: 'Usage scenario(s). Gives more details to the `category` attribute. Allowed values: Those defined by the enumeration _ParkingUsageScenarioEnum_ of DATEX II version 2.3. Enum:''automaticParkingGuidance, carSharing, dropOffWithValet, dropOffMechanical, dropOff, eventParking, kissAndRide, liftShare, loadingBay, overnightParking, parkAndCycle, parkAndRide, parkAndWalk, restArea, serviceArea, staffGuidesToSpace, truckParking, vehicleLift, other''. Or any other value useful for the application and not covered above.'    \n      items:    \n        enum:    \n          - automaticParkingGuidance    \n          - carSharing    \n          - dropOffWithValet    \n          - dropOffMechanical    \n          - dropOff    \n          - eventParking    \n          - kissAndRide    \n          - liftShare    \n          - loadingBay    \n          - overnightParking    \n          - parkAndCycle    \n          - parkAndRide    \n          - parkAndWalk    \n          - restArea    \n          - serviceArea    \n          - staffGuidesToSpace    \n          - truckParking    \n          - vehicleLift    \n          - other    \n        type: string    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: http://schema.org/Text    \n        type: Property    \n    vehicleEntranceCount:    \n      description: 'Aggregated number of vehicle that enter the parking site in a period of time.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    vehicleExitCount:    \n      description: 'Aggregated number of vehicle that leave the parking site in a period of time.'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Parking/blob/master/OffStreetParking/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Parking/OffStreetParking/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.1.2    \n```  \n</details>    \n\r## Example payloads    \n\r#### OffStreetParking NGSI-v2 key-values Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"porto-ParkingLot-23889\",  \n  \"type\": \"OffStreetParking\",  \n  \"name\": \"Parque de estacionamento Trindade\",  \n  \"category\": [  \n    \"underground\",  \n    \"public\",  \n    \"feeCharged\",  \n    \"mediumTerm\",  \n    \"barrierAccess\"  \n  ],  \n  \"extCategory\": [  \n    \"A\"  \n  ],  \n  \"chargeType\": [  \n    \"temporaryPrice\"  \n  ],  \n  \"requiredPermit\": [],  \n  \"layout\": [  \n    \"multiLevel\"  \n  ],  \n  \"maximumParkingDuration\": \"PT8H\",  \n  \"location\": {  \n    \"coordinates\": [  \n      -8.60961198807,  \n      41.150691773  \n    ],  \n    \"type\": \"Point\"  \n  },  \n  \"allowedVehicleType\": [  \n    \"car\"  \n  ],  \n  \"totalSpotNumber\": 414,  \n  \"availableSpotNumber\": 132,  \n  \"occupiedSpotNumber\": 282,  \n  \"occupancyModified\": \"2018-09-21T12:00:00Z\",  \n  \"occupancy\": 0.68,  \n  \"address\": {  \n    \"streetAddress\": \"Rua de Fernandes Tom\u00e1s\",  \n    \"addressLocality\": \"Porto\",  \n    \"addressCountry\": \"Portugal\"  \n  },  \n  \"description\": \"Municipal car park located near the Trindade metro station and the Town Hall\",  \n  \"dateModified\": \"2018-09-21T12:00:05Z\",  \n  \"vehicleEntranceCount\": 28,  \n  \"vehicleExitCount\": 12,  \n  \"accessModified\": \"2018-09-21T12:00:00Z\",  \n  \"outOfServiceSlotNumber\": 0,  \n  \"parkingSiteId\": \"P2\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"fourWheelerSlots\": {  \n    \"availableSpotNumber\": 25,  \n    \"totalSpotNumber\": 25,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"unclassifiedSlots\": {  \n    \"availableSpotNumber\": 0,  \n    \"totalSpotNumber\": 0,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"twoWheelerSlots\": {  \n    \"availableSpotNumber\": 20,  \n    \"totalSpotNumber\": 20,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  }  \n}  \n```  \n\r#### OffStreetParking NGSI-v2 normalized Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"porto-ParkingLot-23889\",  \n  \"type\": \"OffStreetParking\",  \n  \"category\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"underground\",  \n      \"public\",  \n      \"feeCharged\",  \n      \"mediumTerm\",  \n      \"barrierAccess\"  \n    ]  \n  },  \n  \"extCategory\": {  \n    \"type\": \"Text\",  \n    \"value\": \"A\"  \n  },  \n  \"layout\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"multiLevel\"  \n    ]  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Parque de estacionamento Trindade\"  \n  },  \n  \"requiredPermit\": {  \n    \"type\": \"array\",  \n    \"value\": []  \n  },  \n  \"allowedVehicleType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 132,  \n    \"metadata\": {  \n      \"timestamp\": {  \n        \"type\": \"DateTime\",  \n        \"value\": \"2018-09-21T12:00:00Z\"  \n      }  \n    }  \n  },  \n  \"totalSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 414  \n  },  \n  \"occupiedSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 282  \n  },  \n  \"occupancyModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-09-21T12:00:00Z\"  \n  },  \n  \"occupancy\": {  \n    \"type\": \"Number\",  \n    \"value\": 0.68  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -8.60961198807,  \n        41.150691773  \n      ]  \n    }  \n  },  \n  \"chargeType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"temporaryPrice\"  \n    ]  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressLocality\": \"Porto\",  \n      \"addressCountry\": \"Portugal\",  \n      \"streetAddress\": \"Rua de Fernandes Tom\\u00e1s\"  \n    }  \n  },  \n  \"maximumParkingDuration\": {  \n    \"type\": \"Text\",  \n    \"value\": \"PT8H\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-09-21T12:00:05Z\"  \n  },  \n  \"description\": {  \n    \"value\": \"Municipal car park located near the Trindade metro station and the Town Hall\"  \n  },  \n  \"vehicleEntranceCount\": {  \n    \"type\": \"Number\",  \n    \"value\": 28  \n  },  \n  \"vehicleExitCount\": {  \n    \"type\": \"Number\",  \n    \"value\": 12  \n  },  \n  \"accessModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2018-09-21T12:00:00Z\"  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"fourWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 25,  \n      \"totalSpotNumber\": 25,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"unclassifiedSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 0,  \n      \"totalSpotNumber\": 0,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"twoWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 20,  \n      \"totalSpotNumber\": 20,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityId\": \"23\",  \n      \"wardId\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneName\": \"South\",  \n      \"wardName\": \"Bangalore Urban\",  \n      \"zoneId\": \"2\",  \n      \"wardNum\": 4  \n    }  \n  }  \n}  \n```  \n\r#### OffStreetParking NGSI-LD key-values Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:OffStreetParking:porto-ParkingLot-23889\",  \n    \"type\": \"OffStreetParking\",  \n    \"accessModified\": \"2018-09-21T12:00:00Z\",  \n    \"address\": {  \n        \"addressCountry\": \"Portugal\",  \n        \"addressLocality\": \"Porto\",  \n        \"streetAddress\": \"Rua de Fernandes Tom\\u00e1s\",  \n        \"type\": \"PostalAddress\"  \n    },  \n    \"allowedVehicleType\": [  \n        \"car\"  \n    ],  \n    \"availableSpotNumber\": 132,  \n    \"category\": [  \n        \"underground\",  \n        \"public\",  \n        \"feeCharged\",  \n        \"mediumTerm\",  \n        \"barrierAccess\"  \n    ],  \n    \"chargeType\": [  \n        \"temporaryPrice\"  \n    ],  \n    \"description\": \"Municipal car park located near the Trindade metro station and the Town Hall\",  \n    \"fourWheelerSlots\": {  \n        \"availableSpotNumber\": 25,  \n        \"totalSpotNumber\": 25,  \n        \"occupiedSpotNumber\": 0  \n    },  \n    \"layout\": [  \n        \"multiLevel\"  \n    ],  \n    \"location\": {  \n        \"coordinates\": [  \n            -8.60961198807,  \n            41.150691773  \n        ],  \n        \"type\": \"Point\"  \n    },  \n    \"maximumParkingDuration\": \"PT8H\",  \n    \"modifiedAt\": \"2018-09-21T12:00:05Z\",  \n    \"municipalityInfo\": {  \n        \"district\": \"Bangalore Urban\",  \n        \"ulbName\": \"BMC\",  \n        \"cityId\": \"23\",  \n        \"wardId\": \"23\",  \n        \"stateName\": \"Karnataka\",  \n        \"cityName\": \"Bangalore\",  \n        \"zoneName\": \"South\",  \n        \"wardName\": \"Bangalore Urban\",  \n        \"zoneId\": \"2\",  \n        \"wardNum\": 4  \n    },  \n    \"name\": \"Parque de estacionamento Trindade\",  \n    \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n    \"occupancy\": 0.68,  \n    \"occupancyModified\": \"2018-09-21T12:00:00Z\",  \n    \"occupiedSpotNumber\": 282,  \n    \"outOfServiceSlotNumber\": 0,  \n    \"parkingSiteId\": \"P2\",  \n    \"requiredPermit\": [],  \n    \"totalSpotNumber\": 414,  \n    \"twoWheelerSlots\": {  \n        \"availableSpotNumber\": 20,  \n        \"totalSpotNumber\": 20,  \n        \"occupiedSpotNumber\": 0  \n    },  \n    \"unclassifiedSlots\": {  \n        \"availableSpotNumber\": 0,  \n        \"totalSpotNumber\": 0,  \n        \"occupiedSpotNumber\": 0  \n    },  \n    \"vehicleEntranceCount\": 28,  \n    \"vehicleExitCount\": 12,  \n    \"@context\": [  \n        \"iudx:SmartParking\",  \n        \"https://raw.githubusercontent.com/smart-data-models/dataModel.Parking/master/context.jsonld\"  \n    ]  \n}  \n```  \n\r#### OffStreetParking NGSI-LD normalized Example    \n\rHere is an example of a OffStreetParking in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n    \"id\": \"urn:ngsi-ld:OffStreetParking:porto-ParkingLot-23889\",  \n    \"type\": \"OffStreetParking\",  \n    \"accessModified\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2018-09-21T12:00:00Z\"  \n        }  \n    },  \n    \"address\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"addressLocality\": \"Porto\",  \n            \"addressCountry\": \"Portugal\",  \n            \"streetAddress\": \"Rua de Fernandes Tomas\",  \n            \"type\": \"PostalAddress\"  \n        }  \n    },  \n    \"allowedVehicleType\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"car\"  \n        ]  \n    },  \n    \"availableSpotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 132,  \n        \"observedAt\": \"2018-09-21T12:00:00Z\"  \n    },  \n    \"category\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"underground\",  \n            \"public\",  \n            \"feeCharged\",  \n            \"mediumTerm\",  \n            \"barrierAccess\"  \n        ]  \n    },  \n    \"chargeType\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"temporaryPrice\"  \n        ]  \n    },  \n    \"description\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Municipal car park located near the Trindade metro station and the Town Hall\"  \n    },  \n    \"extCategory\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"A\"  \n        ]  \n    },  \n    \"fourWheelerSlots\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"availableSpotNumber\": 25,  \n            \"totalSpotNumber\": 25,  \n            \"occupiedSpotNumber\": 0  \n        }  \n    },  \n    \"layout\": {  \n        \"type\": \"Property\",  \n        \"value\": [  \n            \"multiLevel\"  \n        ]  \n    },  \n    \"location\": {  \n        \"type\": \"Geoproperty\",  \n        \"value\": {  \n            \"type\": \"Point\",  \n            \"coordinates\": [  \n                -8.60961198807,  \n                41.150691773  \n            ]  \n        }  \n    },  \n    \"maximumParkingDuration\": {  \n        \"type\": \"Property\",  \n        \"value\": \"PT8H\"  \n    },  \n    \"modifiedAt\": \"2018-09-21T12:00:05Z\",  \n    \"municipalityInfo\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"district\": \"Bangalore Urban\",  \n            \"ulbName\": \"BMC\",  \n            \"cityId\": \"23\",  \n            \"wardId\": \"23\",  \n            \"stateName\": \"Karnataka\",  \n            \"cityName\": \"Bangalore\",  \n            \"zoneName\": \"South\",  \n            \"wardName\": \"Bangalore Urban\",  \n            \"zoneId\": \"2\",  \n            \"wardNum\": 4  \n        }  \n    },  \n    \"name\": {  \n        \"type\": \"Property\",  \n        \"value\": \"Parque de estacionamento Trindade\"  \n    },  \n    \"observationDateTime\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"@type\": \"DateTime\",  \n            \"@value\": \"2021-03-11T15:51:02+05:30\"  \n        }  \n    },  \n    \"occupancy\": {  \n        \"type\": \"Property\",  \n        \"value\": 0.68  \n    },  \n    \"occupancyModified\": {  \n        \"type\": \"Property\",  \n        \"value\": \"2018-09-21T12:00:00Z\"  \n    },  \n    \"occupiedSpotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 282  \n    },  \n    \"parkingSiteID\": {  \n        \"type\": \"Property\",  \n        \"value\": \"P2\"  \n    },  \n    \"requiredPermit\": {  \n        \"type\": \"Property\",  \n        \"value\": []  \n    },  \n    \"totalSpotNumber\": {  \n        \"type\": \"Property\",  \n        \"value\": 414  \n    },  \n    \"twoWheelerSlots\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"availableSpotNumber\": 20,  \n            \"totalSpotNumber\": 20,  \n            \"occupiedSpotNumber\": 0  \n        }  \n    },  \n    \"unclassifiedSlots\": {  \n        \"type\": \"Property\",  \n        \"value\": {  \n            \"availableSpotNumber\": 0,  \n            \"totalSpotNumber\": 0,  \n            \"occupiedSpotNumber\": 0  \n        }  \n    },  \n    \"vehicleEntranceCount\": {  \n        \"type\": \"Property\",  \n        \"value\": 28  \n    },  \n    \"vehicleExitCount\": {  \n        \"type\": \"Property\",  \n        \"value\": 12  \n    },  \n    \"@context\": [  \n        \"iudx:SmartParking\"  \n    ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
          OnStreetParking:
            MODEL_NAME: OnStreetParking
            MODEL_DESCRIPTION: A site, open space zone, on street, (metered or not) with direct access from a road, intended to park vehicles.
            MODEL_ADOPTERS: 
              currentAdopters:
                - {adopter: IUDX, comments: null, description: A parking facility Data Model., mail: null,
                  organization: IUDX, project: null, startDate: null}

            MODEL_DOCUMENTATION: "[![Smart Data Models](https://smartdatamodels.org/wp-content/uploads/2022/01/SmartDataModels_logo.png \"Logo\")](https://smartdatamodels.org)  \n\rEntity: OnStreetParking  \n=======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.Parking/blob/master/OnStreetParking/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **A site, open space zone, on street, (metered or not) with direct access from a road, intended to park vehicles.**  \n\rversion: 0.1.3  \n\n\r## List of properties  \n\n\r- `acceptedPaymentMethod`: Type of charge(s) performed by the parking site. Enum:'ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'  \r- `address`: The mailing address  \r- `allowedVehicleType`: Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html).. Enum:'agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, van, vehicleWithCatalyticConverter, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'  \r- `alternateName`: An alternative name for this item  \r- `areBordersMarked`: Denotes whether parking spots are delimited (with blank lines or similar) or not  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `availableSpotNumber`: The number of spots available globally, including reserved spaces, such as those for disabled people, long term parkers and so on. This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines  \r- `averageSpotLength`: The average length of parking spots  \r- `averageSpotWidth`: The average width of parking spots  \r- `category`: Street parking category. Enum:'blueZone, feeCharged, forDisabled, forElectricalCharging, forLoadUnload, forResidents, free, greenZone, mediumTerm, onlyWithPermit, shortTerm, taxiStop'  \r- `chargeType`: Type of charge(s) performed by the parking site. Enum:'additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, seasonTicket, temporaryFee, temporaryPrice, unknown, other'  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `extraSpotNumber`: The number of extra spots available, i.e. free. Extra    spots are those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). This value must aggregate free spots from all groups devoted to special parking conditions. Allowed values: A positive integer number, including 0. `extraSpotNumber` plus `availableSpotNumber` must be lower than or equal to `totalSpotNumber  \r- `fourWheelerSlots`: Four wheeler parking spot availability status in parking site corresponding to this observation.  \r- `id`: Unique identifier of the entity  \r- `layout`: Generic classification of the layout of the parking  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `maximumParkingDuration`: Maximum allowed stay at site encoded as a ISO8601 duration. An empty value indicates an indefinite duration.  \r- `municipalityInfo`: Municipality information corresponding to this observation.  \r- `name`: The name of this item.  \r- `observationDateTime`: Last reported time of observation.  \r- `occupancyDetectionType`: Occupancy detection method(s). Enum:'balancing, manual, modelBased, none, singleSpaceDetection'. The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_  \r- `occupancyModified`: Date last time the occupancy of the parking has being modified  \r- `occupiedSpotNumber`: Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber.  \r- `outOfServiceSlotNumber`: The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `parkingMode`: Parking mode(s). Enum:'echelonParking, parallelParking, perpendicularParking'  \r- `parkingSiteId`: The unique ID of the parking site or parking lot corresponding to this observation.  \r- `permitActiveHours`: This attribute allows to capture situations when a permit is only needed at specific hours or days of week. It is a structured value which must contain a subproperty per each required permit, indicating when the permit is active. If nothing specified for a permit it will mean that a permit is always required. An empty JSON Object means always active. The syntax must be conformant with schema.org  \r- `refParkingGroup`: Reference to the parking group(s) (if any) belonging to this onstreet parking zone.  \r- `refParkingSpot`: Individual parking spots belonging to this on street parking site.  \r- `requiredPermit`: This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a ','. For instance 'residentPermit,disabledPermit' stays that both, at the same time, a resident and a disabled permit are needed to park. If list is empty, no permit is needed.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `totalSpotNumber`: The total number of spots offered by this parking site. This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.  \r- `twoWheelerSlots`: Two wheeler parking spot availability status in parking site corresponding to this observation.  \r- `type`: Entity type. It must be equal to OnStreetParking  \r- `unclassifiedSlots`: Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.  \r- `usageScenario`: Type of charge(s) performed by the parking site. Enum:'carSharing, dropOff, kissAndRide, liftShare, loadingBay, overnightParking, parkAndRide, parkAndCycle, parkAndWalk, vehicleLift,'  \r  \n\rRequired properties  \n- `id`  \r- `location`  \r- `type`  \r  \n\rIn DATEX 2 version 2.3 terminology it corresponds to a _UrbanParkingSite_ of type _onStreetParking_. A data dictionary for DATEX II terms can be found at [http://datexbrowser.tamtamresearch.com/](http://datexbrowser.tamtamresearch.com/).  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nOnStreetParking:    \n  description: 'A site, open space zone, on street, (metered or not) with direct access from a road, intended to park vehicles.'    \n  properties:    \n    acceptedPaymentMethod:    \n      description: 'Type of charge(s) performed by the parking site. Enum:''ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'''    \n      enum:    \n        - ByBankTransferInAdvance    \n        - ByInvoice    \n        - Cash    \n        - CheckInAdvance    \n        - COD    \n        - DirectDebit    \n        - GoogleCheckout    \n        - PayPal    \n        - PaySwarm    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    allowedVehicleType:    \n      description: 'Vehicle type(s) allowed. The first element of this array _MUST_ be the principal vehicle type allowed. The following values defined by _VehicleTypeEnum_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/downloads/modelv23.html).. Enum:''agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, van, vehicleWithCatalyticConverter, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'''    \n      items:    \n        enum:    \n          - agriculturalVehicle    \n          - anyVehicle    \n          - articulatedVehicle    \n          - bicycle    \n          - bus    \n          - car    \n          - caravan    \n          - carOrLightVehicle    \n          - carWithCaravan    \n          - carWithTrailer    \n          - constructionOrMaintenanceVehicle    \n          - fourWheelDrive    \n          - highSidedVehicle    \n          - lorry    \n          - moped    \n          - motorcycle    \n          - motorcycleWithSideCar    \n          - motorscooter    \n          - tanker    \n          - threeWheeledVehicle    \n          - trailer    \n          - tram    \n          - twoWheeledVehicle    \n          - van    \n          - vehicleWithCatalyticConverter    \n          - vehicleWithoutCatalyticConverter    \n          - vehicleWithCaravan    \n          - vehicleWithTrailer    \n          - withEvenNumberedRegistrationPlates    \n          - withOddNumberedRegistrationPlates    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areBordersMarked:    \n      description: 'Denotes whether parking spots are delimited (with blank lines or similar) or not'    \n      type: boolean    \n      x-ngsi:    \n        model: https://schema.org/Boolean    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    availableSpotNumber:    \n      description: 'The number of spots available globally, including reserved spaces, such as those for disabled people, long term parkers and so on. This might be harder to estimate at those parking locations on which spots borders are not clearly marked by lines'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    averageSpotLength:    \n      description: 'The average length of parking spots'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/length    \n        type: Property    \n    averageSpotWidth:    \n      description: 'The average width of parking spots'    \n      minimum: 0    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/width    \n        type: Property    \n    category:    \n      description: 'Street parking category. Enum:''blueZone, feeCharged, forDisabled, forElectricalCharging, forLoadUnload, forResidents, free, greenZone, mediumTerm, onlyWithPermit, shortTerm, taxiStop'''    \n      items:    \n        enum:    \n          - barrierAccess    \n          - blueZone    \n          - feeCharged    \n          - forDisabled    \n          - forElectricalCharging    \n          - forLoadUnload    \n          - forResidents    \n          - free    \n          - greenZone    \n          - mediumTerm    \n          - onlyWithPermit    \n          - public    \n          - shortTerm    \n          - taxiStop    \n          - underground    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    chargeType:    \n      description: 'Type of charge(s) performed by the parking site. Enum:''additionalIntervalPrice, annualPayment, firstIntervalPrice, flat, free, minimum, maximum, monthlyPayment, seasonTicket, temporaryFee, temporaryPrice, unknown, other'''    \n      items:    \n        enum:    \n          - additionalIntervalPrice    \n          - annualPayment    \n          - firstIntervalPrice    \n          - flat    \n          - free    \n          - minimum    \n          - maximum    \n          - monthlyPayment    \n          - seasonTicket    \n          - temporaryFee    \n          - temporaryPrice    \n          - unknown    \n          - other    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    extraSpotNumber:    \n      description: 'The number of extra spots available, i.e. free. Extra    spots are those reserved for special purposes and usually require a permit. Permit details will be found at parking group level (entity of type `ParkingGroup`). This value must aggregate free spots from all groups devoted to special parking conditions. Allowed values: A positive integer number, including 0. `extraSpotNumber` plus `availableSpotNumber` must be lower than or equal to `totalSpotNumber'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    fourWheelerSlots:    \n      description: 'Four wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSlotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    id:    \n      anyOf: &onstreetparking_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    layout:    \n      description: 'Generic classification of the layout of the parking'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    maximumParkingDuration:    \n      description: 'Maximum allowed stay at site encoded as a ISO8601 duration. An empty value indicates an indefinite duration.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    municipalityInfo:    \n      description: 'Municipality information corresponding to this observation.'    \n      properties:    \n        cityId:    \n          description: 'Property. Model:''https://schema.org/Text''. City ID corresponding to this observation.'    \n          type: string    \n        cityName:    \n          description: 'Property. Model:''https://schema.org/Text''. City name corresponding to this observation'    \n          type: string    \n        district:    \n          description: 'Property. Model:''https://schema.org/Text''. District name corresponding to this observation.'    \n          type: string    \n        stateName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the state corresponding to this observation.'    \n          type: string    \n        ulbName:    \n          description: 'Property. Model:''https://schema.org/Text''. Name of the Urban Local Body corresponding to this observation.'    \n          type: string    \n        wardId:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward ID corresponding to this observation.'    \n          type: string    \n        wardName:    \n          description: 'Property. Model:''https://schema.org/Text''. Ward name corresponding to this observation.'    \n          type: string    \n        wardNum:    \n          description: 'Property. Model:''https://schema.org/Number''. Ward number corresponding to this observation.'    \n          type: number    \n        zoneId:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone ID corresponding to this observation.'    \n          type: string    \n        zoneName:    \n          description: 'Property. Model:''https://schema.org/Text''. Zone name corresponding to this observation.'    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    observationDateTime:    \n      description: 'Last reported time of observation.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    occupancyDetectionType:    \n      description: 'Occupancy detection method(s). Enum:''balancing, manual, modelBased, none, singleSpaceDetection''. The following from DATEX II version 2.3 _OccupancyDetectionTypeEnum_'    \n      items:    \n        enum:    \n          - balancing    \n          - manual    \n          - modelBased    \n          - none    \n          - singleSpaceDetection    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    occupancyModified:    \n      description: 'Date last time the occupancy of the parking has being modified'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/DateTime    \n        type: Property    \n    occupiedSpotNumber:    \n      description: 'Number of total parking spots occupied in the smart parking site corresponding to this observation. This must a positive number lower than or equal to the totalSpotNumber.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    outOfServiceSlotNumber:    \n      description: 'The number of bike racks/bike-docking slots or parking slots that are out of order and cannot be used to hire or park a bike in the bike docking station or parking site corresponding to this observation.'    \n      type: number    \n      x-ngsi:    \n        model: https://schema.org/Number    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *onstreetparking_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    parkingMode:    \n      description: 'Parking mode(s). Enum:''echelonParking, parallelParking, perpendicularParking'''    \n      enum:    \n        - echelonParking    \n        - parallelParking    \n        - perpendicularParking    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    parkingSiteId:    \n      description: 'The unique ID of the parking site or parking lot corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    permitActiveHours:    \n      description: 'This attribute allows to capture situations when a permit is only needed at specific hours or days of week. It is a structured value which must contain a subproperty per each required permit, indicating when the permit is active. If nothing specified for a permit it will mean that a permit is always required. An empty JSON Object means always active. The syntax must be conformant with schema.org'    \n      type: object    \n      x-ngsi:    \n        type: Property    \n    refParkingGroup:    \n      description: 'Reference to the parking group(s) (if any) belonging to this onstreet parking zone.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Relationship    \n    refParkingSpot:    \n      description: 'Individual parking spots belonging to this on street parking site.'    \n      items:    \n        format: uri    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Relationship    \n    requiredPermit:    \n      description: 'This attribute captures what permit(s) might be needed to park at this site. Semantics is that at least _one of_ these permits is needed to park. When a permit is composed by more than one item (and) they can be combined with a '',''. For instance ''residentPermit,disabledPermit'' stays that both, at the same time, a resident and a disabled permit are needed to park. If list is empty, no permit is needed.'    \n      items:    \n        type: string    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    totalSpotNumber:    \n      description: 'The total number of spots offered by this parking site. This number can be difficult to be obtained for those parking locations on which spots are not clearly marked by lines. Normative references: DATEX 2 version 2.3 attribute _parkingNumberOfSpaces_ of the _ParkingRecord_ class.'    \n      minimum: 0    \n      type: integer    \n      x-ngsi:    \n        model: http://schema.org/Number    \n        type: Property    \n    twoWheelerSlots:    \n      description: 'Two wheeler parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    type:    \n      description: 'Entity type. It must be equal to OnStreetParking'    \n      enum:    \n        - OnStreetParking    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    unclassifiedSlots:    \n      description: 'Unclassified vehicles or other vehicles parking spot availability status in parking site corresponding to this observation.'    \n      properties:    \n        availableSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots available for use in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        occupiedSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. Number of parking spots occupied in the smart parking site corresponding to this observation. This must a positve number lower than or equal to the totalSpotNumber.'    \n          type: number    \n        totalSpotNumber:    \n          description: 'Property. Model:''https://schema.org/Number''. The total number of spots offered by the parking site corresponding to this observation.'    \n          type: number    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    usageScenario:    \n      description: 'Type of charge(s) performed by the parking site. Enum:''carSharing, dropOff, kissAndRide, liftShare, loadingBay, overnightParking, parkAndRide, parkAndCycle, parkAndWalk, vehicleLift,'''    \n      enum:    \n        - carSharing    \n        - dropOff    \n        - kissAndRide    \n        - liftShare    \n        - loadingBay    \n        - overnightParking    \n        - parkAndRide    \n        - parkAndCycle    \n        - parkAndWalk    \n        - vehicleLift    \n        - other    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - location    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2022 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.Parking/blob/master/OnStreetParking/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.Parking/OnStreetParking/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.1.3    \n```  \n</details>    \n\r## Example payloads    \n\r#### OnStreetParking NGSI-v2 key-values Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"category\": [  \n    \"blueZone\",  \n    \"shortTerm\",  \n    \"forDisabled\"  \n  ],  \n  \"allowedVehicleType\": [  \n    \"car\"  \n  ],  \n  \"chargeType\": [  \n    \"temporaryFee\"  \n  ],  \n  \"requiredPermit\": [  \n    \"blueZonePermit\",  \n    \"disabledPermit\"  \n  ],  \n  \"permitActiveHours\": {  \n    \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n  },  \n  \"maximumParkingDuration\": \"PT2H\",  \n  \"availableSpotNumber\": 3,  \n  \"occupiedSpotNumber\": 3,  \n  \"totalSpotNumber\": 6,  \n  \"extraSpotNumber\": 2,  \n  \"dateModified\": \"2016-06-02T09:25:55.00Z\",  \n  \"location\": {  \n    \"type\": \"Polygon\",  \n    \"coordinates\": [  \n      [  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ],  \n        [  \n          -3.803161973253841,  \n          43.46301091092682  \n        ],  \n        [  \n          -3.803147082548618,  \n          43.462879859445884  \n        ],  \n        [  \n          -3.803536474744068,  \n          43.462838666196674  \n        ],  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ]  \n      ]  \n    ]  \n  },  \n  \"areaServed\": \"Zona Centro\",  \n  \"refParkingGroup\": [  \n    \"daoiz-velarde-1-5-main\",  \n    \"daoiz-velarde-1-5-disabled\"  \n  ],  \n  \"outOfServiceSlotNumber\": 0,  \n  \"parkingSiteId\": \"P2\",  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"fourWheelerSlots\": {  \n    \"availableSpotNumber\": 25,  \n    \"totalSpotNumber\": 25,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"unclassifiedSlots\": {  \n    \"availableSpotNumber\": 0,  \n    \"totalSpotNumber\": 0,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"twoWheelerSlots\": {  \n    \"availableSpotNumber\": 20,  \n    \"totalSpotNumber\": 20,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  }  \n}  \n```  \n\r#### OnStreetParking NGSI-v2 normalized Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"category\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"blueZone\",  \n      \"shortTerm\",  \n      \"forDisabled\"  \n    ]  \n  },  \n  \"permitActiveHours\": {  \n    \"type\": \"array\",  \n    \"value\": {  \n      \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n    }  \n  },  \n  \"requiredPermit\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"blueZonePermit\",  \n      \"disabledPermit\"  \n    ]  \n  },  \n  \"allowedVehicleType\": {  \n    \"type\": \"Text\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"chargeType\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"temporaryFee\"  \n    ]  \n  },  \n  \"refParkingGroup\": {  \n    \"type\": \"Relationship\",  \n    \"value\": [  \n      \"daoiz-velarde-1-5-main\",  \n      \"daoiz-velarde-1-5-disabled\"  \n    ]  \n  },  \n  \"totalSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 6  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Polygon\",  \n      \"coordinates\": [  \n        [  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ],  \n          [  \n            -3.803161973253841,  \n            43.46301091092682  \n          ],  \n          [  \n            -3.803147082548618,  \n            43.462879859445884  \n          ],  \n          [  \n            -3.803536474744068,  \n            43.462838666196674  \n          ],  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ]  \n        ]  \n      ]  \n    }  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Zona Centro\"  \n  },  \n  \"maximumAllowedStay\": {  \n    \"type\": \"Text\",  \n    \"value\": \"PT2H\"  \n  },  \n  \"dateModified\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2016-06-02T09:25:55.00Z\"  \n  },  \n  \"extraSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 2  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 3,  \n    \"metadata\": {  \n      \"timestamp\": {  \n        \"value\": \"2018-09-12T12:00:00\",  \n        \"type\": \"DateTime\"  \n      }  \n    }  \n  },  \n  \"occupiedSpotNumber\": {  \n    \"type\": \"Number\",  \n    \"value\": 3,  \n    \"metadata\": {  \n      \"timestamp\": {  \n        \"value\": \"2018-09-12T12:00:00\",  \n        \"type\": \"DateTime\"  \n      }  \n    }  \n  },  \n  \"observationDateTime\": {  \n    \"type\": \"DateTime\",  \n    \"value\": \"2021-03-11T15:51:02+05:30\"  \n  },  \n  \"fourWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 25,  \n      \"totalSpotNumber\": 25,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"unclassifiedSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 0,  \n      \"totalSpotNumber\": 0,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"twoWheelerSlots\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"availableSpotNumber\": 20,  \n      \"totalSpotNumber\": 20,  \n      \"occupiedSpotNumber\": 0  \n    }  \n  },  \n  \"municipalityInfo\": {  \n    \"type\": \"StructuredValue\",  \n    \"value\": {  \n      \"district\": \"Bangalore Urban\",  \n      \"ulbName\": \"BMC\",  \n      \"cityId\": \"23\",  \n      \"wardId\": \"23\",  \n      \"stateName\": \"Karnataka\",  \n      \"cityName\": \"Bangalore\",  \n      \"zoneName\": \"South\",  \n      \"wardName\": \"Bangalore Urban\",  \n      \"zoneId\": \"2\",  \n      \"wardNum\": 4  \n    }  \n  }  \n}  \n```  \n\r#### OnStreetParking NGSI-LD key-values Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OnStreetParking:santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"allowedVehicleType\": [  \n    \"car\"  \n  ],  \n  \"areaServed\": \"Zona Centro\",  \n  \"availableSpotNumber\": 3,  \n  \"category\": [  \n    \"blueZone\",  \n    \"shortTerm\",  \n    \"forDisabled\"  \n  ],  \n  \"chargeType\": [  \n    \"temporaryFee\"  \n  ],  \n  \"extraSpotNumber\": 2,  \n  \"fourWheelerSlots\": {  \n    \"availableSpotNumber\": 25,  \n    \"totalSpotNumber\": 25,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"location\": {  \n    \"coordinates\": [  \n      [  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ],  \n        [  \n          -3.803161973253841,  \n          43.46301091092682  \n        ],  \n        [  \n          -3.803147082548618,  \n          43.462879859445884  \n        ],  \n        [  \n          -3.803536474744068,  \n          43.462838666196674  \n        ],  \n        [  \n          -3.80356167695194,  \n          43.46296641666926  \n        ]  \n      ]  \n    ],  \n    \"type\": \"Polygon\"  \n  },  \n  \"maximumAllowedStay\": \"PT2H\",  \n  \"modifiedAt\": \"2016-06-02T09:25:55.00Z\",  \n  \"municipalityInfo\": {  \n    \"district\": \"Bangalore Urban\",  \n    \"ulbName\": \"BMC\",  \n    \"cityId\": \"23\",  \n    \"wardId\": \"23\",  \n    \"stateName\": \"Karnataka\",  \n    \"cityName\": \"Bangalore\",  \n    \"zoneName\": \"South\",  \n    \"wardName\": \"Bangalore Urban\",  \n    \"zoneId\": \"2\",  \n    \"wardNum\": 4  \n  },  \n  \"observationDateTime\": \"2021-03-11T15:51:02+05:30\",  \n  \"occupiedSpotNumber\": 3,  \n  \"parkingSiteId\": \"P2\",  \n  \"permitActiveHours\": {  \n    \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n  },  \n  \"refParkingGroup\": [  \n    \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-main\",  \n    \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-disabled\"  \n  ],  \n  \"requiredPermit\": [  \n    \"blueZonePermit\",  \n    \"disabledPermit\"  \n  ],  \n  \"totalSpotNumber\": 6,  \n  \"twoWheelerSlots\": {  \n    \"availableSpotNumber\": 20,  \n    \"totalSpotNumber\": 20,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"unclassifiedSlots\": {  \n    \"availableSpotNumber\": 0,  \n    \"totalSpotNumber\": 0,  \n    \"occupiedSpotNumber\": 0  \n  },  \n  \"@context\": [  \n    \"iudx:SmartParking\",  \n    \"https://raw.githubusercontent.com/smart-data-models/dataModel.Parking/master/context.jsonld\"  \n  ]  \n}  \n```  \n\r#### OnStreetParking NGSI-LD normalized Example    \n\rHere is an example of a OnStreetParking in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:OnStreetParking:santander:daoiz_velarde_1_5\",  \n  \"type\": \"OnStreetParking\",  \n  \"allowedVehicleType\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"car\"  \n    ]  \n  },  \n  \"areaServed\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Zona Centro\"  \n  },  \n  \"availableSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 3,  \n    \"observedAt\": \"2018-09-12T12:00:00Z\"  \n  },  \n  \"category\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"blueZone\",  \n      \"shortTerm\",  \n      \"forDisabled\"  \n    ]  \n  },  \n  \"chargeType\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"temporaryFee\"  \n    ]  \n  },  \n  \"extraSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 2  \n  },  \n  \"location\": {  \n    \"type\": \"Geoproperty\",  \n    \"value\": {  \n      \"type\": \"Polygon\",  \n      \"coordinates\": [  \n        [  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ],  \n          [  \n            -3.803161973253841,  \n            43.46301091092682  \n          ],  \n          [  \n            -3.803147082548618,  \n            43.462879859445884  \n          ],  \n          [  \n            -3.803536474744068,  \n            43.462838666196674  \n          ],  \n          [  \n            -3.80356167695194,  \n            43.46296641666926  \n          ]  \n        ]  \n      ]  \n    }  \n  },  \n  \"maximumAllowedStay\": {  \n    \"type\": \"Property\",  \n    \"value\": \"PT2H\"  \n  },  \n  \"occupiedSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 3,  \n    \"observedAt\": \"2018-09-12T12:00:00Z\"  \n  },  \n  \"permitActiveHours\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"blueZonePermit\": \"Mo, Tu, We, Th, Fr, Sa 09:00-20:00\"  \n    }  \n  },  \n  \"refParkingGroup\": {  \n    \"type\": \"Relationship\",  \n    \"object\": [  \n      \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-main\",  \n      \"urn:ngsi-ld:ParkingGroup:daoiz-velarde-1-5-disabled\"  \n    ]  \n  },  \n  \"requiredPermit\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"blueZonePermit\",  \n      \"disabledPermit\"  \n    ]  \n  },  \n  \"totalSpotNumber\": {  \n    \"type\": \"Property\",  \n    \"value\": 6  \n  },  \n  \"@context\": [  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\rSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
      ParksAndGardens:
        SUBMODULE_SHORT_NAME: ParksAndGardens
        MODELS:
      PointOfInterest:
        SUBMODULE_SHORT_NAME: PointOfInterest
        MODELS:
          PointOfInterest:
            MODEL_NAME: PointOfInterest
            MODEL_DESCRIPTION: This entity contains a harmonised geographic description of a Point of Interest
            MODEL_ADOPTERS: 
              currentAdopters:
                - {adopter: IUDX, comments: null, description: Data Model for describing a point of
                    interest in he city., mail: null, organization: null, project: null, startDate: null}

            MODEL_DOCUMENTATION: "Entity: PointOfInterest  \n=======================\r  \n\r[Open License](https://github.com/smart-data-models//dataModel.PointOfInterest/blob/master/PointOfInterest/LICENSE.md)  \n\r[document generated automatically](https://docs.google.com/presentation/d/e/2PACX-1vTs-Ng5dIAwkg91oTTUdt8ua7woBXhPnwavZ0FxgR8BsAI_Ek3C5q97Nd94HS8KhP-r_quD4H0fgyt3/pub?start=false&loop=false&delayms=3000#slide=id.gb715ace035_0_60)  \n\rGlobal description: **This entity contains a harmonised geographic description of a Point of Interest**  \n\n\r## List of properties  \n\n\r- `additionalInfoURL`: URL from which additional information of the subject can be obtained  \r- `address`: The mailing address  \r- `alternateName`: An alternative name for this item  \r- `areaServed`: The geographic area where a service or offered item is provided  \r- `category`: Category of this point of interest. Allowed values: Those defined by the [Factual taxonomy](https://github.com/Factual/places/blob/master/categories/factual_taxonomy.json) together with the extended categories described by the specification. For instance the value `113` corresponds to beaches, and the value `311` corresponds to museums.  \r- `contactPoint`: The details to contact with the item.  \r- `dataProvider`: A sequence of characters identifying the provider of the harmonised data entity.  \r- `dateCreated`: Entity creation timestamp. This will usually be allocated by the storage platform.  \r- `dateModified`: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.  \r- `description`: A description of this item  \r- `id`: Unique identifier of the entity  \r- `location`: Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon  \r- `name`: The name of this item.  \r- `owner`: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)  \r- `refSeeAlso`: List of references to one or more related entities.  \r- `seeAlso`: list of uri pointing to additional resources about the item  \r- `source`: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.  \r- `type`: NGSI Entity type. It has to be PointOfInterest  \r- `wardId`: Ward ID of the entity corresponding to this observation.  \r- `zoneId`: Zone ID of the entity corresponding to this observation.  \r- `zoneName`: Zone name of the entity corresponding to this observation.  \r  \n\rRequired properties  \n- `category`  \r- `id`  \r- `name`  \r- `type`  \r  \n\rThis entity is used in applications that use spatial data and is applicable to Automotive, Environment, Industry and Smart City vertical segments and related IoT applications. This data model has been created in cooperation with the GSMA and the members of the [IoT Big Data Project](http://www.gsma.com/iot/iot-big-data/). Created with contributions of IUDX project.  \n\r## Data Model description of properties  \n\rSorted alphabetically (click for details)  \n<details><summary><strong>full yaml details</strong></summary>    \n\r```yaml  \nPointOfInterest:    \n  description: 'This entity contains a harmonised geographic description of a Point of Interest'    \n  properties:    \n    additionalInfoURL:    \n      anyOf:    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'URL from which additional information of the subject can be obtained'    \n      x-ngsi:    \n        type: Relationship    \n    address:    \n      description: 'The mailing address'    \n      properties:    \n        addressCountry:    \n          description: 'Property. The country. For example, Spain. Model:''https://schema.org/addressCountry'''    \n          type: string    \n        addressLocality:    \n          description: 'Property. The locality in which the street address is, and which is in the region. Model:''https://schema.org/addressLocality'''    \n          type: string    \n        addressRegion:    \n          description: 'Property. The region in which the locality is, and which is in the country. Model:''https://schema.org/addressRegion'''    \n          type: string    \n        postOfficeBoxNumber:    \n          description: 'Property. The post office box number for PO box addresses. For example, 03578. Model:''https://schema.org/postOfficeBoxNumber'''    \n          type: string    \n        postalCode:    \n          description: 'Property. The postal code. For example, 24004. Model:''https://schema.org/https://schema.org/postalCode'''    \n          type: string    \n        streetAddress:    \n          description: 'Property. The street address. Model:''https://schema.org/streetAddress'''    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/address    \n        type: Property    \n    alternateName:    \n      description: 'An alternative name for this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    areaServed:    \n      description: 'The geographic area where a service or offered item is provided'    \n      type: string    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    category:    \n      description: 'Category of this point of interest. Allowed values: Those defined by the [Factual taxonomy](https://github.com/Factual/places/blob/master/categories/factual_taxonomy.json) together with the extended categories described by the specification. For instance the value `113` corresponds to beaches, and the value `311` corresponds to museums.'    \n      items:    \n        type: string    \n      minItems: 1    \n      type: array    \n      x-ngsi:    \n        model: https://schema.org/Text    \n        type: Property    \n    contactPoint:    \n      description: 'The details to contact with the item.'    \n      properties:    \n        contactType:    \n          description: 'Property. Contact type of this item.'    \n          type: string    \n        email:    \n          description: 'Property. Email address of owner.'    \n          format: idn-email    \n          type: string    \n        name:    \n          description: 'Property. The name of this item.'    \n          type: string    \n        telephone:    \n          description: 'Property. Telephone of this contact.'    \n          type: string    \n        url:    \n          description: 'Property. URL which provides a description or further information about this item.'    \n          format: uri    \n          type: string    \n      type: object    \n      x-ngsi:    \n        model: https://schema.org/ContactPoint    \n        type: Property    \n    dataProvider:    \n      description: 'A sequence of characters identifying the provider of the harmonised data entity.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateCreated:    \n      description: 'Entity creation timestamp. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    dateModified:    \n      description: 'Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.'    \n      format: date-time    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    description:    \n      description: 'A description of this item'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    id:    \n      anyOf: &pointofinterest_-_properties_-_owner_-_items_-_anyof    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          maxLength: 256    \n          minLength: 1    \n          pattern: ^[\\w\\-\\.\\{\\}\\$\\+\\*\\[\\]`|~^@!,:\\\\]+$    \n          type: string    \n        - description: 'Property. Identifier format of any NGSI entity'    \n          format: uri    \n          type: string    \n      description: 'Unique identifier of the entity'    \n      x-ngsi:    \n        type: Property    \n    location:    \n      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon'    \n      oneOf:    \n        - description: 'Geoproperty. Geojson reference to the item. Point'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                type: number    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - Point    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Point'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. LineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              minItems: 2    \n              type: array    \n            type:    \n              enum:    \n                - LineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON LineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. Polygon'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 4    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - Polygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON Polygon'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiPoint'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  type: number    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPoint    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPoint'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    type: number    \n                  minItems: 2    \n                  type: array    \n                minItems: 2    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiLineString    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiLineString'    \n          type: object    \n        - description: 'Geoproperty. Geojson reference to the item. MultiLineString'    \n          properties:    \n            bbox:    \n              items:    \n                type: number    \n              minItems: 4    \n              type: array    \n            coordinates:    \n              items:    \n                items:    \n                  items:    \n                    items:    \n                      type: number    \n                    minItems: 2    \n                    type: array    \n                  minItems: 4    \n                  type: array    \n                type: array    \n              type: array    \n            type:    \n              enum:    \n                - MultiPolygon    \n              type: string    \n          required:    \n            - type    \n            - coordinates    \n          title: 'GeoJSON MultiPolygon'    \n          type: object    \n      x-ngsi:    \n        type: Geoproperty    \n    name:    \n      description: 'The name of this item.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    owner:    \n      description: 'A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)'    \n      items:    \n        anyOf: *pointofinterest_-_properties_-_owner_-_items_-_anyof    \n        description: 'Property. Unique identifier of the entity'    \n      type: array    \n      x-ngsi:    \n        type: Property    \n    refSeeAlso:    \n      description: 'List of references to one or more related entities.'    \n      items:    \n        anyOf:    \n          - anyOf: *pointofinterest_-_properties_-_owner_-_items_-_anyof    \n            description: 'Property. Unique identifier of the entity'    \n      minItems: 1    \n      type: array    \n      uniqueItems: true    \n      x-ngsi:    \n        model: https://schema.org/URL    \n        type: Property    \n    seeAlso:    \n      description: 'list of uri pointing to additional resources about the item'    \n      oneOf:    \n        - items:    \n            format: uri    \n            type: string    \n          minItems: 1    \n          type: array    \n        - format: uri    \n          type: string    \n      x-ngsi:    \n        type: Property    \n    source:    \n      description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    type:    \n      description: 'NGSI Entity type. It has to be PointOfInterest'    \n      enum:    \n        - PointOfInterest    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    wardId:    \n      description: 'Ward ID of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    zoneId:    \n      description: 'Zone ID of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n    zoneName:    \n      description: 'Zone name of the entity corresponding to this observation.'    \n      type: string    \n      x-ngsi:    \n        type: Property    \n  required:    \n    - id    \n    - type    \n    - category    \n    - name    \n  type: object    \n  x-derived-from: \"\"    \n  x-disclaimer: 'Redistribution and use in source and binary forms, with or without modification, are permitted  provided that the license conditions are met. Copyleft (c) 2021 Contributors to Smart Data Models Program'    \n  x-license-url: https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/LICENSE.md    \n  x-model-schema: https://smart-data-models.github.io/dataModel.PointOfInterest/PointOfInterest/schema.json    \n  x-model-tags: IUDX    \n  x-version: 0.2.0    \n```  \n</details>    \n\r## Example payloads    \n\r#### PointOfInterest NGSI-v2 key-values Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as key-values. This is compatible with NGSI-v2 when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"name\": \"Playa de a Concha\",  \n  \"description\": \"La Playa de A Concha se presenta como una continuaci\u00f3n de la Playa de Compostela, una de las m\u00e1s frecuentadas de Vilagarc\u00eda.\",  \n  \"address\": {  \n    \"addressCountry\": \"ES\",  \n    \"addressLocality\": \"Vilagarc\u00eda de Arousa\"  \n  },  \n  \"category\": [  \n    \"113\"  \n  ],  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -8.768460000000001,  \n      42.60214472222222  \n    ]  \n  },  \n  \"source\": \"http://www.tourspain.es\",  \n  \"refSeeAlso\": [  \n    \"Beach-A-Concha-123456\"  \n  ],  \n  \"wardId\": \"\",  \n  \"zoneId\": \"\",  \n  \"additionalInfoURL\": \"urn:ngsi-ld:Point:34E4:A234\",  \n  \"zoneName\": \"\"  \n}  \n```  \n\r#### PointOfInterest NGSI-v2 normalized Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as normalized. This is compatible with NGSI-v2 when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"category\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"113\"  \n    ]  \n  },  \n  \"description\": {  \n    \"type\": \"Text\",  \n    \"value\": \"La Playa de A Concha se presenta como una continuaciin de la Playa de Compostela, una de las mis frecuentadas de Vilagarcia.\"  \n  },  \n  \"refSeeAlso\": {  \n    \"type\": \"array\",  \n    \"value\": [  \n      \"Beach-A-Concha-123456\"  \n    ]  \n  },  \n  \"source\": {  \n    \"type\": \"Text\",  \n    \"value\": \"http://www.tourspain.es\"  \n  },  \n  \"location\": {  \n    \"type\": \"geo:json\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -8.768460000000001,  \n        42.60214472222222  \n      ]  \n    }  \n  },  \n  \"address\": {  \n    \"type\": \"PostalAddress\",  \n    \"value\": {  \n      \"addressCountry\": \"ES\",  \n      \"addressLocality\": \"Vilagarcia de Arousa\"  \n    }  \n  },  \n  \"name\": {  \n    \"type\": \"Text\",  \n    \"value\": \"Playa de a Concha\"  \n  },  \n  \"wardId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"zoneId\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  },  \n  \"additionalInfoURL\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Point:34E4:A234\"  \n  },  \n  \"zoneName\": {  \n    \"type\": \"Text\",  \n    \"value\": \"\"  \n  }  \n}  \n```  \n\r#### PointOfInterest NGSI-LD key-values Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as key-values. This is compatible with NGSI-LD when  using `options=keyValues` and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:PointOfInterest:PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"category\": [  \n    \"113\"  \n  ],  \n  \"description\": \"La Playa de A Concha se presenta como una continuacion de la Playa de Compostela, una de las mas frecuentadas de Vilagarcia.\",  \n  \"refSeeAlso\": [  \n    \"urn:ngsi-ld:SeeAlso:Beach-A-Concha-123456\"  \n  ],  \n  \"source\": \"http://www.tourspain.es\",  \n  \"location\": {  \n    \"type\": \"Point\",  \n    \"coordinates\": [  \n      -8.768460000000001,  \n      42.60214472222222  \n    ]  \n  },  \n  \"address\": {  \n    \"addressCountry\": \"ES\",  \n    \"addressLocality\": \"Vilagarcia de Arousa\"  \n  },  \n  \"name\": \"Playa de a Concha\",  \n  \"wardId\": \"\",  \n  \"zoneId\": \"\",  \n  \"additionalInfoURL\": \"urn:ngsi-ld:Point:34E4:A234\",  \n  \"zoneName\": \"\",  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \n\r#### PointOfInterest NGSI-LD normalized Example    \n\rHere is an example of a PointOfInterest in JSON-LD format as normalized. This is compatible with NGSI-LD when not using options and returns the context data of an individual entity.  \n\r```json  \n\r{  \n  \"id\": \"urn:ngsi-ld:PointOfInterest:PointOfInterest-A-Concha-123456\",  \n  \"type\": \"PointOfInterest\",  \n  \"address\": {  \n    \"type\": \"Property\",  \n    \"value\": {  \n      \"addressCountry\": \"ES\",  \n      \"addressLocality\": \"Vilagarcia de Arousa\"  \n    }  \n  },  \n  \"category\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"113\"  \n    ]  \n  },  \n  \"description\": {  \n    \"type\": \"Property\",  \n    \"value\": \"La Playa de A Concha se presenta como una continuacion de la Playa de Compostela, una de las mas frecuentadas de Vilagarcia.\"  \n  },  \n  \"location\": {  \n    \"type\": \"GeoProperty\",  \n    \"value\": {  \n      \"type\": \"Point\",  \n      \"coordinates\": [  \n        -8.768460000000001,  \n        42.60214472222222  \n      ]  \n    }  \n  },  \n  \"name\": {  \n    \"type\": \"Property\",  \n    \"value\": \"Playa de a Concha\"  \n  },  \n  \"refSeeAlso\": {  \n    \"type\": \"Property\",  \n    \"value\": [  \n      \"urn:ngsi-ld:SeeAlso:Beach-A-Concha-123456\"  \n    ]  \n  },  \n  \"source\": {  \n    \"type\": \"Property\",  \n    \"value\": \"http://www.tourspain.es\"  \n  },  \n   \"wardId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"zoneId\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"additionalInfoURL\": {  \n    \"type\": \"Relationship\",  \n    \"value\": \"urn:ngsi-ld:Point:34E4:A234\"  \n  },  \n  \"zoneName\": {  \n    \"type\": \"Property\",  \n    \"value\": \"\"  \n  },  \n  \"@context\": [  \n    \"https://smartdatamodels.org/context.jsonld\",  \n    \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\"  \n  ]  \n}  \n```  \nSee [FAQ 10](https://smartdatamodels.org/index.php/faqs/) to get an answer on how to deal with magnitude units"
